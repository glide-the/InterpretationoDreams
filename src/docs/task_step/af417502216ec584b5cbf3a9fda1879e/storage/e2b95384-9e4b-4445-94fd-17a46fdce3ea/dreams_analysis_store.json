{"analysis_store/data": {"a1dc818c-b18a-47c9-94e6-97aeb42bdeb5": {"__data__": {"id_": "a1dc818c-b18a-47c9-94e6-97aeb42bdeb5", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u7814\u7a76\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u8ba8\u8bba\u4e0e\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u7684\u63a5\u8fd1\u5ea6\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u9886\u57df\u591a\u5143**\uff1a\u6d89\u53ca\u793e\u4ea4\u5a92\u4f53\u3001\u7535\u89c6\u7535\u5f71\u7b49\u4e0d\u540c\u5a92\u4ecb\u4e2d\u7231\u60c5\u8868\u73b0\u7684\u7814\u7a76\uff0c\u4ee5\u53ca\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\u63a2\u7d22\u3002\n2. **\u5f3a\u8c03\u7406\u8bba\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\u4e4b\u95f4\u7684\u7d27\u5bc6\u8054\u7cfb\uff0c\u6ce8\u91cd\u63a2\u8ba8\u5b83\u4eec\u4e4b\u95f4\u7684\u4ea4\u53c9\u70b9\u548c\u91cd\u53e0\u90e8\u5206\u3002\n3. **\u5173\u6ce8\u60c5\u611f\u4e0e\u8bed\u4e49**\uff1a\u7814\u7a76\u65e2\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u76f8\u5173\uff0c\u53c8\u56f4\u7ed5\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u5c55\u5f00\u3002 ", "scene_monologue_context": "\u4eca\u5929\u6211\u4e00\u76f4\u5728\u6df1\u5165\u7814\u7a76\u7b97\u6cd5\u76f8\u5173\u7684\u5185\u5bb9\u3002\u4e3b\u8981\u805a\u7126\u5728\u5206\u6790\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\uff0c\u5c24\u5176\u662fLayerNorm\u548cRMSNorm\u8fd9\u4e24\u4e2a\u65b9\u9762\u3002  \n\n\u6211\u4ed4\u7ec6\u63a2\u8ba8\u4e86LayerNorm\u548cRMSNorm\u5728\u590d\u6742\u52a8\u6001\u73af\u5883\u53ca\u5927\u89c4\u6a21\u6570\u636e\u4e0b\u662f\u600e\u6837\u5177\u4f53\u4f18\u5316\u4ee5\u4fdd\u6301\u7a33\u5b9a\u6027\u7684\uff0c\u540c\u65f6\u4e5f\u601d\u8003\u4e86\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u9762\u5bf9\u6570\u636e\u566a\u58f0\u548c\u5f02\u5e38\u503c\u65f6\uff0c\u63d0\u5347\u5b83\u4eec\u5bb9\u9519\u6027\u7684\u53ef\u80fd\u65b9\u5411\u3002  \n\n\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u6211\u67e5\u9605\u4e86\u4e0d\u5c11\u8d44\u6599\uff0c\u50cf\u5173\u4e8eLayerNorm\u548cRMSNorm\u7684\u6b63\u5f0f\u5b9a\u4e49\uff0c\u4ee5\u53ca\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u5305\u62ec\u5176\u5b9a\u4e49\u3001\u591a\u79cd\u5411\u91cf\u6269\u5c55\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982\u5411\u91cf\u5e73\u5747\u6269\u5c55\u3001\u5411\u91cf\u96f6\u6269\u5c55\u3001\u5411\u91cf\u5faa\u73af\u6269\u5c55\u548c\u5411\u91cf\u968f\u673a\u6269\u5c55\u7b49\uff0c\u8fd8\u4e86\u89e3\u4e86\u8fd9\u4e9b\u6269\u5c55\u65b9\u6cd5\u7684\u9006\u51fd\u6570\u3002  \n\n\u53e6\u5916\uff0c\u8fd8\u6d89\u53ca\u5230\u7b97\u5b50\u7684\u65e0\u635f\u6269\u5c55\u5b9a\u4e49\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u76f8\u5bf9\u590d\u6742\uff0c\u4e0d\u8fc7\u5bf9\u7406\u89e3\u6574\u4e2a\u7b97\u6cd5\u4f53\u7cfb\u5f88\u5173\u952e\u3002  \n\n\u5728\u6a21\u578b\u8f6c\u6362\u65b9\u9762\uff0c\u6211\u770b\u5230\u5c06transformer\u4e2d\u7684\u6bcf\u4e2aLayerNorm\u8f6c\u6362\u4e3aRMSNorm\u540e\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u4fee\u6539\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u6bd4\u5982\u9009\u62e9\u4e0d\u540c\u7684\u6b63\u4ea4\u77e9\u9635\\(Q_\u2113\\) \uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7PCA\u8ba1\u7b97\u8fd9\u4e9b\u77e9\u9635\u3002  \n\n\u5728\u5b9e\u9a8c\u9a8c\u8bc1\u73af\u8282\uff0c\u6211\u4e86\u89e3\u5230\u4f7f\u7528HuggingFace Transformers\u548cPyTorch\u5b9e\u73b0\u4ee3\u7801\uff0c\u5728\u4e0d\u540cGPU\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u6821\u51c6\u96c6\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8fd8\u5bf9\u6bd4\u4e86\u4e0d\u540c\u7684\u6a21\u578b\u548c\u4efb\u52a1\u3002  \n\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u8fd8\u5173\u6ce8\u5230\u4e86\u4e00\u4e9b\u65b0\u7684\u7814\u7a76\u70b9\uff0c\u6bd4\u5982\u4e3a\u4e86\u89e3\u51b3Conformer\u4e2dLayerNorm\u5b58\u5728\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u7684BiasNorm\uff0c\u4ee5\u53ca\u65b0\u7684\u6fc0\u6d3b\u51fd\u6570SwooshR\u548cSwooshL \uff0c\u5b83\u4eec\u5404\u81ea\u6709\u72ec\u7279\u7684\u516c\u5f0f\u548c\u7279\u70b9\uff0c\u5e76\u4e14\u9488\u5bf9\u4e0d\u540c\u6a21\u5757\u6709\u4e0d\u540c\u7684\u5e94\u7528\u9009\u62e9\u3002  \n\n\u603b\u4e4b\uff0c\u4eca\u5929\u5728\u7b97\u6cd5\u7814\u7a76\u9886\u57df\u6536\u83b7\u6ee1\u6ee1\uff0c\u5bf9\u8fd9\u4e9b\u590d\u6742\u7684\u77e5\u8bc6\u4f53\u7cfb\u6709\u4e86\u66f4\u6df1\u5165\u7684\u7406\u89e3\u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "e2b95384-9e4b-4445-94fd-17a46fdce3ea:\u300c\u5206\u6790\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u300d\ne2b95384-9e4b-4445-94fd-17a46fdce3ea:\u300cLayerNorm \u548c RMSNorm \u5728\u590d\u6742\u52a8\u6001\u73af\u5883\u53ca\u5927\u89c4\u6a21\u6570\u636e\u4e0b\u662f\u5982\u4f55\u5177\u4f53\u4f18\u5316\u4ee5\u4fdd\u6301\u7a33\u5b9a\u6027\u7684\uff0c\u4ee5\u53ca\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u9762\u5bf9\u6570\u636e\u566a\u58f0\u548c\u5f02\u5e38\u503c\uff0c\u63d0\u5347\u5b83\u4eec\u5bb9\u9519\u6027\u7684\u53ef\u80fd\u65b9\u5411\u6709\u54ea\u4e9b\uff1f \u300d\ne2b95384-9e4b-4445-94fd-17a46fdce3ea:\u300cref_ids: 454845924254196540, chunk_ids: 7, Score: 0.3652, Text: # B.2 MODEL LAYERS\nIn this section, we give the formal definition of LayerNorm $\\\\operatorname{LN}(\\\\cdot)$ and RMS Norm ${\\\\mathrm{RMS}}\\\\left(\\\\cdot\\\\right)$ .  \n\nDefinition 1 (LayerNorm) .LayerNorm $L N(\\\\cdot;\\\\mu,\\\\beta,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nL N(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\beta,\\\\epsilon)=\\\\frac{\\\\mathbf{x}-\\\\mathbb{E}[\\\\mathbf{x}]}{\\\\sqrt{\\\\mathrm{Var}[\\\\mathbf{x}]+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu}+\\\\beta,\n$$  \n\nwhere $\\\\mathbf{x},\\\\pmb{\\\\mu},\\\\beta\\\\in\\\\mathbb{R}^{D}$ .  \n\nDefinition 2 (RMSNorm) .RMS Norm $R M S(\\\\cdot;\\\\mu,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nR M S(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\epsilon)=\\\\frac{\\\\mathbf{x}}{\\\\sqrt{\\\\frac{1}{D}\\\\sum_{i=1}^{D}(\\\\mathbf{x}[i])^{2}+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu},\n$$  \n\nwhere x,$\\\\pmb{\\\\mu}\\\\in\\\\mathbb{R}^{D}$ .  \n\nRemark. In neural networks, inputs of normalization layers are usually high dimension tensors. In this case, LayerNorm and RMSNorm normally apply to the last dimension separately.\n\n# B.3 LOSSLESS EXPANSION IN VECTOR SPACE\nIn this section, we first give the general definition of lossless expansion in vector space.  \n\ndimensions satisfy dim it is invertible. Definition 3 (Lossless $(\\\\bar{\\\\mathcal{T}})\\\\geq d i m(S)$ T\u2265S, a vector space expansion ector space) .Given $\\\\boldsymbol{S}$ and V$\\\\tau$ $\\\\mathcal{V}:\\\\mathcal{S}\\\\rightarrow\\\\mathcal{T}$ S \u2192T is said to be lossless if ector spaces where the  \n\nRemark. Note that the identity function Id is lossless with its inverse being itself.  \n\nThen we give a few examples of lossless vector space expansions. These examples will also be used in LEMON.  \n\nExample B.3.1 (Vector average expansion $\\\\mathcal{V}_{\\\\mathrm{avg.}}$ ).Let $\\\\mathbf{\\\\widetilde{x}}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ and its average $\\\\begin{array}{r}{\\\\lambda_{V}g(\\\\mathbf{x})=\\\\mathbb{E}[\\\\mathbf{x}]=\\\\frac{1}{D_{S}}\\\\sum_{i}^{D_{S}}\\\\mathbf{x}[i]}\\\\end{array}$ P].$\\\\mathbf{x}_{a\\\\nu g}^{*}$ is called the average expanded xof dimension $D_{T}$  \n\nwith $D_{T}\\\\geq D_{S}$ if  \n\n$$\n\\\\mathbf{x}_{a v g}^{*}=\\\\mathcal{V}_{a v g}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}}}_{\\\\lfloor D_{T}/D s\\\\rfloor},\\\\underbrace{A v g(\\\\mathbf{x}),\\\\cdots,A v g(\\\\mathbf{x})}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.\n$$  \n\nExample B.3.2 (Vector z o expansion $\\\\mathcal{V}_{\\\\mathrm{zero.}}$ ).Le $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ .$\\\\mathbf{x}_{z e r o}^{*}$ is called the zero expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{z e r o}^{*}=\\\\mathcal{V}_{z e r o}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\mathsf{T}}},\\\\cdots,\\\\mathbf{x^{\\\\mathsf{T}}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\underbrace{0,\\\\cdots,0}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.}\\\\end{array}\n$$  \n\nExample B.3.3 (Vector circula expansion $\\\\mathcal{V}_{\\\\mathrm{circ}})$ Let $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{c i r c}^{*}$ is called the circular expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{c i r c}^{*}=\\\\mathcal{V}_{c i r c}(\\\\mathbf{x})=C o n c a t\\\\underbrace{\\\\left[\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}},\\\\mathbf{x}^{\\\\mathsf{T}}[\\\\colon D_{T}\\\\bmod D_{S}]\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}}_{[D_{T}/D_{S}]}.}\\\\end{array}\n$$  \n\nExample B.3.4 (Vector random expansion $\\\\mathcal{V}_{\\\\mathrm{rand.}}$ Let $\\\\mathbf{\\\\Deltax}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{r a n d}^{*}$ is called the random expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{r a n d}^{*}=\\\\mathcal{V}_{r a n d}(\\\\mathbf{x};\\\\zeta)=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\intercal}},\\\\cdots,\\\\mathbf{x^{\\\\intercal}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\zeta^{\\\\intercal}\\\\right]^{\\\\intercal}\\\\in\\\\mathbb{R}^{D_{T}},}\\\\end{array}\n$$  \n\nwhere $\\\\zeta\\\\in\\\\mathbb{R}^{D_{T}}$ mod $D_{S}$ is an arbitrary vector.  \n\nRemark. (1) All vector expansion examples above follow the same pattern. Specifically, when $D_{T}$ expanding from di mod s by $D_{S}$ entries differently. (2) The random vector ating $\\\\textbf{x}\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ \u230a$D_{S}$ \u230b$D_{T}$ number of times. , all vector expansion methods pad first $\\\\zeta$ in vector random expansion is arbitrary, Each method deals with the remaining $\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ enso $\\\\mathcal{V}_{a\\\\nu g}$ ,$\\\\mathcal{V}_{z e r o}$ ,$\\\\mathcal{V}_{c i r c}\\\\subset\\\\mathcal{V}_{r a n d}$ . (3) Here all three examples are expansion methods for vectors. In practice, neural networks like Transformers are dealing high dimensional tensors. These tensors can essentially be thought of as collections of vectors. In such scenarios, we can apply the expansion methods separately to the last dimension of these tensors.  \n\nIn the following claim, we show that vectors expanded by these operators are lossless.  \n\n$\\\\mathcal{V}_{c i r c}$ V, and vector random expansion m 1. Vector average expansio V$\\\\gamma_{r a n d}$ $\\\\mathcal{V}_{a\\\\nu g},$ are all lossless expansion for vectors. , vector zero expansion $\\\\mathcal{V}_{z e r o}$ , vector circular expansion Proof. The inverse function $\\\\mathcal{V}^{-1}:\\\\mathbb{R}^{D_{T}}\\\\rightarrow\\\\mathbb{R}^{D_{S}}$ of these vector expansion methods is  \n\n$$\n\\\\nu^{-1}({\\\\bf x})={\\\\bf x}[:D_{S}].\n$$  \n\nRemark. In practice, we want inverse mapping of expansion methods to be easily computed just like the example above.\n\n# B.4LOSSLESS EXPANSION FOR OPERATORS\nWe then give the definition of lossless expansion for operators. These operators apply on tensors, hence our definition of lossless operator expansion is based on lossless expansion in vector space. These operators can be different layers used in Transformer architectures, including LayerNorm, convolutional layers, and fully-connected layers, etc.  \n\nDefinit ansio der vector spaces $S^{i n},S^{o u t},\\\\mathcal{T}^{i n}$ and $\\\\mathcal{T}^{o u t}$ such that with $g(\\\\cdot):S^{i n}\\\\rightarrow S^{o u t}$ \u00b7$n(S^{i n})\\\\leq d i m(T^{i n})$ S\u2192S or space e T. We say the ope and dim $d i m\\\\big(S^{\\\\bar{o}u t}\\\\big)\\\\leq d i m\\\\big(T^{o u t}\\\\big)$ S$\\\\mathcal{V}_{i n}:S^{i\\\\bar{n}}\\\\to\\\\mathcal{T}^{i n}$ \u2264TEMo is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ VVess output vector space expansion ppose the op -lossless for $g(\\\\cdot)$ \u00b7or is denoted if there exist $\\\\mathcal{V}_{o u t}:S^{o u t}\\\\to\\\\mathcal{T}^{o u t}$ VS\u2192T such that V$\\\\mathcal{V}_{o u t}(g(\\\\mathbf{x}))=\\\\mathcal{E}[g](\\\\mathcal{V}_{i n}(\\\\mathbf{x})),\\\\forall\\\\mathbf{x}\\\\in S^{i n}$ EV\u2200\u2208S .  \n\n$(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ Remark. losslessly expanded input, the output of the to be invertible, we do not have restrictions on the operator expansion VV(1) Intuitively, a lossless operator -lossless for the origina $g(\\\\cdot)$ \u00b7tput. (2) For conciseness, we use \u2018 \u2019 interchangeably. (3) We only require the v Eexpanded oper pansion can be understood a $^{\\\\cdot}\\\\mathcal{E}[g]$ Eis a is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ EVtor expansions .V$\\\\nu_{o u t}$ ows: when using losslessly expa -lossles V$\\\\mathcal{V}_{i n}$ and \u2018 and $\\\\mathcal{E}$ V$\\\\nu_{o u t}$ $\\\\mathcal{V}_{i n}$ ed\u300d\ne2b95384-9e4b-4445-94fd-17a46fdce3ea:\u300cref_ids: 454847819065993190, chunk_ids: 1, Score: 0.3457, Text: # 3.3 A TRANSFORMATION PER BLOCK\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any $\\\\mathbf{Q}$ to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, $\\\\mathbf{Q}_{\\\\ell}$ .  \n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem 1 ,  \n\n  \nFigure 3: Converting a transformer network from LayerNorm to RMSNorm: the scale matrix diag $(\\\\alpha)$ is absorbed into the subsequent matrix $\\\\mathbf{W}_{\\\\mathrm{in}}$ . Figure shows the block in combined colors. We use $(\\\\alpha)$ for brevity. The mean-subtraction matrix $\\\\mathbf{M}$ is applied to each matrix $\\\\mathbf{W}_{\\\\mathrm{out}}$ . Layernorm becomes RMSNorm, up to a constant $\\\\bar{\\\\sqrt{D}}$ (not shown). Here, the scaling $(\\\\alpha^{\\\\prime})$ comes from the previous block.  \n\n  \nFigure 4: With the network converted to RMSNorm (see Figure 3 ), we apply the computational-invariance idea. The input weight matrices $\\\\mathrm{diag}(\\\\alpha)\\\\mathbf{W}_{\\\\mathrm{in}}$ are pre-multiplied by $\\\\mathbf{Q}^{\\\\top}$ . The output matrices $\\\\mathbf{W}_{\\\\mathrm{out}}\\\\mathbf{M}$ are post-multiplied by $\\\\mathbf{Q}$ . In the skip-connection, a new linear layer is added $\\\\mathbf{Q}_{\\\\ell}^{\\\\top}\\\\mathbf{Q}_{\\\\ell+1}$ . After these modifications, the matrices can be sliced (hatched areas).  \n\nwith the exception of line 5 of Algorithm 1 . Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation applied to different blocks with the additional linear operation in the residual connection. Unlike the $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212to the residual. Figure 4 shows how different rotations can be modifications to the weight matrices, these additional operations cannot be pre-computed and add a small $(D\\\\times D)$ overhead to the model. Nonetheless, they are needed to allow slicing the model (Section 3.4 ) and we see real speedup overall (Section 4 ).  \n\nTo compute the matrices $\\\\mathbf{Q}_{\\\\ell}$ , we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if $\\\\mathbf{X}_{\\\\ell,i}$ is the output of the $\\\\ell^{\\\\mathrm{th}}$ RMSNorm block for the $i^{\\\\mathrm{th}}$ sequence in the calibration dataset, we compute  \n\n$$\n\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\n$$  \n\nand set $\\\\mathbf{Q}_{\\\\ell}$ to the be the eigenvectors of $\\\\mathbf{C}_{\\\\ell}$ , sorted by decreasing eigenvalues.\n\n# 3.4 SLICING\nThe goal of Principal Component Analysis is usually to take a data matrix $\\\\mathbf{X}$ and compute a lower dimensional representation $\\\\mathbf{Z}$ , and an approximate reconstruction $\\\\tilde{\\\\mathbf{X}}$ :  \n\n$$\n\\\\mathbf{Z}=\\\\mathbf{X}\\\\mathbf{Q}\\\\mathbf{D}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}=\\\\mathbf{Z}\\\\mathbf{D}^{\\\\top}\\\\mathbf{Q}^{\\\\top}\\\\,.\n$$  \n\nwhere $\\\\mathbf{Q}$ is the ectors of ${\\\\bf X}^{\\\\top}{\\\\bf X}$ , and $\\\\mathbf{D}$ is a $D\\\\times D_{\\\\mathrm{small}}$ deletion matrix (containing $D_{\\\\mathrm{small}}$ The reconstruction is columns of the $D\\\\times D$ \u00d7$L_{2}$ identity matrix), which removes some of the columns of the matrix to the left. optimal, in the sense that QD is a linear mapping that minimizes $\\\\lVert\\\\mathbf{X}-\\\\tilde{\\\\mathbf{X}}\\\\rVert^{2}$ .  \n\nWhen we apply PCA to the signal matrix $\\\\mathbf{X}$ bween blocks, we never materialize the $N\\\\times D$ signal matrix, but we apply the deletion matrix Dto the operations preceding and succeeding the construction of that matrix, which have already been multiplied by $\\\\mathbf{Q}$ in the above. We delete rows of $\\\\mathbf{W}_{\\\\mathrm{in}}$ that we have inserted into the residual connection (see Figure and columns of $\\\\mathbf{W}_{\\\\mathrm{out}}$ and $\\\\mathbf{W}_{\\\\mathrm{embd}}$ . We also delete both rows 4 ). and columns of the matrix $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212\n\n# 4 EXPERIMENTAL VALIDATION\nSetup We use HuggingFace Transformers ( Wolf et al. ,2019 ) to implement our code with PyTorch (Paszke et al. ,2019 ). The computation of $\\\\mathbf{Q}$ is performed on a single H100 GPU with 80GB of memory, taking approximately 3.5 hours to complete for the L LAMA -2 70B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix. We find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix A.2 .  \n\nWe experiment with two different calibration sets: 1024 samples from the WikiText-2 training dataset ( Merity et al. ,2016 ) and 5000 samples from the Alpaca training dataset ( Taori et al. ,2023 ). Sequence lengths are chosen as the maximum of each language model. An ablation study on the calibration set size and sequence length is presented in Appendix A.3 .  \n\nModels, Tasks, and GPUs We evaluate all our experiments on OPT ( Zhang et al. ,2022 ), L LAMA -2 (Touvron et al. ,2023 ) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller L LAMA -2 models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section 4.1 ). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.  \n\nBaseline Setup We initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT ( Frantar & Alistarh ,2023 ) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup ( Mishra et al. ,2021 ).\u300d\ne2b95384-9e4b-4445-94fd-17a46fdce3ea:\u300cref_ids: 454846008144214678, chunk_ids: 3, Score: 0.3203, Text: # 3.3 BIAS NORM\nConformer (Gulati et al., 2020) utilizes LayerNorm (Ba et al., 2016) to normalize the module activations. Given $\\\\mathbf{x}$ with $D$ channels, LayerNorm is formulated as:  \n\n$$\n\\\\operatorname{LayerNorm}(\\\\mathbf{x})={\\\\frac{\\\\mathbf{x}-\\\\operatorname{E}[\\\\mathbf{x}]}{\\\\sqrt{\\\\operatorname{Var}[\\\\mathbf{x}]+\\\\epsilon}}}\\\\odot\\\\gamma+\\\\beta.\n$$  \n\nSpecifically, it first computes the mean $\\\\operatorname{E}[\\\\mathbf{x}]$ and the standard-deviation $\\\\sqrt{\\\\mathrm{Var}[\\\\mathbf{x}]}$ pfor normalizing, scaling the vector length to $\\\\sqrt{D}$ . Then it uses the learnable channel-wise scale $\\\\gamma$ and bias $\\\\beta$ for transformation, which helps to adjust the size of activations and balance the relative contributions of specific modules. However, we observe that the trained Conformer using LayerNorm suffers from two problems: 1) It sometimes sets one channel to a large constant value, e.g. 50. We argue that it aims to \u201cdefeat\u201d the LayerNorm which fully removes the vector length, functioning as a very large value so that length information could be retained after normalization. 2) Some modules (typically feed-forward or convolution) are \u201cdead\u201d as they have extremely small output values, e.g., $10^{-\\\\dot{6}}$ .We argue that early in training, the un-trained modules are not useful so they are \u201cturned off\u201d by the LayerNorm scale $\\\\gamma$ approaching zero. If the scale $\\\\gamma$ oscillates around zero, the inconsistent sign constantly reverses the gradient directions back-propagating to the modules. Because of the inconsistent gradient sign, the modules never learn anything useful, since this is a bad local optimum which is hard to escape because of the dynamics of stochastic gradient descent-like updates.  \n\nTo address above problems, we propose the BiasNorm which is intended to be a simpler replacement of LayerNorm. Specifically, BiasNorm is formulated as:  \n\n$$\nB i a s N o r m({\\\\bf x})=\\\\frac{{\\\\bf x}}{\\\\mathrm{RMS}[{\\\\bf x}-{\\\\bf b}]}\\\\cdot\\\\exp(\\\\gamma),\n$$  \n\nwhere $\\\\mathbf{b}$ is the earnable channel-wise bias, $\\\\mathrm{RMS}[\\\\mathbf{x}-\\\\mathbf{b}]$ is the root-mean-square value taken over channels, and \u03b3is a scalar. We first remove the operation of mean subtraction since it is a waste of time unless it follows a non-linearity. The bias bserves as the large constant value which allows to retain the vector length information after normalization. Since the scale $\\\\exp(\\\\gamma)$ is always positive, it avoids the gradient oscillation problem.\n\n# 3.4 SWOOSH RAND SWOOSH LACTIVATION FUNCTIONS\nConformer (Gulati et al., 2020) adopts Swish (Ramachandran et al., 2017) activation function with the following formula:  \n\n$$\n\\\\operatorname{Swish}(x)=x\\\\cdot(1+\\\\exp(-x))^{-1}.\n$$  \n\nIn this work, we propose two new activation functions respectively called SwooshR and SwooshL as replacements of Swish:  \n\n$$\n\\\\begin{array}{r l}&{{S w o o s h R}(x)={\\\\log(1+{\\\\exp(x-1)})}-0.08x-0.313261687,}\\\\\\\\ &{{S w o o s h L}(x)={\\\\log(1+{\\\\exp(x-4)})}-0.08x-0.035.}\\\\end{array}\n$$  \n\nIn SwooshR , the offset 0.313261687 is to make it pass through the origin; in SwooshL , the offset 0.035 was tuned, which slightly outperformed the value exactly making the curve pass through the origin. We present the curves of Swish, SwooshR , and SwooshL in Appendix Section A.2. SwooshL is roughly a right shifted version of SwooshR . Note that the suffix \u201cL\u201d or \u201cR\u201d represents whether the left or right zero-crossing is at or around $x=0$ . Similar to Swish, SwooshR and SwooshL have lower bounds and are non-monotonic. Compared to Swish, the most striking difference is that SwooshR and SwooshL have non-vanishing slopes for negative inputs, which helps to escape from situations where the input is always negative and prevents the denominator term in Adam-type updates from getting dangerously small. When replacing Swish with SwooshR , we observe that the modules with bypass connections, such as feed-forward and ConvNeXt, tend to learn a large negative bias in the preceding linear layer to learn \u201cnormally-off\u201d behavior. Therefore, we use SwooshL for these \u201cnormally-off\u201d modules and use SwooshR for convolution modules and the rest of Conv-Embed .\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - LayerNorm\u548cRMSNorm\u5728\u590d\u6742\u52a8\u6001\u73af\u5883\u53ca\u5927\u89c4\u6a21\u6570\u636e\u4e0b\u5982\u4f55\u5177\u4f53\u4f18\u5316\u4ee5\u4fdd\u6301\u7a33\u5b9a\u6027\uff1f\n    - \u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u9762\u5bf9\u6570\u636e\u566a\u58f0\u548c\u5f02\u5e38\u503c\uff0c\u63d0\u5347LayerNorm\u548cRMSNorm\u5bb9\u9519\u6027\u7684\u53ef\u80fd\u65b9\u5411\u6709\u54ea\u4e9b\uff1f\n    - Conformer\u4e2d\u4f7f\u7528LayerNorm\u5b58\u5728\u54ea\u4e9b\u95ee\u9898\uff0c\u5982\u4f55\u89e3\u51b3\uff1f\n - **\u7814\u7a76\u76ee\u6807**\uff1a\n    - \u5206\u6790\u6700\u65b0\u7b97\u6cd5\uff08\u5c24\u5176\u662fLayerNorm\u548cRMSNorm\uff09\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u3002\n    - \u63d0\u51fa\u9488\u5bf9LayerNorm\u548cRMSNorm\u5728\u7279\u5b9a\u73af\u5883\u4e0b\u7684\u4f18\u5316\u7b56\u7565\u53ca\u63d0\u5347\u5bb9\u9519\u6027\u7684\u65b9\u5411\u3002\n    - \u89e3\u51b3Conformer\u4e2dLayerNorm\u5b58\u5728\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u6709\u6548\u7684\u66ff\u4ee3\u65b9\u6848\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **LayerNorm\u548cRMSNorm\u7684\u5b9a\u4e49**\uff1a\u660e\u786e\u7ed9\u51fa\u4e86LayerNorm\u548cRMSNorm\u7684\u6570\u5b66\u5b9a\u4e49\u516c\u5f0f\uff0c\u4e3a\u540e\u7eed\u7814\u7a76\u63d0\u4f9b\u57fa\u7840\u3002\n - **\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55**\uff1a\n    - \u7ed9\u51fa\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\u7684\u5b9a\u4e49\uff0c\u4ee5\u53ca\u5411\u91cf\u5e73\u5747\u6269\u5c55\u3001\u5411\u91cf\u96f6\u6269\u5c55\u3001\u5411\u91cf\u5faa\u73af\u6269\u5c55\u548c\u5411\u91cf\u968f\u673a\u6269\u5c55\u7b49\u591a\u79cd\u6269\u5c55\u65b9\u6cd5\uff0c\u5e76\u8bc1\u660e\u8fd9\u4e9b\u6269\u5c55\u65b9\u6cd5\u662f\u65e0\u635f\u7684\uff0c\u5176\u9006\u51fd\u6570\u4e3a\\(\\\\nu^{-1}({\\\\bf x})={\\\\bf x}[:D_{S}]\\)\u3002\n    - \u57fa\u4e8e\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\uff0c\u5b9a\u4e49\u4e86\u7b97\u5b50\u7684\u65e0\u635f\u6269\u5c55\uff0c\u8fd9\u4e9b\u7b97\u5b50\u53ef\u5e94\u7528\u4e8eTransformer\u67b6\u6784\u4e2d\u7684\u4e0d\u540c\u5c42\u3002\n - **\u6a21\u578b\u8f6c\u6362\u4e0e\u77e9\u9635\u8ba1\u7b97**\uff1a\n    - \u5c06transformer\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\u540e\uff0c\u9488\u5bf9\u6a21\u578b\u4fee\u6539\uff0c\u9009\u62e9\u4e0d\u540c\u7684\u6b63\u4ea4\u77e9\u9635\\(\\\\mathbf{Q}_{\\\\ell}\\) \u3002\n    - \u4f7f\u7528PCA\u8ba1\u7b97\\(\\\\mathbf{Q}_{\\\\ell}\\) \uff0c\u901a\u8fc7\u5728\u6821\u51c6\u6570\u636e\u96c6\u4e0a\u8fd0\u884c\u6a21\u578b\uff0c\u63d0\u53d6\u5c42\u7684\u6b63\u4ea4\u77e9\u9635\u3002\u5177\u4f53\u8ba1\u7b97\u4e3a\\(\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\\) \uff0c\u5e76\u5c06\\(\\\\mathbf{Q}_{\\\\ell}\\) \u8bbe\u7f6e\u4e3a\\(\\\\mathbf{C}_{\\\\ell}\\) \u7684\u6309\u7279\u5f81\u503c\u964d\u5e8f\u6392\u5217\u7684\u7279\u5f81\u5411\u91cf\u3002\n - **\u65b0\u7b97\u6cd5\u63d0\u51fa**\uff1a\n    - \u63d0\u51faBiasNorm\u4f5c\u4e3aLayerNorm\u7684\u7b80\u5355\u66ff\u4ee3\u65b9\u6848\uff0c\u516c\u5f0f\u4e3a\\(BiasNorm({\\\\bf x})=\\\\frac{{\\\\bf x}}{\\\\mathrm{RMS}[{\\\\bf x}-{\\\\bf b}]}\\\\cdot\\\\exp(\\\\gamma)\\) \uff0c\u5176\u4e2d\\(\\\\mathbf{b}\\) \u4e3a\u53ef\u5b66\u4e60\u7684\u901a\u9053\u504f\u7f6e\uff0c\\(\\\\mathrm{RMS}[\\\\mathbf{x}-\\\\mathbf{b}]\\) \u4e3a\u901a\u9053\u4e0a\u7684\u5747\u65b9\u6839\u503c\uff0c\\(\\\\gamma\\) \u4e3a\u6807\u91cf\u3002\n    - \u63d0\u51fa\u65b0\u7684\u6fc0\u6d3b\u51fd\u6570SwooshR\u548cSwooshL \uff0c\u516c\u5f0f\u5206\u522b\u4e3a\\({SwooshR}(x)={\\\\log(1+{\\\\exp(x - 1)})}-0.08x - 0.313261687\\) \u548c\\({SwooshL}(x)={\\\\log(1+{\\\\exp(x - 4)})}-0.08x - 0.035\\) \uff0c\u5e76\u9488\u5bf9\u4e0d\u540c\u6a21\u5757\u7ed9\u51fa\u5e94\u7528\u9009\u62e9\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u7f6e**\uff1a\n    - \u4f7f\u7528HuggingFace Transformers\u548cPyTorch\u5b9e\u73b0\u4ee3\u7801\uff0c\u5728\u4e0d\u540cGPU\uff08\u5982H100\u3001Quadro RTX6000\u3001A100\u7b49\uff09\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002\n    - \u91c7\u7528\u4e0d\u540c\u7684\u6821\u51c6\u96c6\uff0c\u5982\u4eceWikiText - 2\u8bad\u7ec3\u6570\u636e\u96c6\u9009\u53d61024\u4e2a\u6837\u672c\u548c\u4eceAlpaca\u8bad\u7ec3\u6570\u636e\u96c6\u9009\u53d65000\u4e2a\u6837\u672c\uff0c\u5e8f\u5217\u957f\u5ea6\u9009\u62e9\u5404\u8bed\u8a00\u6a21\u578b\u7684\u6700\u5927\u503c\u3002\n    - \u8bc4\u4f30\u6a21\u578b\u5305\u62ecOPT\u3001LLAMA - 2\u6a21\u578b\u7cfb\u5217\uff0c\u4ee5\u53ca\u5728\u96f6\u6837\u672c\u4efb\u52a1\u4e2d\u8bc4\u4f30Phi - 2 \uff0c\u6392\u9664OPT 175B\u3002\n    - \u5b9e\u9a8c\u4efb\u52a1\u5305\u62ec\u8bed\u8a00\u751f\u6210\u548c\u6d41\u884c\u7684\u96f6\u6837\u672c\u4efb\u52a1\u3002\n - **\u5bf9\u6bd4\u65b9\u6848**\uff1a\u653e\u5f03\u6700\u521d\u8ba1\u5212\u7684\u4e0e\u4fee\u526a\u6700\u5c0f\u8303\u6570\u5217\uff08\u6216\u884c\uff09\u7684\u65b9\u6848\u5bf9\u6bd4\uff0c\u800c\u662f\u5c06SliceGPT\u4e0eSparseGPT\u91c7\u75282:4\u7a00\u758f\u6bd4\u8fdb\u884c\u5bf9\u6bd4\u3002\n - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\u6587\u6863\u4e2d\u867d\u672a\u8be6\u7ec6\u63d0\u53ca\u5177\u4f53\u5b9e\u9a8c\u7ed3\u679c\u6570\u636e\uff0c\u4f46\u8868\u660e\u4f7f\u7528\u53cc\u7cbe\u5ea6\u8ba1\u7b97\u534f\u65b9\u5dee\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5355\u7cbe\u5ea6\u8ba1\u7b97\u4f1a\u5bfc\u81f4\u6700\u7ec8\u7cbe\u5ea6\u5dee\u5f02\uff1b\u8fd8\u63d0\u5230SliceGPT\u5b9e\u73b0\u4e86\u6574\u4f53\u901f\u5ea6\u63d0\u5347\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u6587\u4e2d\u672a\u660e\u786e\u63d0\u53ca\u5f53\u524d\u7814\u7a76\u5728\u7b97\u6cd5\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u5206\u6790\u65b9\u9762\u7684\u5c40\u9650\u6027\u3002\n    - \u5728\u5b9e\u9a8c\u5bf9\u6bd4\u4e2d\uff0c\u653e\u5f03\u4e86\u6700\u521d\u7684\u5bf9\u6bd4\u65b9\u6848\uff0c\u8bf4\u660e\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u672a\u89e3\u51b3\u7684\u95ee\u9898\u5bfc\u81f4\u539f\u65b9\u6848\u4e0d\u9002\u7528\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u6587\u4e2d\u672a\u660e\u786e\u63d0\u51fa\u672a\u6765\u7814\u7a76\u65b9\u5411\uff0c\u4f46\u53ef\u63a8\u6d4b\u8fdb\u4e00\u6b65\u4f18\u5316\u7b97\u6cd5\u5728\u590d\u6742\u52a8\u6001\u73af\u5883\u53ca\u6781\u7aef\u60c5\u51b5\u4e0b\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u662f\u6f5c\u5728\u65b9\u5411\u3002\n    - \u5bf9\u4e8e\u65b0\u63d0\u51fa\u7684BiasNorm\u548c\u6fc0\u6d3b\u51fd\u6570SwooshR\u3001SwooshL \uff0c\u53ef\u8fdb\u4e00\u6b65\u7814\u7a76\u5176\u5728\u66f4\u591a\u6a21\u578b\u548c\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u8868\u73b0\u53ca\u4f18\u5316\u65b9\u5411\u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u7b97\u6cd5\u76f8\u5173\u7684\u7814\u7a76\u5c55\u5f00\uff0c\u6d89\u53ca\u7b97\u6cd5\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u5206\u6790\u3001\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\u3001\u7b97\u5b50\u65e0\u635f\u6269\u5c55\u3001\u6a21\u578b\u8f6c\u6362\u4e0e\u5207\u7247\u3001\u5b9e\u9a8c\u9a8c\u8bc1\u4ee5\u53ca\u65b0\u65b9\u6cd5\u548c\u51fd\u6570\u7684\u63d0\u51fa\uff0c\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u4e2d\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7814\u7a76\u76f8\u5173\uff0c\u5177\u4f53\u603b\u7ed3\u5982\u4e0b\uff1a\n1. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\n    - **\u5206\u6790\u7b97\u6cd5\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027**\uff1a\u63a2\u8ba8\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\uff0c\u4ee5LayerNorm\u548cRMSNorm\u4e3a\u4f8b\uff0c\u7814\u7a76\u5b83\u4eec\u5728\u590d\u6742\u52a8\u6001\u73af\u5883\u53ca\u5927\u89c4\u6a21\u6570\u636e\u4e0b\u7684\u4f18\u5316\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u63d0\u5347\u5bb9\u9519\u6027\u7684\u65b9\u5411\u3002\n    - **\u6a21\u578b\u8f6c\u6362\u4e0e\u5207\u7247**\uff1a\u5c06transformer\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\u540e\uff0c\u901a\u8fc7PCA\u8ba1\u7b97\u4e0d\u540c\u5757\u7684\u6b63\u4ea4\u77e9\u9635\\(\\\\mathbf{Q}_{\\\\ell}\\)\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u4fee\u6539\uff0c\u5305\u62ec\u5bf9\u8f93\u5165\u8f93\u51fa\u77e9\u9635\u7684\u64cd\u4f5c\u4ee5\u53ca\u5728\u6b8b\u5dee\u8fde\u63a5\u4e2d\u6dfb\u52a0\u7ebf\u6027\u5c42\uff0c\u6700\u7ec8\u5b9e\u73b0\u6a21\u578b\u5207\u7247\u4ee5\u63d0\u9ad8\u901f\u5ea6\u3002\n2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\n    - **\u63d0\u51fa\u65b0\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\u548c\u6fc0\u6d3b\u51fd\u6570**\uff1a\u9488\u5bf9Conformer\u4e2dLayerNorm\u5b58\u5728\u7684\u95ee\u9898\uff0c\u63d0\u51faBiasNorm\u4f5c\u4e3a\u66ff\u4ee3\uff1b\u8fd8\u63d0\u51faSwooshR\u548cSwooshL\u4e24\u4e2a\u65b0\u6fc0\u6d3b\u51fd\u6570\uff0c\u4ee5\u89e3\u51b3Swish\u51fd\u6570\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7684\u4e0d\u8db3\u3002\n3. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\uff08\u5bf9\u8bdd\u4e2d\u6b64\u90e8\u5206\u4f53\u73b0\u76f8\u5bf9\u8f83\u5c11\uff09**\uff1a\u5bf9\u8bdd\u4e2d\u672a\u660e\u663e\u4f53\u73b0\u6b64\u6b65\u9aa4\u76f8\u5173\u5185\u5bb9\uff0c\u4f46\u5728\u5b9e\u9645\u7814\u7a76\u4e2d\uff0c\u7b97\u6cd5\u5e94\u7528\u4e8e\u7f51\u7edc\u4e0e\u901a\u4fe1\u573a\u666f\u65f6\uff0c\u8bed\u4e49\u4fe1\u606f\u7814\u7a76\u53ef\u80fd\u4e0e\u7b97\u6cd5\u7a33\u5b9a\u6027\u3001\u6a21\u578b\u8f6c\u6362\u7b49\u5b58\u5728\u5173\u8054\u3002\n4. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb\uff08\u5bf9\u8bdd\u4e2d\u6b64\u90e8\u5206\u4f53\u73b0\u76f8\u5bf9\u8f83\u5c11\uff09**\uff1a\u5bf9\u8bdd\u4e2d\u672a\u76f4\u63a5\u6d89\u53ca\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u8f6c\u5316\u5173\u7cfb\u7684\u5185\u5bb9\uff0c\u4f46\u7b97\u6cd5\u4f18\u5316\u548c\u6a21\u578b\u6539\u8fdb\u6700\u7ec8\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u5e94\u7528\u4e8e\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\uff0c\u53ef\u63a8\u6d4b\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f1a\u6d89\u53ca\u53cd\u9988\u673a\u5236\u6765\u8fdb\u4e00\u6b65\u4f18\u5316\u6a21\u578b\u548c\u7b97\u6cd5 \u3002  ", "dreams_personality_context": "\u4ece\u4e0a\u8ff0\u7814\u7a76\u5185\u5bb9\u53ef\u4ee5\u63a8\u6d4b\u51fa\u7247\u6bb5\u4e2d\u4eba\u7269\u53ef\u80fd\u5177\u6709\u4ee5\u4e0b\u6027\u683c\u7279\u70b9\uff1a\n1. **\u597d\u5947\u5fc3\u5f3a**\uff1a\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u591a\u4e2a\u9886\u57df\u7684\u524d\u6cbf\u95ee\u9898\u5145\u6ee1\u597d\u5947\uff0c\u5982\u8ba1\u7b97\u673a\u7f51\u7edc\u8bed\u4e49\u4fe1\u606f\u3001\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u3001\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u53cd\u9988\u673a\u5236\u7b49\uff0c\u79ef\u6781\u63a2\u7d22\u8fd9\u4e9b\u590d\u6742\u4e14\u5177\u6709\u6311\u6218\u6027\u7684\u7814\u7a76\u65b9\u5411\uff0c\u4e0d\u5c40\u9650\u4e8e\u5355\u4e00\u9886\u57df\u3002\n2. **\u52c7\u4e8e\u521b\u65b0**\uff1a\u6562\u4e8e\u63d0\u51fa\u65b0\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\uff08BiasNorm\uff09\u548c\u6fc0\u6d3b\u51fd\u6570\uff08SwooshR\u548cSwooshL\uff09\uff0c\u5c1d\u8bd5\u7a81\u7834\u73b0\u6709\u7b97\u6cd5\u548c\u6a21\u578b\u7684\u5c40\u9650\uff0c\u5c55\u73b0\u51fa\u4e0d\u6ee1\u8db3\u4e8e\u73b0\u72b6\uff0c\u79ef\u6781\u5bfb\u6c42\u521b\u65b0\u89e3\u51b3\u65b9\u6848\u7684\u7279\u8d28\u3002\n3. **\u4e25\u8c28\u7ec6\u81f4**\uff1a\u5728\u7814\u7a76\u7b97\u6cd5\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u65f6\uff0c\u4ee5\u5177\u4f53\u7b97\u6cd5\uff08LayerNorm\u548cRMSNorm\uff09\u4e3a\u4f8b\uff0c\u6df1\u5165\u63a2\u8ba8\u5176\u5728\u4e0d\u540c\u73af\u5883\u4e0b\u7684\u8868\u73b0\u53ca\u4f18\u5316\u65b9\u5f0f\uff1b\u5728\u6a21\u578b\u8f6c\u6362\u4e0e\u5207\u7247\u8fc7\u7a0b\u4e2d\uff0c\u8be6\u7ec6\u63cf\u8ff0\u6bcf\u4e00\u6b65\u7684\u64cd\u4f5c\uff0c\u5305\u62ec\u77e9\u9635\u8ba1\u7b97\u3001\u6a21\u578b\u4fee\u6539\u7b49\uff0c\u4f53\u73b0\u51fa\u5bf9\u5f85\u7814\u7a76\u4e25\u8c28\u7ec6\u81f4\u7684\u6001\u5ea6\u3002\n4. **\u5177\u6709\u63a2\u7d22\u7cbe\u795e**\uff1a\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u4e0d\u4ec5\u5173\u6ce8\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u8fd8\u6df1\u5165\u63a2\u7d22\u5176\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\uff0c\u4e0d\u6ee1\u8db3\u4e8e\u8868\u9762\u7684\u7406\u89e3\uff0c\u800c\u662f\u6df1\u5165\u6316\u6398\u6f5c\u5728\u7684\u53ef\u80fd\u6027\uff0c\u5c55\u73b0\u51fa\u5f3a\u70c8\u7684\u63a2\u7d22\u7cbe\u795e\u3002\n5. **\u52a1\u5b9e**\uff1a\u867d\u7136\u5bf9\u8bdd\u4e2d\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u8f6c\u5316\u5173\u7cfb\u4f53\u73b0\u8f83\u5c11\uff0c\u4f46\u4ece\u6574\u4f53\u7814\u7a76\u65b9\u5411\u6765\u770b\uff0c\u6700\u7ec8\u76ee\u7684\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u5e94\u7528\u4e8e\u5b9e\u9645\uff0c\u8bf4\u660e\u4eba\u7269\u5177\u6709\u52a1\u5b9e\u7684\u6027\u683c\uff0c\u6ce8\u91cd\u7814\u7a76\u6210\u679c\u7684\u5b9e\u7528\u6027\u548c\u53ef\u8f6c\u5316\u6027\u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["a1dc818c-b18a-47c9-94e6-97aeb42bdeb5"], "metadata": {}}}, "analysis_store/metadata": {"a1dc818c-b18a-47c9-94e6-97aeb42bdeb5": {"analysis_hash": "", "ref_analysis_id": ""}}}