{"analysis_store/data": {"a2ff0b67-b767-4bb1-a003-90e9a758187b": {"__data__": {"id_": "a2ff0b67-b767-4bb1-a003-90e9a758187b", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3001\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3001\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4 \u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\uff08\u5305\u62ec\u60c5\u611f\u56e0\u7d20\u3001\u4ea4\u53c9\u70b9\u7b49\uff09\u4ee5\u53ca\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u4e4b\u95f4\u7684\u7d27\u5bc6\u8054\u7cfb \u3002  ", "scene_monologue_context": "\u4eca\u5929\u6211\u4e00\u5934\u624e\u8fdb\u4e86\u5927\u6a21\u578b\u76f8\u5173\u7814\u7a76\u9886\u57df\u7684\u77e5\u8bc6\u6d77\u6d0b\u91cc\u3002\u4e3b\u8981\u56f4\u7ed5\u7740LayerNorm\u548cRMSNorm\u5c55\u5f00\u63a2\u7d22\uff0c\u60f3\u5f04\u6e05\u695a\u5b83\u4eec\u5728\u5927\u6a21\u578b\u6280\u672f\u6846\u67b6\u91cc\u5230\u5e95\u5904\u4e8e\u4ec0\u4e48\u6837\u7684\u5730\u4f4d\uff0c\u53c8\u53d1\u6325\u7740\u600e\u6837\u7684\u4f5c\u7528\u3002  \n\n\u6211\u5148\u662f\u4ed4\u7ec6\u7814\u7a76\u4e86\u5b83\u4eec\u7684\u6b63\u5f0f\u5b9a\u4e49\uff0c\u8fd9\u4e3a\u540e\u7eed\u6df1\u5165\u7406\u89e3\u6253\u4e0b\u57fa\u7840\u3002\u63a5\u7740\u53c8\u63a5\u89e6\u5230\u5411\u91cf\u7a7a\u95f4\u4e2d\u65e0\u635f\u6269\u5c55\u7684\u5185\u5bb9\uff0c\u4e86\u89e3\u5230\u50cf\u5411\u91cf\u5e73\u5747\u6269\u5c55\u3001\u5411\u91cf\u96f6\u6269\u5c55\u3001\u5411\u91cf\u5faa\u73af\u6269\u5c55\u4ee5\u53ca\u5411\u91cf\u968f\u673a\u6269\u5c55\u8fd9\u4e9b\u4e0d\u540c\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u8fd8\u77e5\u9053\u4e86\u8fd9\u4e9b\u6269\u5c55\u5bf9\u5411\u91cf\u6765\u8bf4\u662f\u65e0\u635f\u7684\uff0c\u8fd9\u80cc\u540e\u7684\u539f\u7406\u53ef\u771f\u591f\u590d\u6742\u7684\u3002  \n\n\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u8fd8\u6d89\u53ca\u5230\u7b97\u5b50\u7684\u65e0\u635f\u6269\u5c55\u5b9a\u4e49\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u548c\u524d\u9762\u7684\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\u7d27\u5bc6\u76f8\u8fde\uff0c\u6bd5\u7adf\u8fd9\u4e9b\u7b97\u5b50\u4f1a\u5e94\u7528\u5728\u5f20\u91cf\u4e0a\u561b\u3002  \n\n\u53e6\u5916\uff0c\u6211\u770b\u5230\u4e86\u5173\u4e8eTransformer\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247\u7684\u76f8\u5173\u5185\u5bb9\u3002\u5148\u662f\u628aTransformer\u91cc\u7684\u6bcf\u4e2aLayerNorm\u90fd\u8f6c\u6362\u6210RMSNorm\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\u5bf9\u6a21\u578b\u8fdb\u884c\u5404\u79cd\u64cd\u4f5c\uff0c\u6bd4\u5982\u9009\u62e9\u4e0d\u540c\u7684\u6b63\u4ea4\u77e9\u9635\u53bb\u4fee\u6539\u6a21\u578b\uff0c\u5229\u7528PCA\u8ba1\u7b97\u8fd9\u4e9b\u6b63\u4ea4\u77e9\u9635\uff0c\u6700\u540e\u901a\u8fc7\u5207\u7247\u6280\u672f\u5bf9\u6a21\u578b\u8fdb\u884c\u5904\u7406\uff0c\u8fd9\u91cc\u9762\u7684\u6bcf\u4e00\u6b65\u90fd\u9700\u8981\u4e25\u8c28\u5bf9\u5f85\uff0c\u4e00\u4e2a\u5c0f\u758f\u5ffd\u53ef\u80fd\u5c31\u7406\u89e3\u9519\u4e86\u3002  \n\n\u8fd8\u6709\u5b9e\u9a8c\u9a8c\u8bc1\u90e8\u5206\uff0c\u7528\u4e0d\u540c\u7684\u6570\u636e\u96c6\u3001\u6a21\u578b\u548cGPU\u8fdb\u884c\u5b9e\u9a8c\uff0c\u5bf9\u6bd4\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u7684\u7ed3\u679c\uff0c\u50cfPreNorm\u548cPostNorm\u5728\u4e0d\u540c\u8bed\u8a00\u6807\u7b7e\u3001\u662f\u5426\u6709\u6b8b\u5dee\u8fde\u63a5\u7b49\u8bbe\u7f6e\u4e0b\u7684\u8868\u73b0\uff0c\u5206\u6790\u5b83\u4eec\u7684BLEU\u5206\u6570\u548c\u8131\u9776\u7387\uff0c\u4ece\u8fd9\u4e9b\u6570\u636e\u4e2d\u6316\u6398\u51fa\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff0c\u771f\u7684\u5f88\u6709\u6311\u6218\u6027\uff0c\u4f46\u4e5f\u7279\u522b\u6709\u610f\u601d\u3002\u4eca\u5929\u8fd9\u4e00\u5929\uff0c\u6536\u83b7\u6ee1\u6ee1\uff0c\u4e0d\u8fc7\u4e5f\u6df1\u77e5\u8fd8\u6709\u5f88\u591a\u7ec6\u8282\u9700\u8981\u53cd\u590d\u7422\u78e8\u624d\u80fd\u5403\u900f\u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "d753c815-d196-4a48-b95c-c565926fb392:\u300c\u5206\u6790\u8fd1\u51e0\u5e74\u7814\u7a76\u9886\u57df\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u300d\nd753c815-d196-4a48-b95c-c565926fb392:\u300c\u8fd1\u51e0\u5e74\u5728\u5927\u6a21\u578b\u76f8\u5173\u7814\u7a76\u9886\u57df\uff0c\u7814\u7a76\u8005\u4ece\u7406\u8bba\u5206\u6790\u548c\u5b9e\u9a8c\u5bf9\u6bd4\u7b49\u591a\u65b9\u9762\u5bf9LayerNorm\u548cRMSNorm\u8fdb\u884c\u5256\u6790\u540e\uff0c\u5b83\u4eec\u5728\u5927\u6a21\u578b\u6280\u672f\u6846\u67b6\u4e2d\u5206\u522b\u5904\u4e8e\u4ec0\u4e48\u6837\u7684\u5730\u4f4d\u3001\u53d1\u6325\u7740\u600e\u6837\u7684\u4f5c\u7528\uff1f \u300d\nd753c815-d196-4a48-b95c-c565926fb392:\u300cref_ids: 454845924254196540, chunk_ids: 7, Score: 0.4805, Text: # B.2 MODEL LAYERS\nIn this section, we give the formal definition of LayerNorm $\\\\operatorname{LN}(\\\\cdot)$ and RMS Norm ${\\\\mathrm{RMS}}\\\\left(\\\\cdot\\\\right)$ .  \n\nDefinition 1 (LayerNorm) .LayerNorm $L N(\\\\cdot;\\\\mu,\\\\beta,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nL N(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\beta,\\\\epsilon)=\\\\frac{\\\\mathbf{x}-\\\\mathbb{E}[\\\\mathbf{x}]}{\\\\sqrt{\\\\mathrm{Var}[\\\\mathbf{x}]+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu}+\\\\beta,\n$$  \n\nwhere $\\\\mathbf{x},\\\\pmb{\\\\mu},\\\\beta\\\\in\\\\mathbb{R}^{D}$ .  \n\nDefinition 2 (RMSNorm) .RMS Norm $R M S(\\\\cdot;\\\\mu,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nR M S(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\epsilon)=\\\\frac{\\\\mathbf{x}}{\\\\sqrt{\\\\frac{1}{D}\\\\sum_{i=1}^{D}(\\\\mathbf{x}[i])^{2}+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu},\n$$  \n\nwhere x,$\\\\pmb{\\\\mu}\\\\in\\\\mathbb{R}^{D}$ .  \n\nRemark. In neural networks, inputs of normalization layers are usually high dimension tensors. In this case, LayerNorm and RMSNorm normally apply to the last dimension separately.\n\n# B.3 LOSSLESS EXPANSION IN VECTOR SPACE\nIn this section, we first give the general definition of lossless expansion in vector space.  \n\ndimensions satisfy dim it is invertible. Definition 3 (Lossless $(\\\\bar{\\\\mathcal{T}})\\\\geq d i m(S)$ T\u2265S, a vector space expansion ector space) .Given $\\\\boldsymbol{S}$ and V$\\\\tau$ $\\\\mathcal{V}:\\\\mathcal{S}\\\\rightarrow\\\\mathcal{T}$ S \u2192T is said to be lossless if ector spaces where the  \n\nRemark. Note that the identity function Id is lossless with its inverse being itself.  \n\nThen we give a few examples of lossless vector space expansions. These examples will also be used in LEMON.  \n\nExample B.3.1 (Vector average expansion $\\\\mathcal{V}_{\\\\mathrm{avg.}}$ ).Let $\\\\mathbf{\\\\widetilde{x}}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ and its average $\\\\begin{array}{r}{\\\\lambda_{V}g(\\\\mathbf{x})=\\\\mathbb{E}[\\\\mathbf{x}]=\\\\frac{1}{D_{S}}\\\\sum_{i}^{D_{S}}\\\\mathbf{x}[i]}\\\\end{array}$ P].$\\\\mathbf{x}_{a\\\\nu g}^{*}$ is called the average expanded xof dimension $D_{T}$  \n\nwith $D_{T}\\\\geq D_{S}$ if  \n\n$$\n\\\\mathbf{x}_{a v g}^{*}=\\\\mathcal{V}_{a v g}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}}}_{\\\\lfloor D_{T}/D s\\\\rfloor},\\\\underbrace{A v g(\\\\mathbf{x}),\\\\cdots,A v g(\\\\mathbf{x})}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.\n$$  \n\nExample B.3.2 (Vector z o expansion $\\\\mathcal{V}_{\\\\mathrm{zero.}}$ ).Le $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ .$\\\\mathbf{x}_{z e r o}^{*}$ is called the zero expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{z e r o}^{*}=\\\\mathcal{V}_{z e r o}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\mathsf{T}}},\\\\cdots,\\\\mathbf{x^{\\\\mathsf{T}}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\underbrace{0,\\\\cdots,0}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.}\\\\end{array}\n$$  \n\nExample B.3.3 (Vector circula expansion $\\\\mathcal{V}_{\\\\mathrm{circ}})$ Let $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{c i r c}^{*}$ is called the circular expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{c i r c}^{*}=\\\\mathcal{V}_{c i r c}(\\\\mathbf{x})=C o n c a t\\\\underbrace{\\\\left[\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}},\\\\mathbf{x}^{\\\\mathsf{T}}[\\\\colon D_{T}\\\\bmod D_{S}]\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}}_{[D_{T}/D_{S}]}.}\\\\end{array}\n$$  \n\nExample B.3.4 (Vector random expansion $\\\\mathcal{V}_{\\\\mathrm{rand.}}$ Let $\\\\mathbf{\\\\Deltax}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{r a n d}^{*}$ is called the random expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{r a n d}^{*}=\\\\mathcal{V}_{r a n d}(\\\\mathbf{x};\\\\zeta)=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\intercal}},\\\\cdots,\\\\mathbf{x^{\\\\intercal}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\zeta^{\\\\intercal}\\\\right]^{\\\\intercal}\\\\in\\\\mathbb{R}^{D_{T}},}\\\\end{array}\n$$  \n\nwhere $\\\\zeta\\\\in\\\\mathbb{R}^{D_{T}}$ mod $D_{S}$ is an arbitrary vector.  \n\nRemark. (1) All vector expansion examples above follow the same pattern. Specifically, when $D_{T}$ expanding from di mod s by $D_{S}$ entries differently. (2) The random vector ating $\\\\textbf{x}\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ \u230a$D_{S}$ \u230b$D_{T}$ number of times. , all vector expansion methods pad first $\\\\zeta$ in vector random expansion is arbitrary, Each method deals with the remaining $\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ enso $\\\\mathcal{V}_{a\\\\nu g}$ ,$\\\\mathcal{V}_{z e r o}$ ,$\\\\mathcal{V}_{c i r c}\\\\subset\\\\mathcal{V}_{r a n d}$ . (3) Here all three examples are expansion methods for vectors. In practice, neural networks like Transformers are dealing high dimensional tensors. These tensors can essentially be thought of as collections of vectors. In such scenarios, we can apply the expansion methods separately to the last dimension of these tensors.  \n\nIn the following claim, we show that vectors expanded by these operators are lossless.  \n\n$\\\\mathcal{V}_{c i r c}$ V, and vector random expansion m 1. Vector average expansio V$\\\\gamma_{r a n d}$ $\\\\mathcal{V}_{a\\\\nu g},$ are all lossless expansion for vectors. , vector zero expansion $\\\\mathcal{V}_{z e r o}$ , vector circular expansion Proof. The inverse function $\\\\mathcal{V}^{-1}:\\\\mathbb{R}^{D_{T}}\\\\rightarrow\\\\mathbb{R}^{D_{S}}$ of these vector expansion methods is  \n\n$$\n\\\\nu^{-1}({\\\\bf x})={\\\\bf x}[:D_{S}].\n$$  \n\nRemark. In practice, we want inverse mapping of expansion methods to be easily computed just like the example above.\n\n# B.4LOSSLESS EXPANSION FOR OPERATORS\nWe then give the definition of lossless expansion for operators. These operators apply on tensors, hence our definition of lossless operator expansion is based on lossless expansion in vector space. These operators can be different layers used in Transformer architectures, including LayerNorm, convolutional layers, and fully-connected layers, etc.  \n\nDefinit ansio der vector spaces $S^{i n},S^{o u t},\\\\mathcal{T}^{i n}$ and $\\\\mathcal{T}^{o u t}$ such that with $g(\\\\cdot):S^{i n}\\\\rightarrow S^{o u t}$ \u00b7$n(S^{i n})\\\\leq d i m(T^{i n})$ S\u2192S or space e T. We say the ope and dim $d i m\\\\big(S^{\\\\bar{o}u t}\\\\big)\\\\leq d i m\\\\big(T^{o u t}\\\\big)$ S$\\\\mathcal{V}_{i n}:S^{i\\\\bar{n}}\\\\to\\\\mathcal{T}^{i n}$ \u2264TEMo is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ VVess output vector space expansion ppose the op -lossless for $g(\\\\cdot)$ \u00b7or is denoted if there exist $\\\\mathcal{V}_{o u t}:S^{o u t}\\\\to\\\\mathcal{T}^{o u t}$ VS\u2192T such that V$\\\\mathcal{V}_{o u t}(g(\\\\mathbf{x}))=\\\\mathcal{E}[g](\\\\mathcal{V}_{i n}(\\\\mathbf{x})),\\\\forall\\\\mathbf{x}\\\\in S^{i n}$ EV\u2200\u2208S .  \n\n$(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ Remark. losslessly expanded input, the output of the to be invertible, we do not have restrictions on the operator expansion VV(1) Intuitively, a lossless operator -lossless for the origina $g(\\\\cdot)$ \u00b7tput. (2) For conciseness, we use \u2018 \u2019 interchangeably. (3) We only require the v Eexpanded oper pansion can be understood a $^{\\\\cdot}\\\\mathcal{E}[g]$ Eis a is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ EVtor expansions .V$\\\\nu_{o u t}$ ows: when using losslessly expa -lossles V$\\\\mathcal{V}_{i n}$ and \u2018 and $\\\\mathcal{E}$ V$\\\\nu_{o u t}$ $\\\\mathcal{V}_{i n}$ ed\u300d\nd753c815-d196-4a48-b95c-c565926fb392:\u300cref_ids: 454847819065993190, chunk_ids: 1, Score: 0.4258, Text: # 3.3 A TRANSFORMATION PER BLOCK\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any $\\\\mathbf{Q}$ to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, $\\\\mathbf{Q}_{\\\\ell}$ .  \n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem 1 ,  \n\n  \nFigure 3: Converting a transformer network from LayerNorm to RMSNorm: the scale matrix diag $(\\\\alpha)$ is absorbed into the subsequent matrix $\\\\mathbf{W}_{\\\\mathrm{in}}$ . Figure shows the block in combined colors. We use $(\\\\alpha)$ for brevity. The mean-subtraction matrix $\\\\mathbf{M}$ is applied to each matrix $\\\\mathbf{W}_{\\\\mathrm{out}}$ . Layernorm becomes RMSNorm, up to a constant $\\\\bar{\\\\sqrt{D}}$ (not shown). Here, the scaling $(\\\\alpha^{\\\\prime})$ comes from the previous block.  \n\n  \nFigure 4: With the network converted to RMSNorm (see Figure 3 ), we apply the computational-invariance idea. The input weight matrices $\\\\mathrm{diag}(\\\\alpha)\\\\mathbf{W}_{\\\\mathrm{in}}$ are pre-multiplied by $\\\\mathbf{Q}^{\\\\top}$ . The output matrices $\\\\mathbf{W}_{\\\\mathrm{out}}\\\\mathbf{M}$ are post-multiplied by $\\\\mathbf{Q}$ . In the skip-connection, a new linear layer is added $\\\\mathbf{Q}_{\\\\ell}^{\\\\top}\\\\mathbf{Q}_{\\\\ell+1}$ . After these modifications, the matrices can be sliced (hatched areas).  \n\nwith the exception of line 5 of Algorithm 1 . Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation applied to different blocks with the additional linear operation in the residual connection. Unlike the $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212to the residual. Figure 4 shows how different rotations can be modifications to the weight matrices, these additional operations cannot be pre-computed and add a small $(D\\\\times D)$ overhead to the model. Nonetheless, they are needed to allow slicing the model (Section 3.4 ) and we see real speedup overall (Section 4 ).  \n\nTo compute the matrices $\\\\mathbf{Q}_{\\\\ell}$ , we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if $\\\\mathbf{X}_{\\\\ell,i}$ is the output of the $\\\\ell^{\\\\mathrm{th}}$ RMSNorm block for the $i^{\\\\mathrm{th}}$ sequence in the calibration dataset, we compute  \n\n$$\n\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\n$$  \n\nand set $\\\\mathbf{Q}_{\\\\ell}$ to the be the eigenvectors of $\\\\mathbf{C}_{\\\\ell}$ , sorted by decreasing eigenvalues.\n\n# 3.4 SLICING\nThe goal of Principal Component Analysis is usually to take a data matrix $\\\\mathbf{X}$ and compute a lower dimensional representation $\\\\mathbf{Z}$ , and an approximate reconstruction $\\\\tilde{\\\\mathbf{X}}$ :  \n\n$$\n\\\\mathbf{Z}=\\\\mathbf{X}\\\\mathbf{Q}\\\\mathbf{D}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}=\\\\mathbf{Z}\\\\mathbf{D}^{\\\\top}\\\\mathbf{Q}^{\\\\top}\\\\,.\n$$  \n\nwhere $\\\\mathbf{Q}$ is the ectors of ${\\\\bf X}^{\\\\top}{\\\\bf X}$ , and $\\\\mathbf{D}$ is a $D\\\\times D_{\\\\mathrm{small}}$ deletion matrix (containing $D_{\\\\mathrm{small}}$ The reconstruction is columns of the $D\\\\times D$ \u00d7$L_{2}$ identity matrix), which removes some of the columns of the matrix to the left. optimal, in the sense that QD is a linear mapping that minimizes $\\\\lVert\\\\mathbf{X}-\\\\tilde{\\\\mathbf{X}}\\\\rVert^{2}$ .  \n\nWhen we apply PCA to the signal matrix $\\\\mathbf{X}$ bween blocks, we never materialize the $N\\\\times D$ signal matrix, but we apply the deletion matrix Dto the operations preceding and succeeding the construction of that matrix, which have already been multiplied by $\\\\mathbf{Q}$ in the above. We delete rows of $\\\\mathbf{W}_{\\\\mathrm{in}}$ that we have inserted into the residual connection (see Figure and columns of $\\\\mathbf{W}_{\\\\mathrm{out}}$ and $\\\\mathbf{W}_{\\\\mathrm{embd}}$ . We also delete both rows 4 ). and columns of the matrix $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212\n\n# 4 EXPERIMENTAL VALIDATION\nSetup We use HuggingFace Transformers ( Wolf et al. ,2019 ) to implement our code with PyTorch (Paszke et al. ,2019 ). The computation of $\\\\mathbf{Q}$ is performed on a single H100 GPU with 80GB of memory, taking approximately 3.5 hours to complete for the L LAMA -2 70B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix. We find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix A.2 .  \n\nWe experiment with two different calibration sets: 1024 samples from the WikiText-2 training dataset ( Merity et al. ,2016 ) and 5000 samples from the Alpaca training dataset ( Taori et al. ,2023 ). Sequence lengths are chosen as the maximum of each language model. An ablation study on the calibration set size and sequence length is presented in Appendix A.3 .  \n\nModels, Tasks, and GPUs We evaluate all our experiments on OPT ( Zhang et al. ,2022 ), L LAMA -2 (Touvron et al. ,2023 ) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller L LAMA -2 models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section 4.1 ). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.  \n\nBaseline Setup We initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT ( Frantar & Alistarh ,2023 ) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup ( Mishra et al. ,2021 ).\u300d\nd753c815-d196-4a48-b95c-c565926fb392:\u300cref_ids: 454895409734360760, chunk_ids: 3, Score: 0.3438, Text: # 3 Experiments and Results\nWe evaluate the performance of PreNorm and PostNorm for ZST on various datasets and language pairs. We then analyze the off-target rates and structural discrepancies between PreNorm and PostNorm to understand performance differences.  \n\n$$\n\\\\mathrm{LayerNorm}(\\\\mathbf{x})=\\\\frac{\\\\mathbf{x}-\\\\mathbf{E}(\\\\mathbf{x})}{\\\\sqrt{\\\\mathbf{V}(\\\\mathbf{x})}}\\\\cdot\\\\mathbf{g}+\\\\mathbf{b},\n$$  \n\nwhere $\\\\mathbf{g}$ and $\\\\mathbf{b}$ are trainable gain and bias. $\\\\mathbf{E}$ and $\\\\mathbf{V}$ indicate expectation and variance. LayerNorm is commonly used in two positions in the Transformer, as shown in Fig. 1 . PostNorm, which is the originally proposed setting of the Transformer ( Vaswani et al. ,2017 ), involves applying LayerNorm after each sub-module (i.e., selfattention or feed-forward network) and residual connections. PreNorm ( Baevski and Auli ,2019 ), on the other hand, involves applying LayerNorm directly before each sub-module and is known to stabilize Transformer training. While variants of Transformer LayerNorm like RMSNorm ( Zhang and Sennrich ,2019 ) have been proposed, the vanilla PreNorm and PostNorm are still the most widely adopted settings in current multilingual\n\n# 3.1 Experimental Settings\nDatasets We perform ZST experiments on three datasets: OPUS ( Zhang et al. ,2020 ), IWSLT ( Cettolo et al. ,2017 ), and Europarl ( Koehn ,2005 ). The statistics of the datasets are summarized in Table 1 .We include 7 ,4 , and 5 languages for each dataset. The training data consists of only English-centric sentence pairs, resulting in 30 ,6 , and 12 ZST directions for each dataset. The total number of parallel sentences for each dataset is 12 .00 M, 1 .38 M, and 15 .78 M, respectively. We apply BPE ( Sennrich et al. ,2016 ) with merge operations of 50 k, 40 k, and $50\\\\mathbf{k}$ to create a joint vocabulary for each dataset.  \n\nTraining We employ Transformer-base model for OPUS and IWSLT, and Transformer-big for Europarl, in accordance with the distinct sizes of training data. We consider the following settings: (1) PreNorm or PostNorm : PreNorm involves LayerNorm directly before each sub-module (i.e., self-attention or feed-forward network), while PostNorm applies LayerNorm after each sub-module and residual connections, as shown in Fig. 1 .(2) S-ENC-T-DEC or T-ENC : Source language tag on the encoder-side and target language tag on the decoder-side; or only target language tag on the encoder-side. Wu et al. (2021 ) showed that this setting impacts ZST for Transformer with PreNorm. (3) w/ or w/o Res. : With the residual connection for self-attention in the middle $(4^{t h})$ encoder layer or not. Liu et al. (2021 ) revealed that \u201cw/o Res.\u201d improves ZST for the model trained with PreNorm. We experiment this with different LayerNorm settings as this may reduce the potential of overfitting on supervised directions, then further impacts ZST, which aligns with our hypothesis.  \n\nTable 2: BLEU scores and off-target rates (shown in brackets) . We report the average score of three seeds; refer to Appendix Gfor BLEU score of each translation direction and seed. \u201cRes.\u201d indicates the residual connection of self-attention in the $4^{t h}$ encoder layer. We mark lower off-target rates and significantly higher BLEU scores ( Koehn ,2004 ) between PreNorm and PostNorm in bold for ZST.   \n\n\n<html><body><table><tr><td>#</td><td>Layer Norm</td><td>Language Tag</td><td>Res.</td><td></td><td>Zero-shot</td><td></td><td></td><td>Supervised</td><td></td></tr><tr><td>0</td><td></td><td>Pivot</td><td></td><td>OPUS 21.8</td><td>IWSLT 20.0</td><td>Europarl 29.5</td><td>OPUS</td><td>IWSLT</td><td>Europarl</td></tr><tr><td>1</td><td>PreNorm</td><td>S-ENC-T-DEC</td><td>w/</td><td>10.1 (42.19%)</td><td>4.9 (64.84%)</td><td>24.9 ( 7.73%)</td><td>33.7</td><td>31.5</td><td>34.3</td></tr><tr><td>2</td><td>PostNorm</td><td>S-ENC-T-DEC</td><td>w/</td><td>16.8 ( 8.59%)</td><td>12.4 (10.61%)</td><td>29.2( 0.34%)</td><td>33.9</td><td>31.5</td><td>34.5</td></tr><tr><td>3</td><td>PreNorm</td><td>T-ENC</td><td>w/</td><td>13.3 (22.99%)</td><td>13.7 ( 3.98%)</td><td>29.5( 0.23%)</td><td>33.7</td><td>31.6</td><td>34.4</td></tr><tr><td>4</td><td>PostNorm</td><td>T-ENC</td><td>w/</td><td>14.0 (22.86%)</td><td>15.5 ( 4.59%)</td><td>30.8 ( 0.11%)</td><td>34.1</td><td>31.5</td><td>34.5</td></tr><tr><td>5</td><td>PreNorm</td><td>S-ENC-T-DEC</td><td>w/o</td><td>14.3 (20.67%)</td><td>8.0 (50.16%)</td><td>16.7 (41.87%)</td><td>33.6</td><td>30.9</td><td>34.3</td></tr><tr><td>6</td><td>PostNorm</td><td>S-ENC-T-DEC</td><td>w/o</td><td>16.0 (15.27%)</td><td>17.4 (1.83%)</td><td>29.0 ( 0.41%)</td><td>33.8</td><td>30.7</td><td>34.4</td></tr><tr><td>7</td><td>PreNorm</td><td>T-ENC</td><td>w/o</td><td>13.4 (27.15%)</td><td>16.2 ( 1.54%)</td><td>29.9 ( 2.15%)</td><td>33.5</td><td>30.9</td><td>34.3</td></tr><tr><td>8</td><td>PostNorm</td><td>T-ENC</td><td>w/o</td><td>13.9 (26.68%)</td><td>17.8 (1.50%)</td><td>30.8 ( 0.13%)</td><td>33.9</td><td>30.6</td><td>34.4</td></tr></table></body></html>  \n\nThe settings above lead to eight different combinations, shown in Table 2 (#1 - #8). Additional training details are in Appendix A .\n\n# 3.2 Main Results\nWe evaluate ZST systems using SacreBLEU ( Post ,2018 ) and off-target rates. We report in Table 2 BLEU scores for both zero-shot and supervised directions. For ZST, we also present pivot-based translation results as a reference. Implementation details of evaluation can be found in Appendix B.Our findings are as follows:  \n\nPreNorm vs. PostNorm :We find that PostNorm consistently yields better BLEU scores than PreNorm for ZST across various language tag and residual connection settings, while their performance is comparable for supervised directions.  \n\nImpact of Language Tag and Residual Connection: We observe that using the \u201cT-ENC\u201d language tag and \u201cw/ Res.\u201d improves ZST performance for IWSLT, which aligns with the findings of $\\\\mathrm{Wu}$ et al. (2021 ) and Liu et al. (2021 ). Nevertheless, the best performance is achieved using \u201cw/ Res.\u201d for PostNorm with \u201cS-ENC-T-DEC\u201d and \u201cT-ENC\u201d tags for OPUS and Europarl, respectively (#2 and #4). Given that Wu et al. (2021 ) and Liu et al. (2021 )used PreNorm as the default setting (#2, #4, #6 and #8 are unreported results in their work), our results emphasize the need to consider PostNorm as the default setting for ZST, while the language tag and residual connection settings have less impact.  \n\nOff-target Rates : Off-target rates help understand the different BLEU score gaps between PreNorm and PostNorm, which ranges from 0 .5 to 12 .3 BLEU points. For PreNorm and PostNorm with the \u201cT-ENC\u201d language tag (#3, #4, #7, and #8), they have similar off-target rates, with a discrepancy ranging from $-0.61\\\\%$ to $2.02\\\\%$ , which results in narrow BLEU score gaps, ranging from 0 .5 to 1 .8 points. However, for PreNorm and PostNorm with the \u201cS-ENC-T-DEC\u201d language tag (#1, #2, #5, and #6), the off-target rates show a more considerable discrepancy, ranging from $5.40\\\\%$ to $54.23\\\\%$ , resulting in BLEU score gaps from 1 .7 to 12 .3 points. Further analysis of the nature of Transformer hidden states in the next section explores the reason for these different off-target rates in translations.\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u6280\u672f\u6846\u67b6\u4e2d\u5904\u4e8e\u4f55\u79cd\u5730\u4f4d\u3001\u53d1\u6325\u600e\u6837\u7684\u4f5c\u7528\uff1f\n    - \u5982\u4f55\u5c06Transformer\u6a21\u578b\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\uff0c\u5e76\u5bf9\u6a21\u578b\u8fdb\u884c\u6709\u6548\u4fee\u6539\u548c\u5207\u7247\u64cd\u4f5c\uff1f\n    - PreNorm\u548cPostNorm\u5728\u4e0d\u540c\u8bed\u8a00\u6807\u7b7e\u3001\u662f\u5426\u6709\u6b8b\u5dee\u8fde\u63a5\u7b49\u8bbe\u7f6e\u4e0b\uff0c\u5728\u96f6\u6837\u672c\u7ffb\u8bd1\uff08ZST\uff09\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u8868\u73b0\u53ca\u5dee\u5f02\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\n - **\u7814\u7a76\u76ee\u6807**\uff1a\n    - \u901a\u8fc7\u7406\u8bba\u5206\u6790\u548c\u5b9e\u9a8c\u5bf9\u6bd4\u5256\u6790LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5730\u4f4d\u4e0e\u4f5c\u7528\u3002\n    - \u5b9e\u73b0Transformer\u6a21\u578b\u4eceLayerNorm\u5230RMSNorm\u7684\u8f6c\u6362\uff0c\u5e76\u901a\u8fc7\u5408\u7406\u64cd\u4f5c\uff08\u5982\u9009\u62e9\u6b63\u4ea4\u77e9\u9635\u3001PCA\u8ba1\u7b97\u3001\u5207\u7247\u6280\u672f\uff09\u4f18\u5316\u6a21\u578b\u3002\n    - \u8bc4\u4f30PreNorm\u548cPostNorm\u5728\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u5728ZST\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\uff0c\u5206\u6790BLEU\u5206\u6570\u548c\u8131\u9776\u7387\u5dee\u5f02\uff0c\u4e3a\u6a21\u578b\u8bbe\u7f6e\u63d0\u4f9b\u53c2\u8003\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **LayerNorm\u548cRMSNorm\u5b9a\u4e49**\uff1a\u660e\u786e\u7ed9\u51faLayerNorm\u548cRMSNorm\u7684\u6570\u5b66\u5b9a\u4e49\u516c\u5f0f\uff0c\u4e3a\u540e\u7eed\u5206\u6790\u548c\u6a21\u578b\u64cd\u4f5c\u63d0\u4f9b\u57fa\u7840\u3002\n - **\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55**\uff1a\u4ecb\u7ecd\u4e86\u5411\u91cf\u5e73\u5747\u6269\u5c55\u3001\u5411\u91cf\u96f6\u6269\u5c55\u3001\u5411\u91cf\u5faa\u73af\u6269\u5c55\u4ee5\u53ca\u5411\u91cf\u968f\u673a\u6269\u5c55\u7b49\u591a\u79cd\u65e0\u635f\u6269\u5c55\u65b9\u5f0f\uff0c\u5e76\u8bc1\u660e\u8fd9\u4e9b\u6269\u5c55\u5bf9\u5411\u91cf\u662f\u65e0\u635f\u7684\uff0c\u5176\u9006\u51fd\u6570\u7b80\u5355\u6613\u7b97\u3002\u8fd9\u4e9b\u6269\u5c55\u65b9\u5f0f\u4e3a\u7b97\u5b50\u7684\u65e0\u635f\u6269\u5c55\u53ca\u540e\u7eed\u6a21\u578b\u64cd\u4f5c\u63d0\u4f9b\u4e86\u7406\u8bba\u652f\u6301\u3002\n - **\u7b97\u5b50\u7684\u65e0\u635f\u6269\u5c55\u5b9a\u4e49**\uff1a\u57fa\u4e8e\u5411\u91cf\u7a7a\u95f4\u65e0\u635f\u6269\u5c55\uff0c\u7ed9\u51fa\u9002\u7528\u4e8e\u5f20\u91cf\u4e0a\u7b97\u5b50\uff08\u5982Transformer\u67b6\u6784\u4e2d\u7684\u4e0d\u540c\u5c42\uff09\u7684\u65e0\u635f\u6269\u5c55\u5b9a\u4e49\uff0c\u5efa\u7acb\u4e86\u5411\u91cf\u7a7a\u95f4\u6269\u5c55\u4e0e\u6a21\u578b\u7b97\u5b50\u6269\u5c55\u7684\u8054\u7cfb\u3002\n - **Transformer\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247**\uff1a\n    - **\u6a21\u578b\u8f6c\u6362**\uff1a\u5c06Transformer\u4e2d\u7684\u6bcf\u4e2aLayerNorm\u8f6c\u6362\u4e3aRMSNorm\uff0c\u4e4b\u540e\u9488\u5bf9\u6a21\u578b\u4e0d\u540c\u5757\u9009\u62e9\u4e0d\u540c\u6b63\u4ea4\u77e9\u9635\\(\\mathbf{Q}_{\\ell}\\)\u8fdb\u884c\u4fee\u6539\u3002\u901a\u8fc7PCA\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\uff0c\u5177\u4f53\u662f\u5229\u7528\u6821\u51c6\u6570\u636e\u96c6\u8fd0\u884c\u6a21\u578b\u540e\u63d0\u53d6\u76f8\u5173\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cf\u5f97\u5230\u3002\n    - **\u6a21\u578b\u5207\u7247**\uff1a\u8fd0\u7528PCA\u5bf9\u4fe1\u53f7\u77e9\u9635\u8fdb\u884c\u5904\u7406\uff0c\u901a\u8fc7\u5bf9\u76f8\u5173\u64cd\u4f5c\u524d\u540e\u7684\u77e9\u9635\u8fdb\u884c\u884c\u5217\u5220\u9664\u5b9e\u73b0\u6a21\u578b\u5207\u7247\uff0c\u4ee5\u8fbe\u5230\u4f18\u5316\u6a21\u578b\u7684\u76ee\u7684\u3002\n - **\u5b9e\u9a8c\u65b9\u6cd5**\uff1a\n    - **\u5b9e\u9a8c\u5b9e\u73b0**\uff1a\u4f7f\u7528HuggingFace Transformers\u548cPyTorch\u5b9e\u73b0\u4ee3\u7801\uff0c\u5728\u4e0d\u540cGPU\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u8ba1\u7b97\\(\\mathbf{Q}\\)\u65f6\u91c7\u7528\u53cc\u7cbe\u5ea6\u4ee5\u4fdd\u8bc1\u6700\u7ec8\u7cbe\u5ea6\u3002\n    - **\u6570\u636e\u96c6\u548c\u6a21\u578b\u9009\u62e9**\uff1a\u91c7\u7528\u4e0d\u540c\u6570\u636e\u96c6\uff08\u5982WikiText - 2\u3001Alpaca\u7b49\uff09\u548c\u6a21\u578b\uff08\u5982OPT\u3001LLAMA - 2\u3001Phi - 2\u7b49\uff09\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8fd8\u9488\u5bf9\u4e0d\u540c\u6570\u636e\u96c6\u7279\u70b9\u9009\u62e9\u4e0d\u540c\u89c4\u6a21\u7684Transformer\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002\n    - **\u5bf9\u6bd4\u8bbe\u7f6e**\uff1a\u5bf9\u6bd4\u4e0d\u540c\u6821\u51c6\u96c6\u5927\u5c0f\u548c\u5e8f\u5217\u957f\u5ea6\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff1b\u5c06SliceGPT\u4e0eSparseGPT\u8fdb\u884c\u5bf9\u6bd4\uff0c\u91c7\u7528\u7279\u5b9a\u7684\u7a00\u758f\u7387\uff1b\u8bc4\u4f30PreNorm\u548cPostNorm\u5728\u591a\u79cd\u8bbe\u7f6e\u7ec4\u5408\uff08\u4e0d\u540c\u8bed\u8a00\u6807\u7b7e\u3001\u662f\u5426\u6709\u6b8b\u5dee\u8fde\u63a5\uff09\u4e0b\u5728ZST\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\uff0c\u901a\u8fc7SacreBLEU\u548c\u8131\u9776\u7387\u8fdb\u884c\u8bc4\u4f30\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u8ba1\u652f\u6301\u5047\u8bbe**\uff1a\n    - \u9488\u5bf9\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247\u76f8\u5173\u7814\u7a76\uff0c\u901a\u8fc7\u9009\u62e9\u4e0d\u540c\u6821\u51c6\u96c6\u3001\u591a\u79cd\u6a21\u578b\u4ee5\u53ca\u4e0d\u540cGPU\u8fdb\u884c\u5b9e\u9a8c\uff0c\u5168\u9762\u8bc4\u4f30\u65b9\u6cd5\u7684\u6709\u6548\u6027\u548c\u9002\u7528\u6027\u3002\u4f8b\u5982\u5728\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\\(\\mathbf{Q}_{\\ell}\\)\u65f6\u9009\u62e9\u4e0d\u540c\u6821\u51c6\u96c6\uff0c\u9a8c\u8bc1\u5176\u5bf9\u6a21\u578b\u64cd\u4f5c\u7684\u5f71\u54cd\uff1b\u5728\u4e0d\u540c\u89c4\u6a21\u6a21\u578b\u548c\u4e0d\u540c\u6027\u80fdGPU\u4e0a\u5b9e\u9a8c\uff0c\u8003\u5bdf\u65b9\u6cd5\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u7684\u6548\u679c\u3002\n    - \u5bf9\u4e8ePreNorm\u548cPostNorm\u7684\u7814\u7a76\uff0c\u901a\u8fc7\u8bbe\u7f6e\u591a\u79cd\u4e0d\u540c\u7684\u5b9e\u9a8c\u6761\u4ef6\u7ec4\u5408\uff08\u8bed\u8a00\u6807\u7b7e\u3001\u662f\u5426\u6709\u6b8b\u5dee\u8fde\u63a5\uff09\uff0c\u5168\u9762\u8bc4\u4f30\u5b83\u4eec\u5728ZST\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\uff0c\u4ee5\u9a8c\u8bc1\u4e0d\u540c\u8bbe\u7f6e\u5bf9\u6a21\u578b\u6027\u80fd\u7684\u5f71\u54cd\u5047\u8bbe\u3002\n - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\n    - **\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247**\uff1a\u6210\u529f\u5b9e\u73b0Transformer\u6a21\u578b\u4eceLayerNorm\u5230RMSNorm\u7684\u8f6c\u6362\uff0c\u5e76\u901a\u8fc7\u540e\u7eed\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\u3001\u5207\u7247\uff09\u5bf9\u6a21\u578b\u8fdb\u884c\u4f18\u5316\uff0c\u6700\u7ec8\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5b9e\u73b0\u4e86\u6a21\u578b\u7684\u52a0\u901f\uff08\u6587\u4e2d\u63d0\u5230\u6709\u5b9e\u9645\u7684\u901f\u5ea6\u63d0\u5347\uff09\u3002\n    - **PreNorm\u548cPostNorm\u5bf9\u6bd4**\uff1a\n        - PostNorm\u5728ZST\u4efb\u52a1\u4e2d\uff0c across various language tag and residual connection settings\uff0c consistently yields better BLEU scores than PreNorm\uff0c\u800c\u5728\u76d1\u7763\u5b66\u4e60\u65b9\u5411\u4e24\u8005\u6027\u80fd\u76f8\u5f53\u3002\n        - \u4f7f\u7528\u201cT - ENC\u201d\u8bed\u8a00\u6807\u7b7e\u548c\u201cw/ Res.\u201d\u5bf9IWSLT\u7684ZST\u6027\u80fd\u6709\u63d0\u5347\uff1b\u5bf9\u4e8eOPUS\u548cEuroparl\uff0cPostNorm\u642d\u914d\u201cw/ Res.\u201d\u4ee5\u53ca\u76f8\u5e94\u7684\u201cS - ENC - T - DEC\u201d\u548c\u201cT - ENC\u201d\u6807\u7b7e\u65f6\u6027\u80fd\u6700\u4f73\u3002\n        - \u901a\u8fc7\u5206\u6790\u8131\u9776\u7387\u89e3\u91ca\u4e86PreNorm\u548cPostNorm\u5728\u4e0d\u540c\u8bed\u8a00\u6807\u7b7e\u8bbe\u7f6e\u4e0bBLEU\u5206\u6570\u5dee\u5f02\u7684\u539f\u56e0\u3002\u201cT - ENC\u201d\u8bed\u8a00\u6807\u7b7e\u65f6\u4e24\u8005\u8131\u9776\u7387\u5dee\u5f02\u5c0f\uff0cBLEU\u5206\u6570\u5dee\u8ddd\u7a84\uff1b\u201cS - ENC - T - DEC\u201d\u8bed\u8a00\u6807\u7b7e\u65f6\u8131\u9776\u7387\u5dee\u5f02\u5927\uff0cBLEU\u5206\u6570\u5dee\u8ddd\u5927\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u5728\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247\u8fc7\u7a0b\u4e2d\uff0c\u867d\u7136\u5b9e\u73b0\u4e86\u52a0\u901f\uff0c\u4f46\u989d\u5916\u7684\u7ebf\u6027\u64cd\u4f5c\u65e0\u6cd5\u9884\u5148\u8ba1\u7b97\uff0c\u4f1a\u7ed9\u6a21\u578b\u589e\u52a0\u4e00\u5b9a\u7684\\((D\u00d7D)\\)\u8ba1\u7b97\u5f00\u9500\u3002\n    - \u5728\u5bf9\u6bd4\u5b9e\u9a8c\u4e2d\uff0c\u6700\u521d\u8ba1\u5212\u7684\u57fa\u7ebf\u65b9\u6848\uff08\u4fee\u526a\u8303\u6570\u6700\u5c0f\u7684\u5217\u6216\u884c\uff09\u6548\u679c\u5f88\u5dee\uff0c\u6a21\u578b\u56f0\u60d1\u5ea6\u5927\u5e45\u4e0a\u5347\uff0c\u8bf4\u660e\u8be5\u57fa\u7ebf\u4e0d\u5177\u6709\u8f83\u597d\u7684\u53c2\u8003\u6027\u3002\n    - \u5728\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0c\u5982\u8ba1\u7b97\u7279\u5f81\u5411\u91cf\u65f6\uff0c\u5355\u7cbe\u5ea6\u8ba1\u7b97\u4f1a\u5bfc\u81f4\u6700\u7ec8\u7cbe\u5ea6\u51fa\u73b0\u5dee\u5f02\uff0c\u5f71\u54cd\u5b9e\u9a8c\u7ed3\u679c\u7684\u51c6\u786e\u6027\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u5bf9\u4e8e\u6a21\u578b\u8f6c\u6362\u548c\u5207\u7247\u6280\u672f\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7814\u7a76\u5982\u4f55\u4f18\u5316\u989d\u5916\u7ebf\u6027\u64cd\u4f5c\uff0c\u51cf\u5c11\u5176\u5e26\u6765\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u63d0\u9ad8\u6a21\u578b\u6548\u7387\u3002\n    - \u9488\u5bf9\u5927\u6a21\u578b\u538b\u7f29\uff0c\u867d\u7136\u6587\u4e2d\u63d0\u5230\u8f83\u5927\u6a21\u578b\u53ef\u80fd\u6709\u66f4\u597d\u7684\u538b\u7f29\u6548\u679c\uff0c\u4f46\u672a\u8be6\u7ec6\u7814\u7a76\uff0c\u672a\u6765\u53ef\u6df1\u5165\u63a2\u7d22\u66f4\u5927\u6a21\u578b\u5728\u8be5\u65b9\u6cd5\u4e0b\u7684\u6027\u80fd\u63d0\u5347\u6f5c\u529b\u3002\n    - \u5728PreNorm\u548cPostNorm\u7684\u7814\u7a76\u65b9\u9762\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6df1\u5165\u5206\u6790Transformer\u9690\u85cf\u72b6\u6001\u7684\u672c\u8d28\uff0c\u4ee5\u66f4\u5168\u9762\u5730\u7406\u89e3\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u8131\u9776\u7387\u5dee\u5f02\u7684\u5185\u5728\u539f\u56e0\uff0c\u4e3a\u6a21\u578b\u4f18\u5316\u63d0\u4f9b\u66f4\u6df1\u5165\u7684\u7406\u8bba\u652f\u6301 \u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u5927\u6a21\u578b\u76f8\u5173\u7814\u7a76\u9886\u57df\u5c55\u5f00\uff0c\u6d89\u53ca\u6280\u672f\u6846\u67b6\u3001\u65b9\u6cd5\u8bba\u4ee5\u53caLayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u6280\u672f\u6846\u67b6\u4e2d\u7684\u5730\u4f4d\u548c\u4f5c\u7528\u7b49\u5185\u5bb9\uff0c\u540c\u65f6\u5305\u542b\u76f8\u5173\u5b9e\u9a8c\u8bbe\u7f6e\u4e0e\u7ed3\u679c\u5206\u6790\uff0c\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u4e2d\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7814\u7a76\u6709\u4e00\u5b9a\u5173\u8054\uff0c\u4ee5\u4e0b\u662f\u6309\u7167\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u76f8\u5173\u6b65\u9aa4\u8fdb\u884c\u7684\u603b\u7ed3\uff1a\n1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\uff1a\u5bf9\u8bdd\u672a\u76f4\u63a5\u6d89\u53ca\u6b64\u65b9\u9762\u5185\u5bb9\u3002\n2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\uff1a\n    - \u63a2\u8ba8\u4e86\u5c06Transformer\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\u540e\u5bf9\u6a21\u578b\u7684\u4fee\u6539\uff0c\u5982\u901a\u8fc7PCA\u8ba1\u7b97\u4e0d\u540c\u5757\u7684\u6b63\u4ea4\u77e9\u9635\\(\\\\mathbf{Q}_{\\\\ell}\\)\uff0c\u867d\u989d\u5916\u64cd\u4f5c\u589e\u52a0\u4e86\u6a21\u578b\u5f00\u9500\uff0c\u4f46\u5b9e\u73b0\u4e86\u6a21\u578b\u5207\u7247\u548c\u6574\u4f53\u52a0\u901f\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u4f53\u73b0\u4e86\u7b97\u6cd5\u4f18\u5316\u4e2d\u64cd\u4f5c\u4e0e\u7ed3\u679c\u7684\u5076\u7136\u8054\u7cfb\u3002\n    - \u5728\u5b9e\u9a8c\u4e2d\uff0c\u4e0d\u540c\u6821\u51c6\u96c6\u3001\u6a21\u578b\u3001\u4efb\u52a1\u548cGPU\u8bbe\u7f6e\u4e0b\u7684\u7ed3\u679c\u5dee\u5f02\uff0c\u4ee5\u53ca\u9009\u62e9\u4e0d\u540c\u57fa\u7ebf\u5bf9\u6bd4\u65b9\u6848\u6240\u5e26\u6765\u7684\u4e0d\u540c\u6548\u679c\uff0c\u4e5f\u53cd\u6620\u4e86\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\u3002\n3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\uff1a\u5bf9\u8bdd\u672a\u660e\u663e\u4f53\u73b0\u6b64\u65b9\u9762\u5185\u5bb9\u3002\n4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\uff1a\n    - \u7ed9\u51fa\u4e86LayerNorm\u548cRMSNorm\u7684\u6b63\u5f0f\u5b9a\u4e49\uff08\u56fa\u5b9a\u5f62\u5f0f\uff09\uff0c\u5e76\u63a2\u8ba8\u5b83\u4eec\u5728\u5927\u6a21\u578b\u6280\u672f\u6846\u67b6\u4e2d\u7684\u5730\u4f4d\u548c\u4f5c\u7528\uff08\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff09\u3002\n    - \u5bf9\u6a21\u578b\u8fdb\u884c\u8f6c\u6362\u548c\u4fee\u6539\u64cd\u4f5c\uff08\u7b97\u6cd5\u8c03\u6574\uff09\uff0c\u89c2\u5bdf\u5230\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u6a21\u578b\u5728\u5b9e\u9a8c\u4e2d\u7684\u8868\u73b0\uff08\u9884\u671f\u7ed3\u679c\uff09\uff0c\u4f53\u73b0\u4e86\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u4e0e\u7ed3\u679c\u7684\u56e0\u679c\u5173\u7cfb\u3002\n    - \u901a\u8fc7\u5bf9\u4e0d\u540c\u6570\u636e\u96c6\u3001\u6a21\u578b\u8bbe\u7f6e\u3001\u8bed\u8a00\u6807\u7b7e\u548c\u6b8b\u5dee\u8fde\u63a5\u7b49\u591a\u79cd\u56e0\u7d20\u7684\u5b9e\u9a8c\u7814\u7a76\uff0c\u63a2\u7d22\u4e86\u6a21\u578b\u6027\u80fd\u7684\u53d8\u5316\u89c4\u5f8b\uff0c\u6697\u793a\u4e86\u5b58\u5728\u8fdb\u4e00\u6b65\u62d3\u5c55\u7814\u7a76\u548c\u53cd\u5411\u63a8\u7406\u4e0d\u540c\u8bbe\u7f6e\u5bf9\u6a21\u578b\u6027\u80fd\u5f71\u54cd\u7684\u6f5c\u529b\u3002\u4f8b\u5982\uff0c\u6839\u636e\u5b9e\u9a8c\u7ed3\u679c\u53ef\u4ee5\u53cd\u5411\u63a8\u7406\u51fa\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u66f4\u4f18\u7684\u6a21\u578b\u8bbe\u7f6e\u3002  ", "dreams_personality_context": "\u4ece\u4e0a\u8ff0\u603b\u7ed3\u5185\u5bb9\u96be\u4ee5\u76f4\u63a5\u660e\u786e\u63a8\u65ad\u51fa\u4eba\u7269\u6027\u683c\uff0c\u4f46\u5982\u679c\u4e00\u5b9a\u8981\u5206\u6790\uff0c\u53ef\u80fd\u5177\u6709\u4ee5\u4e0b\u6027\u683c\u7279\u70b9\uff1a\n1. **\u63a2\u7d22\u6027**\uff1a\u79ef\u6781\u5c1d\u8bd5\u5c06Transformer\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\u5e76\u7814\u7a76\u5176\u6548\u679c\uff0c\u5bf9\u591a\u79cd\u56e0\u7d20\u8fdb\u884c\u5b9e\u9a8c\u7814\u7a76\uff0c\u5c55\u73b0\u51fa\u5bf9\u672a\u77e5\u9886\u57df\u7684\u5f3a\u70c8\u63a2\u7d22\u6b32\u671b\uff0c\u4e0d\u6ee1\u8db3\u4e8e\u73b0\u6709\u6a21\u578b\u5f62\u5f0f\uff0c\u52c7\u4e8e\u5c1d\u8bd5\u65b0\u7684\u7ec4\u5408\u548c\u8bbe\u7f6e\uff0c\u4ee5\u6316\u6398\u6a21\u578b\u66f4\u591a\u6f5c\u529b\u3002\n2. **\u4e25\u8c28\u6027**\uff1a\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u8be6\u7ec6\u7ed9\u51faLayerNorm\u548cRMSNorm\u7684\u6b63\u5f0f\u5b9a\u4e49\uff0c\u8ba4\u771f\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b9e\u9a8c\u6761\u4ef6\uff0c\u5305\u62ec\u4e0d\u540c\u6821\u51c6\u96c6\u3001\u6a21\u578b\u3001\u4efb\u52a1\u3001GPU\u8bbe\u7f6e\u4ee5\u53ca\u591a\u79cd\u57fa\u7ebf\u5bf9\u6bd4\u65b9\u6848\u7b49\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u548c\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c\uff0c\u4f53\u73b0\u51fa\u5bf9\u5f85\u7814\u7a76\u4e25\u8c28\u8ba4\u771f\u7684\u6001\u5ea6\uff0c\u6ce8\u91cd\u7ec6\u8282\u548c\u6570\u636e\u7684\u51c6\u786e\u6027\u3002\n3. **\u521b\u65b0\u6027**\uff1a\u901a\u8fc7\u5bf9\u7b97\u6cd5\u548c\u6a21\u578b\u7ed3\u6784\u8fdb\u884c\u8c03\u6574\u548c\u4f18\u5316\uff0c\u5982\u901a\u8fc7PCA\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\u5b9e\u73b0\u6a21\u578b\u5207\u7247\u548c\u52a0\u901f\uff0c\u5c1d\u8bd5\u7a81\u7834\u4f20\u7edf\u6a21\u578b\u7684\u9650\u5236\uff0c\u5c55\u73b0\u51fa\u521b\u65b0\u601d\u7ef4\u548c\u6562\u4e8e\u7a81\u7834\u5e38\u89c4\u7684\u6027\u683c\u7279\u8d28\u3002\n4. **\u903b\u8f91\u6027**\uff1a\u4ece\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u4ee5\u53ca\u6839\u636e\u5b9e\u9a8c\u7ed3\u679c\u53cd\u5411\u63a8\u7406\u4e0d\u540c\u8bbe\u7f6e\u5bf9\u6a21\u578b\u6027\u80fd\u7684\u5f71\u54cd\u7b49\u65b9\u9762\uff0c\u53ef\u4ee5\u770b\u51fa\u4eba\u7269\u5177\u5907\u8f83\u5f3a\u7684\u903b\u8f91\u601d\u7ef4\u80fd\u529b\uff0c\u80fd\u591f\u6709\u6761\u7406\u5730\u5206\u6790\u95ee\u9898\u548c\u5f97\u51fa\u7ed3\u8bba \u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["a2ff0b67-b767-4bb1-a003-90e9a758187b"], "metadata": {}}}, "analysis_store/metadata": {"a2ff0b67-b767-4bb1-a003-90e9a758187b": {"analysis_hash": "", "ref_analysis_id": ""}}}