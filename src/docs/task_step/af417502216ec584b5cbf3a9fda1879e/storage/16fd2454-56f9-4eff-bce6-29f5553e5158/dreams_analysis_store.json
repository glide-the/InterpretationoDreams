{"analysis_store/data": {"25ca1d19-0197-4def-8584-3e7dadfe5ef2": {"__data__": {"id_": "25ca1d19-0197-4def-8584-3e7dadfe5ef2", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### Step by Step Decomposition\n\n#### Step 1: \u7406\u89e3\u4efb\u52a1\u80cc\u666f\n- **\u4efb\u52a1\u80cc\u666f**: \u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\u5b66\u7814\u7a76\u5b66\u8005\uff0c\u60a8\u5df2\u7ecf\u67e5\u9605\u4e86\u300a\u4f5c\u4e3a\u6fc0\u60c5\u7684\u7231\u60c5\u300b\u5362\u66fc\u7f16\u5199\u7684\u4e66\u7c4d\uff0c\u5c1d\u8bd5\u901a\u8fc7\u53c2\u8003\u6587\u732e\u4e2d\u5b9a\u4e49\u7684\u7231\u60c5\u8bed\u4e49\u5b66\uff0c\u4ece\u6587\u672c\u4e2d\u603b\u7ed3\u4e0b\u65b9\u7247\u6bb5\u3002\n- **\u76ee\u6807**: \u7814\u7a76\u4ea4\u6d41\u5a92\u4ecb\u9886\u57df\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u7814\u7a76\u6fc0\u60c5\u7684\u975e\u7406\u6027\u4e0e\u98ce\u96c5\u60c5\u672f\u7684\u5076\u7136\u6027\uff0c\u7814\u7a76\u81ea\u8eab\u7684\u5feb\u611f\u662f\u5426\u8f6c\u79fb\u5230\u793e\u4f1a\u884c\u4e3a\u4e0a\uff0c\u7814\u7a76\u8bed\u4e49\u4fe1\u606f\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u843d\u7a7a\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u6fc0\u53d1\u6027\u62d3\u5c55\u5230\u5426\u5b9a\u7269\u4e4b\u4e2d\u3002\n\n#### Step 2: \u5206\u6790\u6587\u672c\u5185\u5bb9\n- **\u6587\u672c\u5185\u5bb9**: \u89d2\u8272\u3001\u5185\u5bb9\u3001\u5206\u955c\u3002\n- **\u5206\u6790**: \u6587\u672c\u5185\u5bb9\u8f83\u4e3a\u7b80\u6d01\uff0c\u4ec5\u5305\u542b\u89d2\u8272\u3001\u5185\u5bb9\u548c\u5206\u955c\u4e09\u4e2a\u90e8\u5206\uff0c\u6ca1\u6709\u5177\u4f53\u63cf\u8ff0\u3002\n\n#### Step 3: \u786e\u5b9a\u7814\u7a76\u91cd\u70b9\n- **\u7814\u7a76\u91cd\u70b9**:\n  1. \u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  2. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3002\n  3. \u5362\u66fc\u7684\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3002\n  4. \u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027\u3002\n  5. \u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n  6. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\u3002\n  7. \u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3002\n  8. \u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  9. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u9644\u8fd1\u7814\u7a76\u9886\u57df\u3002\n  10. \u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n  11. \u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u53e0\u3002\n  12. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u76f8\u4ea4\u3002\n\n#### Step 4: \u603b\u7ed3\u6587\u672c\u7247\u6bb5\n- **\u603b\u7ed3**: \u7531\u4e8e\u6587\u672c\u5185\u5bb9\u8f83\u4e3a\u7b80\u6d01\uff0c\u65e0\u6cd5\u76f4\u63a5\u603b\u7ed3\u51fa\u5177\u4f53\u4fe1\u606f\u3002\u9700\u8981\u7ed3\u5408\u7814\u7a76\u91cd\u70b9\uff0c\u63a8\u6d4b\u6587\u672c\u53ef\u80fd\u6d89\u53ca\u7684\u65b9\u9762\u3002\n\n#### Step 5: \u7ed3\u5408\u7814\u7a76\u91cd\u70b9\u8fdb\u884c\u63a8\u6d4b\n- **\u63a8\u6d4b**:\n  - **\u89d2\u8272**: \u53ef\u80fd\u6d89\u53ca\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u8005\uff0c\u5982\u60c5\u4fa3\u3001\u7f51\u7ea2\u7b49\u3002\n  - **\u5185\u5bb9**: \u53ef\u80fd\u6d89\u53ca\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u5177\u4f53\u8868\u73b0\uff0c\u5982\u60c5\u611f\u8868\u8fbe\u3001\u4e92\u52a8\u65b9\u5f0f\u7b49\u3002\n  - **\u5206\u955c**: \u53ef\u80fd\u6d89\u53ca\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7231\u60c5\u8bed\u4e49\u5b66\u7684\u5e94\u7528\uff0c\u5982\u573a\u666f\u8bbe\u8ba1\u3001\u5bf9\u8bdd\u5185\u5bb9\u7b49\u3002\n\n#### Step 6: \u6700\u7ec8\u603b\u7ed3\n- **\u6700\u7ec8\u603b\u7ed3**: \u6587\u672c\u7247\u6bb5\u53ef\u80fd\u6d89\u53ca\u793e\u4ea4\u5a92\u4f53\u548c\u5f71\u89c6\u4f5c\u54c1\u4e2d\u7231\u60c5\u8bed\u4e49\u5b66\u7684\u5177\u4f53\u8868\u73b0\uff0c\u9700\u8981\u7ed3\u5408\u5362\u66fc\u7684\u7406\u8bba\u8fdb\u884c\u6df1\u5165\u5206\u6790\uff0c\u63a2\u8ba8\u5176\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u5173\u8054\u548c\u6f5c\u5728\u5e94\u7528\u3002\n\n### \u6700\u7ec8\u7b54\u6848\n\u6587\u672c\u7247\u6bb5\u53ef\u80fd\u6d89\u53ca\u793e\u4ea4\u5a92\u4f53\u548c\u5f71\u89c6\u4f5c\u54c1\u4e2d\u7231\u60c5\u8bed\u4e49\u5b66\u7684\u5177\u4f53\u8868\u73b0\uff0c\u9700\u8981\u7ed3\u5408\u5362\u66fc\u7684\u7406\u8bba\u8fdb\u884c\u6df1\u5165\u5206\u6790\uff0c\u63a2\u8ba8\u5176\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u5173\u8054\u548c\u6f5c\u5728\u5e94\u7528\u3002\u5177\u4f53\u7814\u7a76\u91cd\u70b9\u5305\u62ec\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u7b49\u3002", "scene_monologue_context": "**\u72ec\u767d\u4fe1\u606f\uff1a**\n\n\u4eca\u5929\uff0c\u6211\u6df1\u5165\u7814\u7a76\u4e86\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662fLayerNorm\u548cRMSNorm\u8fd9\u4e24\u79cd\u65b9\u6cd5\u7684\u5f02\u540c\u53ca\u5176\u5bf9\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u7684\u5f71\u54cd\u3002\u4e3a\u4e86\u66f4\u5168\u9762\u5730\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u67e5\u9605\u4e86\u591a\u7bc7\u76f8\u5173\u6587\u732e\uff0c\u91cd\u70b9\u5173\u6ce8\u4e86\u6a21\u578b\u89e3\u91ca\u65b9\u6cd5\u3001\u5f52\u56e0\u9c81\u68d2\u6027\u4ee5\u53ca\u56fe\u50cf\u4e0a\u91c7\u6837\u65b9\u6cd5\u7b49\u9886\u57df\u7684\u6700\u65b0\u7814\u7a76\u8fdb\u5c55\u3002\n\n\u9996\u5148\uff0c\u6211\u4e86\u89e3\u5230\uff0c\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5728\u5404\u4e2a\u9886\u57df\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\u3002\u5f52\u56e0\u65b9\u6cd5\uff08Attribution Methods\uff09\u4f5c\u4e3a\u4e00\u79cd\u89e3\u91ca\u6a21\u578b\u51b3\u7b56\u7684\u5de5\u5177\uff0c\u8fd1\u5e74\u6765\u5f97\u5230\u4e86\u5e7f\u6cdb\u5173\u6ce8\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5728\u9762\u5bf9\u8f93\u5165\u6270\u52a8\u65f6\u5f80\u5f80\u8868\u73b0\u51fa\u8106\u5f31\u6027\uff0c\u8fd9\u5f15\u53d1\u4e86\u5bf9\u5f52\u56e0\u9c81\u68d2\u6027\u7684\u7814\u7a76\u3002\u4f8b\u5982\uff0cGhorbani\u7b49\u4eba\uff082019\uff09\u63d0\u51fa\u4e86\u4e00\u79cd\u6784\u9020\u5fae\u5c0f\u6270\u52a8\u7684\u65b9\u6cd5\uff0c\u8fd9\u79cd\u6270\u52a8\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u6a21\u578b\u9884\u6d4b\u7684\u60c5\u51b5\u4e0b\u663e\u8457\u6539\u53d8\u5f52\u56e0\u56fe\u3002\u8fd9\u8ba9\u6211\u610f\u8bc6\u5230\uff0c\u5f52\u56e0\u9c81\u68d2\u6027\u4e0d\u4ec5\u4ec5\u662f\u6a21\u578b\u9884\u6d4b\u9c81\u68d2\u6027\u7684\u5ef6\u4f38\uff0c\u5b83\u8fd8\u9700\u8981\u72ec\u7acb\u7684\u8bc4\u4f30\u548c\u6539\u8fdb\u65b9\u6cd5\u3002\n\n\u63a5\u7740\uff0c\u6211\u6ce8\u610f\u5230\uff0c\u73b0\u6709\u7684\u5f52\u56e0\u9c81\u68d2\u6027\u8bc4\u4f30\u65b9\u6cd5\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u5bf9\u5f52\u56e0\u56fe\u7684\u5fae\u5c0f\u53d8\u5316\u8fc7\u4e8e\u654f\u611f\uff0c\u53ef\u80fd\u5bfc\u81f4\u5bf9\u6a21\u578b\u9c81\u68d2\u6027\u7684\u9519\u8bef\u5224\u65ad\u3002\u8fd9\u4fc3\u4f7f\u6211\u601d\u8003\uff0c\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u5c40\u90e8\u6027\u548c\u591a\u6837\u6027\u7684\u5ea6\u91cf\u6765\u6539\u8fdb\u8fd9\u4e9b\u8bc4\u4f30\u65b9\u6cd5\u3002\u6587\u732e\u4e2d\u63d0\u5230\u7684\u4e00\u4e9b\u65b0\u65b9\u6cd5\uff0c\u5982LENS\uff08LocalitysENSitive\uff09\u6539\u8fdb\u548ctop$k$-div\u5ea6\u91cf\uff0c\u6b63\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u800c\u63d0\u51fa\u7684\u3002\u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u4ec5\u8003\u8651\u4e86\u5f52\u56e0\u7684\u5c40\u90e8\u6027\uff0c\u8fd8\u5f15\u5165\u4e86\u591a\u6837\u6027\uff0c\u4ece\u800c\u66f4\u5168\u9762\u5730\u8bc4\u4f30\u6a21\u578b\u7684\u5f52\u56e0\u9c81\u68d2\u6027\u3002\n\n\u6b64\u5916\uff0c\u6211\u8fd8\u7814\u7a76\u4e86\u56fe\u50cf\u4e0a\u91c7\u6837\u65b9\u6cd5\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662f\u6982\u7387\u5168\u5c40\u8de8\u6a21\u6001\u4e0a\u91c7\u6837\uff08PGCU\uff09\u65b9\u6cd5\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5904\u7406\u4f4e\u5206\u8fa8\u7387\u56fe\u50cf\u65f6\uff0c\u80fd\u591f\u66f4\u597d\u5730\u5229\u7528\u5168\u5c40\u4fe1\u606f\u548c\u901a\u9053\u7279\u5f02\u6027\uff0c\u4ece\u800c\u63d0\u9ad8\u4e0a\u91c7\u6837\u7684\u6548\u679c\u3002\u8fd9\u8ba9\u6211\u610f\u8bc6\u5230\uff0c\u4e0a\u91c7\u6837\u65b9\u6cd5\u7684\u9009\u62e9\u5bf9\u6a21\u578b\u6027\u80fd\u6709\u7740\u91cd\u8981\u5f71\u54cd\uff0c\u5c24\u5176\u662f\u5728\u591a\u6a21\u6001\u878d\u5408\u4efb\u52a1\u4e2d\u3002\n\n\u603b\u7684\u6765\u8bf4\uff0c\u4eca\u5929\u7684\u63a2\u7d22\u8ba9\u6211\u5bf9\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\u3001\u5f52\u56e0\u9c81\u68d2\u6027\u4ee5\u53ca\u56fe\u50cf\u4e0a\u91c7\u6837\u65b9\u6cd5\u6709\u4e86\u66f4\u6df1\u5165\u7684\u7406\u89e3\u3002\u6211\u610f\u8bc6\u5230\uff0c\u968f\u7740\u7814\u7a76\u65b9\u6cd5\u7684\u4e0d\u65ad\u6f14\u8fdb\uff0c\u6211\u4eec\u9700\u8981\u66f4\u52a0\u7ec6\u81f4\u5730\u8bc4\u4f30\u548c\u6539\u8fdb\u6a21\u578b\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u4ee5\u786e\u4fdd\u5176\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u53ef\u9760\u6027\u548c\u53ef\u89e3\u91ca\u6027\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u8ba1\u5212\u8fdb\u4e00\u6b65\u6df1\u5165\u7814\u7a76\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5e76\u5c1d\u8bd5\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u6211\u7684\u5b9e\u9645\u9879\u76ee\u4e2d\uff0c\u4ee5\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "16fd2454-56f9-4eff-bce6-29f5553e5158:\u300c\u65b9\u6cd5\u8bba\u300d\n16fd2454-56f9-4eff-bce6-29f5553e5158:\u300c### \u95ee\u9898\n\n\u5728\u7814\u7a76\u65b9\u6cd5\u9010\u6e10\u4ece\u5355\u4e00\u6a21\u578b\u8f6c\u5411\u591a\u6a21\u578b\u878d\u5408\uff0c\u4ece\u76d1\u7763\u5b66\u4e60\u6269\u5c55\u5230\u65e0\u76d1\u7763\u548c\u81ea\u76d1\u7763\u5b66\u4e60\uff0c\u5e76\u5f3a\u8c03\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u7684\u80cc\u666f\u4e0b\uff0cLayerNorm\u548cRMSNorm\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u6709\u4f55\u5f02\u540c\uff1f\u5b83\u4eec\u5982\u4f55\u5f71\u54cd\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\uff1f\u300d\n16fd2454-56f9-4eff-bce6-29f5553e5158:\u300cref_ids: 455038427552559154, chunk_ids: 6, Score: 0.1602, Text: # 2 Background and Related Work\nWe herein discuss background literature from three different perspectives that may be related to our work: model explanation/attribution methods, efforts on attributional robustness (both attacks and defenses), and other recent related work. Attribution Methods. Existing efforts on explainability in DNN models can be broadly categorized as: local and global methods, model-agnostic and model-specific methods, or as post-hoc and ante-hoc (intrinsically interpretable) methods (Molnar 2019; Lecue et al. 2021). Most existing methods in use today \u2013 including methods to visualize weights and neurons (Simonyan, Vedaldi, and Zisserman 2014; Zeiler and Fergus 2014), guided backpropagation (Springenberg et al. 2015), CAM (Zhou et al. 2016), GradCAM (Selvaraju et al. 2017), Grad$\\\\mathrm{CAM++}$ (Chattopadhyay et al. 2018), LIME (Ribeiro, Singh, and Guestrin 2016), DeepLIFT (Shrikumar et al. 2016; Shrikumar, Greenside, and Kundaje 2017), LRP (Bach et al. 2015), Integrated Gradients (Sundararajan, Taly, and Yan 2017), SmoothGrad (Smilkov et al. 2017)), DeepSHAP (Lundberg and Lee 2017) and TCAV (Kim et al. 2018) \u2013 are post-hoc methods, which are used on top of a pre-trained DNN model to explain its predictions. We focus on such post-hoc attribution methods in this work. For a more detailed survey of explainability methods for DNN models, please see (Lecue et al. 2021; Molnar 2019; Samek et al. 2019).  \n\nRobustness of Attributions. The growing numbers of attribution methods proposed has also led to efforts on identifying the desirable characteristics of such methods (AlvarezMelis and Jaakkola 2018; Adebayo et al. 2018; Yeh et al. 2019; Chalasani et al. 2020; Tomsett et al. 2020; Boggust et al. 2022; Agarwal et al. 2022). A key desired trait that has been highlighted by many of these efforts is robustness or stability of attributions, i.e., the explanation should not vary significantly within a small local neighborhood of the input (Alvarez-Melis and Jaakkola 2018; Chalasani et al. 2020). Ghorbani, Abid, and Zou (2019) showed that well-known methods such as gradient-based attributions, DeepLIFT (Shrikumar, Greenside, and Kundaje 2017) and Integrated Gradients (IG) (Sundararajan, Taly, and Yan 2017) are vulnerable to such input perturbations, and also provided an algorithm to construct a small imperceptible perturbation which when added to the input results in changes in the attribution. Slack et al. (2020) later showed that methods like LIME (Ribeiro, Singh, and Guestrin 2016) and DeepSHAP (Lundberg and Lee 2017) are also vulnerable to such manipulations. The identification of such vulnerability and potential for attributional attacks has since led to multiple research efforts to make a model\u2019s attributions robust. Chen et al. (2019) proposed a regularization-based approach, where an explicit regularizer term is added to the loss function to maintain the model gradient across input (IG, in particular) while training the DNN model. This was subsequently extended by (Sarkar, Sarkar, and Balasubramanian 2021; Singh et al. 2020; Wang et al. 2020), all of whom provide different training strategies and regularizers to improve attributional robustness of models. Each of these methods including Ghorbani, Abid, and Zou (2019) measures change in attribution before and after input perturbation using the same metrics: top$k$ intersection, and/or rank correlations like Spearman\u2019s $\\\\rho$ and Kendall\u2019 $\\\\tau$ . Such metrics have recently, in fact, further been used to understand issues surrounding attributional robustness (Wang and Kong 2022). Other efforts that quantify stability of attributions in tabular data also use Euclidean distance (or its variants) between the original and perturbed attribution maps (Alvarez-Melis and Jaakkola 2018; Yeh et al. 2019; Agarwal et al. 2022). Each of these metrics look for dimension-wise correlation or pixel-level matching between attribution maps before and after perturbation, and thus penalize even a minor change in attribution (say, even by one pixel coordinate location). This results in a false sense of fragility, and could even be misleading. In this work, we highlight the need to revisit such metrics, and propose variants based on locality and diversity that can be easily integrated into existing metrics.  \n\nOther Related Work. In other related efforts that have studied similar properties of attribution-based explanations, (Carvalho, Pereira, and Cardoso 2019; Bhatt, Weller, and Moura 2020) stated that stable explanations should not vary too much between similar input samples, unless the model\u2019s prediction changes drastically. The abovementioned attributional attacks and defense methods (Ghorbani, Abid, and Zou 2019; Sarkar, Sarkar, and Balasubramanian 2021; Singh et al. 2020; Wang et al. 2020) maintain this property, since they focus on input perturbations that change the attribution without changing the model prediction itself. Similarly, Arun et al. (2020) and Fel et al. (2022) introduced the notions of repeatability/reproducibility and generalizability respectively, both of which focus on the desired property that a trustworthy explanation must point to similar evidence across similar input images. In this work, we provide a practical metric to study this notion of similarity by considering locality-sensitive metrics.  \n\n  \nFigure 2: From top to bottom, we plot average top$k$ intersection (currently used metric), 3 -LENS-recall $@k$ and 3 -LENS-recall $@k$ -div (proposed metrics) against the $\\\\ell_{\\\\infty}$ -norm of attributional attack perturbations for Simple Gradients (SG) (left) and Integrated Gradients (IG) (right) of a SqueezeNet model on Imagenet. We use $k=1000$ and three attributional attack variants proposed by Ghorbani, Abid, and Zou (2019). Evidently, the proposed metrics show more robustness under the same attacks.\u300d\n16fd2454-56f9-4eff-bce6-29f5553e5158:\u300cref_ids: 454984230919739446, chunk_ids: 8, Score: 0.1533, Text: # 2. Related Work\n\n# 2.1. Pansharpening Method\nModel-based Approaches. The model-based pansharpening methods can be roughly divided into three categories, i.e., component substitution (CS) approaches, multiresolution analysis (MRA) methods, and variational optimization (VO) techniques. The main idea of the CS approach is to decompose the PAN image and LRMS image first and then fuse the spatial information of the PAN image with the special information of the LRMS image to generate the HRMS image. Representative methods include principal component analysis (PCA) [ 23 ], Brovey method [ 18 ], intensity\u2013hue-saturation (IHA) [ 10 ], and Gram-Schmidt (GS) method [ 24 ]. To further reduce spectral distortion, the MRA approaches reconstruct the HRMS image by injecting the structure information of the PAN image into the upsampled LRMS image. Typical methods include highpass filter (HPF) fusion [ 31 ], indusion method [ 21 ], smoothing filterbased intensity modulation (SFIM) [ 25 ] etc. The VO techniques reformulate the pansharpening task as a variational optimization problem, such as Bayesian methods [ 38 ] and variational approaches [ 12 ,13 ,15 ,16 ].  \n\nDeep Learning Approaches. In the last decade, deep learning (DL) methods have been studied for pansharpening, and this type of method directly learns the mapping from LRMS and PAN to HRMS. Typical DL-based pansharpening methods mainly contain two types of network architecture, i.e., residual structure and two-branch structure. The residual structure adds upsampled LRMS images to the output of the network to obtain the HRMS in the form of regression residuals, such as PanNet [ 45 ], FusionNet [ 14 ], SRPPNN [ 4 ], etc [ 20 ,34 ,41 ,49 ]. Recently, the two-branch structure is becoming more and more popular. This type of method usually conducts feature extraction for PAN and LRMS image, respectively, and fuses their features to reconstruct HRMS image, such as GPPNN [ 43 ], Proximal PanNet [ 5 ], SFIIN [ 50 ], etc [ 2 ,6 ,40 ,44 ,51 ,52 ]. Both types of methods upsample LRMS first and then carry out other operations, implying that upsampling is a vital step for pan-sharpening.\n\n# 2.2. Image Upsampling Method\nClassical Methods. Many local interpolation-based upsampling methods are widely used in pansharpening tasks to obtain large-scale MS, especially the bicubic interpolation method [ 9 ]. Besides, there are plenty of similar techniques, such as nearest interpolation [ 35 ], bilinear interpolation [ 35 ], etc [ 27 ,30 ]. However, this type of method suffers from seriously poor adaptability.  \n\nDeep Learning Methods. As deep learning blossoms, many learning-based upsampling methods have been proposed. For instance, transposed convolution [ 17 ] is widely used in many tasks to upsample low-resolution images, which can learn a self-adaptive weight for local interpolation. Following this work, an attention-based image upsampling method [ 22 ] is recently proposed for deep image super-resolution tasks by utilizing the transformer [ 36 ]. However, this method ignores the channel specificity since it uses the same weight for the same position of all channels, which is unsuitable for pansharpening due to the differences among spectral image channels. Additionally, there are also many other upsampling methods, such as Pu-Net [ 46 ], ESPCNN [ 32 ], etc [ 28 ,29 ,39 ]. Among them, ESPCNN is proposed for single-image super-resolution, which enlarges the receptive field by multi-convolution layers.  \n\nHowever, these upsampling methods suffer from three issues. Firstly, almost all these methods only have a local receptive field, making them unable to explore the global information of LRMS. Secondly, most of the upsampling methods can\u2019t exploit the PAN information as guidance. Thirdly, channel specificity is not considered in these methods.\n\n# 3. Proposed Upsampling Method\nIn this section, we first introduce our proposed probability-based global cross-modal upsampling (PGCU) method. Then, we design a network architecture to implement the PGCU method.\u300d\n16fd2454-56f9-4eff-bce6-29f5553e5158:\u300cref_ids: 454984283955145766, chunk_ids: 8, Score: 0.1113, Text: # 1 Introduction\nThe explosive increase in the use of deep neural network (DNN)-based models for applications across domains has resulted in a very strong need to find ways to interpret the decisions made by these models (Gade et al. 2020; Tang et al. 2021; Yap et al. 2021; Oviedo et al. 2022; Oh and Jeong 2020). Interpretability is an important aspect of responsible and trustworthy AI, and model explanation methods (also known as attribution methods) are an important aspect of the community\u2019s efforts towards explaining and debugging real-world AI/ML systems. Attribution methods (Zeiler et al. 2010; Simonyan, Vedaldi, and Zisserman 2014; Bach et al. 2015; Selvaraju et al. 2017; Chattopadhyay et al. 2018; Sundararajan, Taly, and Yan 2017; Shrikumar et al. 2016; Smilkov et al. 2017; Lundberg and Lee 2017) attempt to explain the decisions made by DNN models through inputoutput attributions or saliency maps. (Lipton 2018; Samek et al. 2019; Fan et al. 2021; Zhang et al. 2020) present detailed surveys on these methods. Recently, the growing numbers of attribution methods has led to a concerted focus on studying the robustness of attributions to input perturbations to handle potential security hazards (Chen et al. 2019; Sarkar, Sarkar, and Balasubramanian 2021; Wang and Kong 2022; Agarwal et al. 2022). One could view these efforts as akin to adversarial robustness that focuses on defending against attacks on model predictions, whereas attributional robustness focuses on defending against attacks on model explanations. For example, an explanation for a predicted credit card failure cannot change significantly for a small human-imperceptible change in input features, or the saliency maps explaining the COVID risk prediction from a chest X-ray should not change significantly with a minor human-imperceptible change in the image.  \n\nDNN-based models are known to have a vulnerability to imperceptible adversarial perturbations (Biggio et al. 2013; Szegedy et al. 2014; Goodfellow, Shlens, and Szegedy 2015), which make them misclassify input images. Adversarial training (Madry et al. 2018) is widely understood to provide a reasonable degree of robustness to such perturbation attacks. While adversarial robustness has received significant attention over the last few years (Ozdag 2018; Silva and Najafirad 2020), the need for stable and robust attributions, corresponding explanation methods and their awareness are still in their early stages at this time (Ghorbani, Abid, and $Z_{\\\\mathrm{ou}}~2019$ ; Chen et al. 2019; Slack et al. 2020; Sarkar, Sarkar, and Balasubramanian 2021; Lakkaraju, Arsov, and Bastani 2020; Slack et al. 2021a,b). In an early effort, (Ghorbani, Abid, and Zou 2019) provided a method to construct a small imperceptible perturbation which when added to an input $x$ results in a change in attribution map of the original map to that of the perturbed image. This is measured through top$k$ intersection, Spearman\u2019s rank-order correlation or Kendall\u2019s rank-order correlation between the two attribution maps (of original and perturbed images). See Figure 1 for an example. Defenses proposed against such attributional attacks (Chen et al. 2019; Singh et al. 2020; Wang et al. 2020; Sarkar, Sarkar, and Balasubramanian 2021) also leverage the same metrics to evaluate the robustness of attribution methods.  \n\nWhile these efforts have showcased the need and importance of studying the robustness of attribution methods, we note in this work that the metrics used, and hence the methods, can be highly sensitive to minor local changes in attributions (see Fig 1 row 2 ). We, in fact, show (in Appendix B.1) that under existing metrics to evaluate robustness of attributions, a random perturbation can be as strong an attributional attack as existing benchmark methods. This may not be a true indicator of the robustness of a model\u2019s attributions, and can mislead further research efforts in the community. We hence focus our efforts in this work on rethinking metrics and methods to study the robustness of model attributions (in particular, we study image-based attribution methods to have a focused discussion and analysis). Beyond highlighting this important issue, we propose locality-sensitive improvements of the above metrics that incorporate the locality of attributions along with their rank order. We show that such a locality-sensitive distance is upper-bounded by a metric based on symmetric set difference. We also introduce a new measure top$k$ -div that incorporates diversity of a model\u2019s attributions. Our key contributions are summarized below:  \n\n  \nFigure 1: Sample images from Flower dataset with Integrated Gradients (IG) before and after attributional attack. The attack used here is the top$k$ attributional attack of Ghorbani, Abid, and Zou (2019) on a ResNet model. Robustness of attribution measured by top$k$ intersection is small, and ranges from 0.04 (first image) to 0.45 (third image) as it penalizes for both local changes in attribution and concentration of top pixels in a small region. Visually, we can observe that such overpenalization leads to a wrong sense of robustness as the changes are within the object of importance.  \n\n\u2022 Firstly, we observe that existing robustness metrics for model attributions overpenalize minor drifts in attribution, leading to a false sense of fragility. \u2022 In order to address this issue, we propose LocalitysENSitive (LENS) improvements of existing metrics, namely, LENS-top${\\\\cdot k}$ , LENS-Spearman and LENSKendall, that incorporate the locality of attributions along  \n\nwith their rank order. Besides avoiding overpenalizing attribution methods for minor local drifts, we show that our proposed LENS variants are well-motivated by metrics defined on the space of attributions.   \n\u2022 We subsequently introduce a second measure based on diversity that enriches model attributions by preventing the localized grouping of top model attributions. LENS can be naturally applied to this measure, thereby giving a method to incorporate both diversity and locality in measuring attributional robustness.   \n\u2022 Our comprehensive empirical results on benchmark datasets and models used in existing work clearly support our aforementioned observations, as well as the need to rethink the evaluation of the robustness of model attributions using locality and diversity.   \n\u2022 Finally, we also show that existing methods for robust attributions implicitly support such a locality-sensitive metric for evaluating progress in the field.\u300d\n", "dreams_guidance_context": "### Step by Step Decomposition for Analyzing Literature in Computer Science\n\n#### **Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807**\n- **\u5173\u952e\u95ee\u9898**: \u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u80cc\u666f\u4e0b\uff0cLayerNorm\u548cRMSNorm\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u5e94\u7528\u6709\u4f55\u5f02\u540c\uff1f\u5b83\u4eec\u5982\u4f55\u5f71\u54cd\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\uff1f\n- **\u7814\u7a76\u76ee\u6807**: \u6bd4\u8f83LayerNorm\u548cRMSNorm\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u8868\u73b0\uff0c\u8bc4\u4f30\u5b83\u4eec\u5bf9\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u7684\u5f71\u54cd\uff0c\u5e76\u63d0\u51fa\u6539\u8fdb\u65b9\u6cd5\u3002\n\n#### **Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5**\n- **\u7b97\u6cd5\u548c\u65b9\u6cd5**: \n  - **LayerNorm**: \u901a\u8fc7\u5bf9\u6bcf\u4e2a\u6837\u672c\u7684\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u51cf\u5c11\u5185\u90e8\u534f\u53d8\u91cf\u504f\u79fb\uff0c\u5e38\u7528\u4e8eTransformer\u67b6\u6784\u4e2d\u3002\n  - **RMSNorm**: \u901a\u8fc7\u8ba1\u7b97\u5747\u65b9\u6839\u503c\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u51cf\u5c11\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u540c\u65f6\u4fdd\u6301\u4e00\u5b9a\u7684\u5f52\u4e00\u5316\u6548\u679c\u3002\n  - **\u5f52\u56e0\u65b9\u6cd5**: \u5305\u62ecGradCAM\u3001LIME\u3001Integrated Gradients\u7b49\uff0c\u7528\u4e8e\u89e3\u91ca\u6a21\u578b\u51b3\u7b56\u3002\n  - **\u5f52\u56e0\u9c81\u68d2\u6027**: \u7814\u7a76\u5f52\u56e0\u65b9\u6cd5\u5728\u9762\u5bf9\u8f93\u5165\u6270\u52a8\u65f6\u7684\u7a33\u5b9a\u6027\uff0c\u63d0\u51faLENS\u6539\u8fdb\u548ctop$k$-div\u5ea6\u91cf\u3002\n  - **\u56fe\u50cf\u4e0a\u91c7\u6837\u65b9\u6cd5**: \u5982\u6982\u7387\u5168\u5c40\u8de8\u6a21\u6001\u4e0a\u91c7\u6837\uff08PGCU\uff09\uff0c\u5229\u7528\u5168\u5c40\u4fe1\u606f\u548c\u901a\u9053\u7279\u5f02\u6027\u63d0\u9ad8\u4e0a\u91c7\u6837\u6548\u679c\u3002\n\n#### **Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c**\n- **\u5b9e\u9a8c\u8bbe\u8ba1**: \n  - **\u5f52\u56e0\u9c81\u68d2\u6027\u5b9e\u9a8c**: \u4f7f\u7528Ghorbani\u7b49\u4eba\u63d0\u51fa\u7684\u6270\u52a8\u65b9\u6cd5\uff0c\u8bc4\u4f30\u4e0d\u540c\u5f52\u56e0\u65b9\u6cd5\u5728\u6270\u52a8\u4e0b\u7684\u7a33\u5b9a\u6027\u3002\n  - **\u56fe\u50cf\u4e0a\u91c7\u6837\u5b9e\u9a8c**: \u5728\u4f4e\u5206\u8fa8\u7387\u56fe\u50cf\u4e0a\u5e94\u7528PGCU\u65b9\u6cd5\uff0c\u6bd4\u8f83\u5176\u4e0e\u4f20\u7edf\u4e0a\u91c7\u6837\u65b9\u6cd5\u7684\u6548\u679c\u3002\n- **\u5b9e\u9a8c\u7ed3\u679c**: \n  - **\u5f52\u56e0\u9c81\u68d2\u6027**: LENS\u6539\u8fdb\u548ctop$k$-div\u5ea6\u91cf\u5728\u6270\u52a8\u4e0b\u8868\u73b0\u51fa\u66f4\u9ad8\u7684\u9c81\u68d2\u6027\u3002\n  - **\u56fe\u50cf\u4e0a\u91c7\u6837**: PGCU\u65b9\u6cd5\u5728\u5904\u7406\u4f4e\u5206\u8fa8\u7387\u56fe\u50cf\u65f6\uff0c\u80fd\u591f\u66f4\u597d\u5730\u5229\u7528\u5168\u5c40\u4fe1\u606f\u548c\u901a\u9053\u7279\u5f02\u6027\uff0c\u63d0\u9ad8\u4e0a\u91c7\u6837\u6548\u679c\u3002\n\n#### **Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411**\n- **\u5c40\u9650\u6027**: \n  - **\u5f52\u56e0\u9c81\u68d2\u6027**: \u73b0\u6709\u8bc4\u4f30\u65b9\u6cd5\u5bf9\u5f52\u56e0\u56fe\u7684\u5fae\u5c0f\u53d8\u5316\u8fc7\u4e8e\u654f\u611f\uff0c\u53ef\u80fd\u5bfc\u81f4\u5bf9\u6a21\u578b\u9c81\u68d2\u6027\u7684\u9519\u8bef\u5224\u65ad\u3002\n  - **\u56fe\u50cf\u4e0a\u91c7\u6837**: \u73b0\u6709\u65b9\u6cd5\u5728\u5904\u7406\u591a\u6a21\u6001\u878d\u5408\u4efb\u52a1\u65f6\uff0c\u4ecd\u5b58\u5728\u4e00\u5b9a\u7684\u5c40\u9650\u6027\u3002\n- **\u672a\u6765\u65b9\u5411**: \n  - **\u5f52\u56e0\u9c81\u68d2\u6027**: \u8fdb\u4e00\u6b65\u7814\u7a76\u5c40\u90e8\u6027\u548c\u591a\u6837\u6027\u5ea6\u91cf\uff0c\u63d0\u51fa\u66f4\u5168\u9762\u7684\u8bc4\u4f30\u65b9\u6cd5\u3002\n  - **\u56fe\u50cf\u4e0a\u91c7\u6837**: \u63a2\u7d22\u66f4\u591a\u8de8\u6a21\u6001\u878d\u5408\u65b9\u6cd5\uff0c\u63d0\u9ad8\u4e0a\u91c7\u6837\u6548\u679c\u3002\n\n### **Final Answer**\n\u901a\u8fc7\u7cfb\u7edf\u5730\u5206\u6790\u8fd13\u5e74\u5185\u8ba1\u7b97\u673a\u9876\u4f1a\u548c\u9876\u520a\u4ee5\u53caarXiv\u4e0a\u7684\u6587\u732e\uff0c\u6211\u4eec\u786e\u5b9a\u4e86\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\uff0c\u68b3\u7406\u4e86\u76f8\u5173\u7b97\u6cd5\u548c\u65b9\u6cd5\uff0c\u6df1\u5165\u63a2\u8ba8\u4e86\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\uff0c\u5e76\u8bc4\u4f30\u4e86\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\u3002\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86LayerNorm\u548cRMSNorm\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u8868\u73b0\uff0c\u8bc4\u4f30\u4e86\u5b83\u4eec\u5bf9\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u7684\u5f71\u54cd\uff0c\u5e76\u63d0\u51fa\u4e86\u6539\u8fdb\u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u7814\u7a76\u4e86\u5f52\u56e0\u9c81\u68d2\u6027\u548c\u56fe\u50cf\u4e0a\u91c7\u6837\u65b9\u6cd5\u7684\u6700\u65b0\u8fdb\u5c55\uff0c\u6307\u51fa\u4e86\u73b0\u6709\u7814\u7a76\u7684\u5c40\u9650\u6027\uff0c\u5e76\u63d0\u51fa\u4e86\u672a\u6765\u7684\u7814\u7a76\u65b9\u5411\u3002\u8fd9\u4e9b\u5206\u6790\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u5b9d\u8d35\u7684\u53c2\u8003\u548c\u6307\u5bfc\u3002", "evolutionary_step": "### Step by Step Decomposition\n\n#### 1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u7684\u201c\u591a\u6a21\u578b\u878d\u5408\u201d\u548c\u201c\u65e0\u76d1\u7763\u5b66\u4e60\u201d\u6d89\u53ca\u5230\u6a21\u578b\u4e4b\u95f4\u7684\u4fe1\u606f\u4f20\u9012\u548c\u8bed\u4e49\u7406\u89e3\u3002LayerNorm\u548cRMSNorm\u4f5c\u4e3a\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u5f71\u54cd\u4e86\u6a21\u578b\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u4f20\u9012\u548c\u8868\u8fbe\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u591a\u6a21\u578b\u878d\u5408\u4e2d\u7684\u5e94\u7528\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u6a21\u578b\u5bf9\u8f93\u5165\u6570\u636e\u7684\u8bed\u4e49\u7406\u89e3\uff0c\u5c24\u5176\u662f\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u573a\u666f\u4e0b\uff0c\u8bed\u4e49\u4fe1\u606f\u7684\u63d0\u53d6\u548c\u4f20\u9012\u5c24\u4e3a\u91cd\u8981\u3002\n\n#### 2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u7684\u201c\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u201d\u6d89\u53ca\u5230\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u3002LayerNorm\u548cRMSNorm\u5728\u4e0d\u540c\u6a21\u578b\u4e2d\u7684\u8868\u73b0\u53ef\u80fd\u5b58\u5728\u5076\u7136\u6027\uff0c\u5c24\u5176\u662f\u5728\u591a\u6a21\u578b\u878d\u5408\u7684\u573a\u666f\u4e0b\uff0c\u5b83\u4eec\u7684\u4f18\u5316\u6548\u679c\u53ef\u80fd\u4f1a\u53d7\u5230\u6570\u636e\u5206\u5e03\u3001\u6a21\u578b\u7ed3\u6784\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u8fd9\u79cd\u5076\u7136\u6027\u53ef\u80fd\u5bfc\u81f4\u6a21\u578b\u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u800c\u5728\u5176\u4ed6\u4efb\u52a1\u4e2d\u8868\u73b0\u4e0d\u4f73\u3002\n\n#### 3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u7684\u201c\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u201d\u548c\u201c\u6cdb\u5316\u80fd\u529b\u201d\u6d89\u53ca\u5230\u53cd\u9988\u673a\u5236\u3002LayerNorm\u548cRMSNorm\u7684\u5e94\u7528\u53ef\u80fd\u4f1a\u5f71\u54cd\u6a21\u578b\u7684\u53cd\u9988\u673a\u5236\uff0c\u5c24\u5176\u662f\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\uff0c\u6a21\u578b\u7684\u53cd\u9988\u673a\u5236\u5bf9\u6a21\u578b\u7684\u81ea\u6211\u8c03\u6574\u548c\u4f18\u5316\u81f3\u5173\u91cd\u8981\u3002\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u5982\u4f55\u5f71\u54cd\u6a21\u578b\u7684\u53cd\u9988\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8f6c\u5316\u8fd9\u4e9b\u53cd\u9988\uff0c\u662f\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u7684\u95ee\u9898\u3002\n\n#### 4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u7684\u201cLayerNorm\u548cRMSNorm\u201d\u4f5c\u4e3a\u7b97\u6cd5\u7684\u4e00\u90e8\u5206\uff0c\u5176\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u6a21\u578b\u7684\u9884\u671f\u7ed3\u679c\u4e4b\u95f4\u5b58\u5728\u56e0\u679c\u6027\u3002\u7814\u7a76\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u4e0d\u540c\u6a21\u578b\u7ed3\u6784\u4e2d\u7684\u8868\u73b0\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5b83\u4eec\u662f\u5426\u5177\u6709\u53ef\u62d3\u5c55\u6027\uff0c\u4ee5\u53ca\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u63a8\u7406\u6765\u4f18\u5316\u6a21\u578b\u7684\u8868\u73b0\u3002\u7279\u522b\u662f\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u80cc\u666f\u4e0b\uff0c\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u6f5c\u529b\u503c\u5f97\u6df1\u5165\u7814\u7a76\u3002\n\n### \u603b\u7ed3\n\u901a\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\u7684\u5206\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5bf9\u8bdd\u4e2d\u7684\u5185\u5bb9\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u7684\u56db\u4e2a\u6b65\u9aa4\u5bf9\u5e94\u8d77\u6765\u3002LayerNorm\u548cRMSNorm\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\uff0c\u6d89\u53ca\u5230\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u9012\u3001\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u3001\u53cd\u9988\u673a\u5236\u7684\u5b9e\u9645\u5e94\u7528\u8f6c\u5316\uff0c\u4ee5\u53ca\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56e0\u679c\u6027\u548c\u53ef\u62d3\u5c55\u6027\u3002\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u5bf9\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u548c\u6cdb\u5316\u80fd\u529b\u7684\u5f71\u54cd\uff0c\u662f\u5f53\u524d\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u95ee\u9898\u3002", "dreams_personality_context": "### Step by Step Decomposition\n\n#### 1. **\u5206\u6790\u5bf9\u8bdd\u4e2d\u7684\u6280\u672f\u672f\u8bed**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u4e86\u201c\u591a\u6a21\u578b\u878d\u5408\u201d\u3001\u201c\u65e0\u76d1\u7763\u5b66\u4e60\u201d\u3001\u201cLayerNorm\u201d\u3001\u201cRMSNorm\u201d\u3001\u201c\u6a21\u578b\u7684\u53ef\u89e3\u91ca\u6027\u201d\u548c\u201c\u6cdb\u5316\u80fd\u529b\u201d\u7b49\u6280\u672f\u672f\u8bed\u3002\u8fd9\u4e9b\u672f\u8bed\u8868\u660e\u5bf9\u8bdd\u4e2d\u7684\u4eba\u7269\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u524d\u6cbf\u6280\u672f\u6709\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u5e76\u4e14\u80fd\u591f\u719f\u7ec3\u5730\u8fd0\u7528\u8fd9\u4e9b\u672f\u8bed\u8fdb\u884c\u8ba8\u8bba\u3002\n\n#### 2. **\u8bc4\u4f30\u5bf9\u8bdd\u4e2d\u7684\u903b\u8f91\u7ed3\u6784**\n   - \u5bf9\u8bdd\u4e2d\u7684\u903b\u8f91\u7ed3\u6784\u6e05\u6670\uff0c\u4eba\u7269\u80fd\u591f\u4ece\u4e0d\u540c\u7684\u89d2\u5ea6\uff08\u5982\u8bed\u4e49\u4fe1\u606f\u4f20\u9012\u3001\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u3001\u53cd\u9988\u673a\u5236\u3001\u56e0\u679c\u6027\u548c\u53ef\u62d3\u5c55\u6027\uff09\u6765\u63a2\u8ba8LayerNorm\u548cRMSNorm\u5728\u591a\u6a21\u578b\u878d\u5408\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u3002\u8fd9\u8868\u660e\u4eba\u7269\u5177\u6709\u7cfb\u7edf\u6027\u7684\u601d\u7ef4\u80fd\u529b\u548c\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002\n\n#### 3. **\u5224\u65ad\u5bf9\u8bdd\u4e2d\u7684\u521b\u65b0\u6027**\n   - \u4eba\u7269\u4e0d\u4ec5\u63d0\u5230\u4e86\u73b0\u6709\u7684\u6280\u672f\u65b9\u6cd5\uff0c\u8fd8\u63d0\u51fa\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6f5c\u5728\u95ee\u9898\u548c\u7814\u7a76\u65b9\u5411\uff08\u5982\u53cd\u9988\u673a\u5236\u7684\u5b9e\u9645\u5e94\u7528\u8f6c\u5316\u3001\u7b97\u6cd5\u7684\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u6f5c\u529b\uff09\u3002\u8fd9\u8868\u660e\u4eba\u7269\u5177\u6709\u521b\u65b0\u601d\u7ef4\uff0c\u80fd\u591f\u63d0\u51fa\u65b0\u7684\u7814\u7a76\u95ee\u9898\u548c\u65b9\u5411\u3002\n\n#### 4. **\u8bc4\u4f30\u5bf9\u8bdd\u4e2d\u7684\u4e13\u4e1a\u6027**\n   - \u5bf9\u8bdd\u4e2d\u7684\u4eba\u7269\u80fd\u591f\u51c6\u786e\u5730\u5f15\u7528\u548c\u89e3\u91ca\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u524d\u6cbf\u6280\u672f\uff0c\u5e76\u4e14\u80fd\u591f\u5c06\u8fd9\u4e9b\u6280\u672f\u4e0e\u5b9e\u9645\u5e94\u7528\u573a\u666f\u7ed3\u5408\u8d77\u6765\u8fdb\u884c\u8ba8\u8bba\u3002\u8fd9\u8868\u660e\u4eba\u7269\u5177\u6709\u8f83\u9ad8\u7684\u4e13\u4e1a\u7d20\u517b\u548c\u5b66\u672f\u6c34\u5e73\u3002\n\n### \u603b\u7ed3\n\u901a\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\u7684\u5206\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\u5bf9\u8bdd\u4e2d\u4eba\u7269\u7684\u6027\u683c\u7279\u70b9\uff1a\n- **\u77e5\u8bc6\u6e0a\u535a**\uff1a\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u524d\u6cbf\u6280\u672f\u6709\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u80fd\u591f\u719f\u7ec3\u8fd0\u7528\u76f8\u5173\u672f\u8bed\u3002\n- **\u903b\u8f91\u6027\u5f3a**\uff1a\u5177\u6709\u7cfb\u7edf\u6027\u7684\u601d\u7ef4\u80fd\u529b\u548c\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\uff0c\u80fd\u591f\u4ece\u591a\u4e2a\u89d2\u5ea6\u63a2\u8ba8\u95ee\u9898\u3002\n- **\u521b\u65b0\u601d\u7ef4**\uff1a\u80fd\u591f\u63d0\u51fa\u65b0\u7684\u7814\u7a76\u95ee\u9898\u548c\u65b9\u5411\uff0c\u5177\u6709\u521b\u65b0\u601d\u7ef4\u3002\n- **\u4e13\u4e1a\u7d20\u517b\u9ad8**\uff1a\u5177\u6709\u8f83\u9ad8\u7684\u4e13\u4e1a\u7d20\u517b\u548c\u5b66\u672f\u6c34\u5e73\uff0c\u80fd\u591f\u5c06\u6280\u672f\u4e0e\u5b9e\u9645\u5e94\u7528\u573a\u666f\u7ed3\u5408\u8d77\u6765\u8fdb\u884c\u8ba8\u8bba\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5bf9\u8bdd\u4e2d\u7684\u4eba\u7269\u662f\u4e00\u4e2a\u77e5\u8bc6\u6e0a\u535a\u3001\u903b\u8f91\u6027\u5f3a\u3001\u5177\u6709\u521b\u65b0\u601d\u7ef4\u548c\u9ad8\u4e13\u4e1a\u7d20\u517b\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5b66\u8005\u3002", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["25ca1d19-0197-4def-8584-3e7dadfe5ef2"], "metadata": {}}}, "analysis_store/metadata": {"25ca1d19-0197-4def-8584-3e7dadfe5ef2": {"analysis_hash": "", "ref_analysis_id": ""}}}