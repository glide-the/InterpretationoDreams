{"analysis_store/data": {"7c19e4a0-168c-43fa-9569-b202c29fc02d": {"__data__": {"id_": "7c19e4a0-168c-43fa-9569-b202c29fc02d", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u7684\u63a5\u8fd1\u5ea6\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\uff08\u5305\u62ec\u60c5\u611f\u56e0\u7d20\u3001\u4ea4\u53c9\u70b9\u7b49\uff09\u4ee5\u53ca\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u4e4b\u95f4\u7684\u7d27\u5bc6\u8054\u7cfb\u3002 ", "scene_monologue_context": "\u4eca\u5929\u6211\u6df1\u5165\u7814\u7a76\u4e86\u5173\u4e8e\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u4e3b\u8981\u56f4\u7ed5\u5982\u4f55\u63d0\u5347LayerNorm\u548cRMSNorm\u5bf9\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u878d\u5408\u7684\u9002\u7528\u6027\u5c55\u5f00\u63a2\u8ba8\u3002\n\n\u5148\u662f\u4ed4\u7ec6\u7814\u8bfb\u4e86\u5c06transformer\u7f51\u7edc\u4e2d\u6bcf\u4e00\u4e2aLayerNorm\u8f6c\u6362\u4e3aRMSNorm\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u5305\u62ec\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u50cf\u9009\u62e9\u5408\u9002\u7684\u6b63\u4ea4\u77e9\u9635\\(Q\\)\u6765\u4fee\u6539\u6a21\u578b\uff0c\u4ee5\u53ca\u5728\u4e0d\u540c\u5757\u5e94\u7528\u4e0d\u540c\u6b63\u4ea4\u77e9\u9635\\(Q_{l}\\)\u7684\u539f\u56e0\u548c\u8bc1\u660e\u3002\u8fd8\u4e86\u89e3\u5230\u901a\u8fc7PCA\u8ba1\u7b97\u8fd9\u4e9b\u6b63\u4ea4\u77e9\u9635\u7684\u5177\u4f53\u65b9\u6cd5\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6821\u51c6\u6570\u636e\u96c6\uff0c\u8ba9\u5176\u901a\u8fc7\u6a21\u578b\uff08\u5728\u5c06LayerNorm\u64cd\u4f5c\u8f6c\u6362\u4e3aRMSNorm\u4e4b\u540e\uff09\uff0c\u7136\u540e\u63d0\u53d6\u5c42\u7684\u6b63\u4ea4\u77e9\u9635\u3002\n\n\u63a5\u7740\u5173\u6ce8\u5230\u5207\u7247\uff08SLICING\uff09\u90e8\u5206\uff0c\u660e\u767d\u4e86\u4e3b\u6210\u5206\u5206\u6790\uff08PCA\uff09\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7684\u76ee\u6807\u548c\u4f5c\u7528\uff0c\u4ee5\u53ca\u5982\u4f55\u5bf9\u4fe1\u53f7\u77e9\u9635\u5e94\u7528PCA\uff0c\u901a\u8fc7\u5220\u9664\u6743\u91cd\u77e9\u9635\\(W_{in}\\)\u3001\\(W_{out}\\)\u548c\\(W_{embd}\\)\u7684\u67d0\u4e9b\u884c\u548c\u5217\u6765\u5b9e\u73b0\u5bf9\u6a21\u578b\u7684\u5207\u7247\u64cd\u4f5c\uff0c\u867d\u7136\u8fd9\u4f1a\u589e\u52a0\u4e00\u4e9b\u8ba1\u7b97\u5f00\u9500\uff0c\u4f46\u6574\u4f53\u4e0a\u80fd\u5b9e\u73b0\u52a0\u901f\u3002\n\n\u5728\u5b9e\u9a8c\u9a8c\u8bc1\u73af\u8282\uff0c\u770b\u5230\u4e86\u4f7f\u7528HuggingFace Transformers\u548cPyTorch\u5b9e\u73b0\u4ee3\u7801\u7684\u5177\u4f53\u8bbe\u7f6e\uff0c\u8ba1\u7b97\\(Q\\)\u5728\u4e0d\u540cGPU\u4e0a\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u4f7f\u7528\u4e0d\u540c\u6821\u51c6\u96c6\uff08\u5982WikiText - 2\u8bad\u7ec3\u6570\u636e\u96c6\u548cAlpaca\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\uff09\u8fdb\u884c\u5b9e\u9a8c\u7684\u60c5\u51b5\u3002\u8fd8\u4e86\u89e3\u5230\u8bc4\u4f30\u5b9e\u9a8c\u6240\u6d89\u53ca\u7684\u6a21\u578b\u3001\u4efb\u52a1\u548cGPU\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u57fa\u7ebf\uff08\u5982SparseGPT\uff09\u5bf9\u6bd4\u7684\u7ed3\u679c\u3002\n\n\u53e6\u5916\uff0c\u6df1\u5165\u63a2\u8ba8\u4e86LayerNorm\u8c03\u6574\u80cc\u540e\u7684\u76f4\u89c9\uff0c\u4ece\u9886\u57df\u9002\u5e94\u3001\u8868\u8fbe\u80fd\u529b\u548c\u68af\u5ea6\u65b9\u5dee\u4e09\u4e2a\u89d2\u5ea6\u8fdb\u884c\u5206\u6790\u3002\u901a\u8fc7\u5b9e\u9a8c\u6570\u636e\u770b\u5230\u4e86\u5728\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u4e0a\u4e0d\u540c\u6a21\u578b\uff08\u5982MM - V1CUNA - 7B\u3001MM - LLAMA2 - 7B\u7b49\uff09\u5728\u5fae\u8c03\uff08Finetune\uff09\u548cLayerNorm\u8c03\u6574\uff08LayerNorm\uff09\u4e0d\u540c\u8bbe\u7f6e\u4e0b\u7684\u6027\u80fd\u8868\u73b0\u3002\u8fd8\u4e86\u89e3\u5230\u89c6\u89c9 - \u8bed\u8a00\u8fde\u63a5\u5668\uff08Vision - Language Connector\uff09\u5728\u5c06LLM\u9002\u5e94\u591a\u6a21\u6001\u9886\u57df\u4e2d\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u5207\u6362\u89c6\u89c9\u7279\u5f81\uff08\u4eceCLIP\u7684ViT\u7f16\u7801\u5668\u5207\u6362\u5230\u5728ImageNet\u4e0a\u9884\u8bad\u7ec3\u7684ViT\u6a21\u578b\uff09\u540e\uff0cLayerNorm\u8c03\u6574\u548c\u5fae\u8c03\u5728\u6027\u80fd\u4e0a\u7684\u5bf9\u6bd4\u60c5\u51b5\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8ba1\u7b97\u5c42\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff0c\u53d1\u73b0LayerNorm\u8c03\u6574\u540e\u7684\u6a21\u578b\u5728\u8868\u8fbe\u80fd\u529b\u4e0a\u66f4\u5177\u4f18\u52bf\uff0c\u5404\u5c42\u4e4b\u95f4\u7684\u533a\u522b\u66f4\u660e\u663e\uff0c\u6cdb\u5316\u80fd\u529b\u66f4\u5f3a\u3002\n\n\u603b\u4e4b\uff0c\u4eca\u5929\u5bf9\u8fd9\u4e9b\u590d\u6742\u7684\u6a21\u578b\u8c03\u6574\u548c\u5b9e\u9a8c\u5206\u6790\u8fdb\u884c\u4e86\u5168\u9762\u6df1\u5165\u7684\u5b66\u4e60\uff0c\u6536\u83b7\u9887\u4e30\uff0c\u5bf9\u8ba1\u7b97\u6a21\u578b\u5728\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\u7684\u4f18\u5316\u6709\u4e86\u66f4\u6e05\u6670\u7684\u8ba4\u8bc6\u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "4aa00861-de5d-4346-a6dd-80ca6b0e7aa7:\u300c\u63a2\u8ba8\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u300d\n4aa00861-de5d-4346-a6dd-80ca6b0e7aa7:\u300c\u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\uff0c\u4e3a\u4e86\u63d0\u5347LayerNorm\u548cRMSNorm\u5bf9\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u878d\u5408\u7684\u9002\u7528\u6027\uff0c\u53ef\u4ee5\u91c7\u53d6\u54ea\u4e9b\u6539\u8fdb\u63aa\u65bd\uff1f \u300d\n4aa00861-de5d-4346-a6dd-80ca6b0e7aa7:\u300cref_ids: 454846008144214678, chunk_ids: 3, Score: 0.4512, Text: # 3.3 A TRANSFORMATION PER BLOCK\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any $\\\\mathbf{Q}$ to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, $\\\\mathbf{Q}_{\\\\ell}$ .  \n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem 1 ,  \n\n  \nFigure 3: Converting a transformer network from LayerNorm to RMSNorm: the scale matrix diag $(\\\\alpha)$ is absorbed into the subsequent matrix $\\\\mathbf{W}_{\\\\mathrm{in}}$ . Figure shows the block in combined colors. We use $(\\\\alpha)$ for brevity. The mean-subtraction matrix $\\\\mathbf{M}$ is applied to each matrix $\\\\mathbf{W}_{\\\\mathrm{out}}$ . Layernorm becomes RMSNorm, up to a constant $\\\\bar{\\\\sqrt{D}}$ (not shown). Here, the scaling $(\\\\alpha^{\\\\prime})$ comes from the previous block.  \n\n  \nFigure 4: With the network converted to RMSNorm (see Figure 3 ), we apply the computational-invariance idea. The input weight matrices $\\\\mathrm{diag}(\\\\alpha)\\\\mathbf{W}_{\\\\mathrm{in}}$ are pre-multiplied by $\\\\mathbf{Q}^{\\\\top}$ . The output matrices $\\\\mathbf{W}_{\\\\mathrm{out}}\\\\mathbf{M}$ are post-multiplied by $\\\\mathbf{Q}$ . In the skip-connection, a new linear layer is added $\\\\mathbf{Q}_{\\\\ell}^{\\\\top}\\\\mathbf{Q}_{\\\\ell+1}$ . After these modifications, the matrices can be sliced (hatched areas).  \n\nwith the exception of line 5 of Algorithm 1 . Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation applied to different blocks with the additional linear operation in the residual connection. Unlike the $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212to the residual. Figure 4 shows how different rotations can be modifications to the weight matrices, these additional operations cannot be pre-computed and add a small $(D\\\\times D)$ overhead to the model. Nonetheless, they are needed to allow slicing the model (Section 3.4 ) and we see real speedup overall (Section 4 ).  \n\nTo compute the matrices $\\\\mathbf{Q}_{\\\\ell}$ , we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if $\\\\mathbf{X}_{\\\\ell,i}$ is the output of the $\\\\ell^{\\\\mathrm{th}}$ RMSNorm block for the $i^{\\\\mathrm{th}}$ sequence in the calibration dataset, we compute  \n\n$$\n\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\n$$  \n\nand set $\\\\mathbf{Q}_{\\\\ell}$ to the be the eigenvectors of $\\\\mathbf{C}_{\\\\ell}$ , sorted by decreasing eigenvalues.\n\n# 3.4 SLICING\nThe goal of Principal Component Analysis is usually to take a data matrix $\\\\mathbf{X}$ and compute a lower dimensional representation $\\\\mathbf{Z}$ , and an approximate reconstruction $\\\\tilde{\\\\mathbf{X}}$ :  \n\n$$\n\\\\mathbf{Z}=\\\\mathbf{X}\\\\mathbf{Q}\\\\mathbf{D}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}=\\\\mathbf{Z}\\\\mathbf{D}^{\\\\top}\\\\mathbf{Q}^{\\\\top}\\\\,.\n$$  \n\nwhere $\\\\mathbf{Q}$ is the ectors of ${\\\\bf X}^{\\\\top}{\\\\bf X}$ , and $\\\\mathbf{D}$ is a $D\\\\times D_{\\\\mathrm{small}}$ deletion matrix (containing $D_{\\\\mathrm{small}}$ The reconstruction is columns of the $D\\\\times D$ \u00d7$L_{2}$ identity matrix), which removes some of the columns of the matrix to the left. optimal, in the sense that QD is a linear mapping that minimizes $\\\\lVert\\\\mathbf{X}-\\\\tilde{\\\\mathbf{X}}\\\\rVert^{2}$ .  \n\nWhen we apply PCA to the signal matrix $\\\\mathbf{X}$ bween blocks, we never materialize the $N\\\\times D$ signal matrix, but we apply the deletion matrix Dto the operations preceding and succeeding the construction of that matrix, which have already been multiplied by $\\\\mathbf{Q}$ in the above. We delete rows of $\\\\mathbf{W}_{\\\\mathrm{in}}$ that we have inserted into the residual connection (see Figure and columns of $\\\\mathbf{W}_{\\\\mathrm{out}}$ and $\\\\mathbf{W}_{\\\\mathrm{embd}}$ . We also delete both rows 4 ). and columns of the matrix $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212\n\n# 4 EXPERIMENTAL VALIDATION\nSetup We use HuggingFace Transformers ( Wolf et al. ,2019 ) to implement our code with PyTorch (Paszke et al. ,2019 ). The computation of $\\\\mathbf{Q}$ is performed on a single H100 GPU with 80GB of memory, taking approximately 3.5 hours to complete for the L LAMA -2 70B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix. We find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix A.2 .  \n\nWe experiment with two different calibration sets: 1024 samples from the WikiText-2 training dataset ( Merity et al. ,2016 ) and 5000 samples from the Alpaca training dataset ( Taori et al. ,2023 ). Sequence lengths are chosen as the maximum of each language model. An ablation study on the calibration set size and sequence length is presented in Appendix A.3 .  \n\nModels, Tasks, and GPUs We evaluate all our experiments on OPT ( Zhang et al. ,2022 ), L LAMA -2 (Touvron et al. ,2023 ) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller L LAMA -2 models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section 4.1 ). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.  \n\nBaseline Setup We initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT ( Frantar & Alistarh ,2023 ) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup ( Mishra et al. ,2021 ).\u300d\n4aa00861-de5d-4346-a6dd-80ca6b0e7aa7:\u300cref_ids: 454895409734360760, chunk_ids: 3, Score: 0.4277, Text: # 5 I NTUITIONS BEHIND LAYER NORM TUNING\nIn this section, driven by the empirical success of LayerNorm tuning, we explore the intuitions behind LayerNorm from three perspectives, domain adaptation, expressive power, and gradient variance.  \n\nTable 3: Model performance on different data types. Methods with 80K and Conv.20K suffix are tuned on the full 80K data and the 20K conversational data, respectively.   \n\n\n<html><body><table><tr><td>Method</td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td colspan=\"6\">MM-V1CUNA-7B</td></tr><tr><td>Finetune-80K</td><td>625.2/270.7</td><td>15.40</td><td>67.50</td><td>34.61</td><td>73.8/76.5/66.5</td></tr><tr><td>LayerNorm-80K</td><td>723.2/253.2</td><td>17.06</td><td>80.89</td><td>48.01</td><td>76.1/81.1/70.8</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>777.1/231.4</td><td>15.39</td><td>67.30</td><td>40.33</td><td>75.2/79.2/68.8</td></tr><tr><td colspan=\"6\">MM-LLAMA2-7B</td></tr><tr><td>Finetune-80K</td><td>661.3/237.1</td><td>16.09</td><td>65.08</td><td>31.64</td><td>56.3/65.0/55.4</td></tr><tr><td>LayerNorm-80K</td><td>583.2/200.7</td><td>16.78</td><td>88.85</td><td>49.24</td><td>66.6/68.5/64.9</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>376.2/157.5</td><td>16.19</td><td>86.80</td><td>44.88</td><td>50.5/50.7/50.3</td></tr><tr><td colspan=\"6\">MM-LLAMA2-CHAT-7B</td></tr><tr><td>Finetune-80K</td><td>805.4/234.6</td><td>15.29</td><td>57.40</td><td>26.70</td><td>60.3/69.8/57.9</td></tr><tr><td>LayerNorm-80K</td><td>651.3/219.3</td><td>16.60</td><td>75.34</td><td>43.75</td><td>71.3/72.4/67.8</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>482.9/172.1</td><td>13.88</td><td>66.85</td><td>41.95</td><td>62.7/71.7/61.3</td></tr><tr><td colspan=\"6\">MM-LLAMA2-13B</td></tr><tr><td>Finetune-80K</td><td>402.3/199.3</td><td>18.33</td><td>73.88</td><td>45.33</td><td>51.6/51.1/52.2</td></tr><tr><td>LayerNorm-80K</td><td>526.0/177.5</td><td>15.31</td><td>82.92</td><td>48.42</td><td>60.0/69.1/58.9</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>646.0/242.9</td><td>16.01</td><td>76.50</td><td>44.86</td><td>70.0/76.9/68.6</td></tr><tr><td colspan=\"6\">MM-LLAMA2-CHAT-13B</td></tr><tr><td>Finetune-80K</td><td>623.3/221.4</td><td>15.17</td><td>64.19</td><td>41.82</td><td>67.6/64.8/64.5</td></tr><tr><td>LayerNorm-80K</td><td>929.3/254.3</td><td>16.10</td><td>74.96</td><td>42.79</td><td>78.9/83.9/74.3</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>769.7/227.5</td><td>15.57</td><td>73.30</td><td>43.08</td><td>68.2/72.8/65.3</td></tr></table></body></html>  \n\nTable 4: Results of models with LayerNorm and/or vision-language Connector activated.   \n\n\n<html><body><table><tr><td>Method</td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td colspan=\"6\">MM-LLAMA2-7B</td></tr><tr><td>LayerNorm + Connector</td><td>583.2/200.7</td><td>16.78</td><td>88.85</td><td>49.24</td><td>66.6/68.5/64.9</td></tr><tr><td>Connector</td><td>311.1/105.4</td><td>12.72</td><td>60.43</td><td>35.91</td><td>67.9/73.7/66.9</td></tr><tr><td>LayerNorm</td><td>395.0/191.4</td><td>18.18</td><td>80.13</td><td>41.68</td><td>50.3/51.3/50.2</td></tr><tr><td colspan=\"6\">MM-LLAMA2-13B</td></tr><tr><td>LayerNorm + Connector</td><td>526.0/177.5</td><td>15.31</td><td>82.92</td><td>48.42</td><td>60.0/69.1/58.9</td></tr><tr><td>Connector</td><td>507.0/187.9</td><td>15.22</td><td>62.60</td><td>25.13</td><td>60.9/66.8/60.1</td></tr><tr><td>LayerNorm</td><td>405.0/188.6</td><td>16.51</td><td>70.41</td><td>39.86</td><td>50.9/52.7/51.0</td></tr></table></body></html>\n\n# 5.1 LAYER NORM TUNING A DAPTS LLM S TO MULTI -M ODAL\nInfluence of the Vision-Language Connector The vision-language connector serves as the converter to project features from the vision encoder to the LLM domain. In our previous experiments, we focused on finetuning the LLM component of the MLLMs while keeping the vision-language connector activated by default. To determine which component plays a more important role for domain adaptation of LLM to multi-modal domain, we performed an ablation study by activating the two components separately. Results are presented in table 4 , tuning LayerNorm in attention blocks without activating the vision-language connector resulted in only a $4.2\\\\%$ and $5.4\\\\%$ decrease in performance on three traditional multi-modal tasks and the MME benchmark, respectively. This decrease is significantly lower than the $15.6\\\\%$ and $9.2\\\\%$ downgrade observed when only activating the Connector on the same tasks. This observation highlights the vital role LayerNorm plays in transforming knowledge from the vision domain to language, indicating LayerNorm as a strong domain adaptor for the LLM architecture.  \n\n  \n\nFigure 3: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNorm-tuned MM-V ICUNA -7B. The average layer similarity of two models are 0.624 and 0.585, respectively.  \n\nTable 5: Results of models with LL A MA2 Finetuned/LayerNorm-tuned with ViT pre-trained on ImageNet (Deng et al. ,2009 ), which have not been aligned with the language domain.   \n\n\n<html><body><table><tr><td></td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td>Finetune-7B</td><td>406.79/182.5</td><td>15.05</td><td>47.75</td><td>18.97</td><td>50.0/51.6/50.1</td></tr><tr><td>LayerNorm-7B</td><td>301.51/127.14</td><td>15.48</td><td>66.22</td><td>31.73</td><td>50.0/50.1/50.1</td></tr><tr><td>Finetune-13B</td><td>375.41/171.79</td><td>25.38</td><td>51.26</td><td>25.96</td><td>50.3/51.1/51.0</td></tr><tr><td>LayerNorm-13B</td><td>445.98/150.0</td><td>15.59</td><td>64.63</td><td>32.17</td><td>51.2/53.0/50.8</td></tr></table></body></html>  \n\nSwitching Visual Features. We employ the ViT encoder from CLIP ( Radford et al. ,2021 ) by default in our previous experiments. CLIP ( Radford et al. ,2021 ) models are trained with image-text contrastive loss, thus its feature space is already aligned with language. Since LayerNorm has shown its effectiveness as a domain adaptor, we are interested in testing whether or not LayerNorm tuning can adapt a LLM to image features that are not pretrained to align with language. The vision encoder is switched to a ViT model that was pretrained on ImageNet (Dosovitskiy et al. ,2021 ;Deng et al. ,2009 ). Results in table 5 demonstrate that both LayerNorm and finetuning approaches can yield high performance. Interestingly, we observe that by LayerNorm tuning with ImageNet trained ViT, which has not been aligned with language, the model is able to achieve comparable performance to full parameter finetuning , i.e ., results show that LayerNorm tuning outperforms finetuning by $12.0\\\\%$ on captioning tasks, but performs slightly worse by $5.0\\\\%$ on the MME benchmark. These results again indicates the domain adaptor role of the LayerNorm , hinting the reason behind the empircal success of LayerNorm tuning. Furthermore, it is worth noting that the performance of MLLMs incorporating ViT pretrained on ImageNet is generally inferior to that of CLIP\u2019s vision encoder. This observation provides compelling evidence that, despite differences in tokenizer and training paradigm between CLIP\u2019s text encoder and LL A MA\u2019s, ViT from CLIP has the capacity to learn general patterns of language formulation during pre-training. Thus, significantly enhance MLLM abilities.\n\n# 5.2 LAYER NORM TUNING I MPROVES THE EXPRESSIVE POWER\nIt is shown in Pires et al. (2023 ) that a Transformer model incorporating anisotropic layer representation can capture a wider range of learning patterns. By computing the cosine similarities between all layers in the LLM of a finetuned MLLM, we aim to investigate whether the improved efficiency is the results of the improved expressive power. In table 6 , we present the average layer similarity of three 7B scale MLLMs, and in fig. 3 we present the visualization of per layer similarity scores of MM-V ICUNA -7B. Our analysis reveals that the transformer layers in the MLLMs with LayerNorm tuning exhibit a clear distinction from one another ( i.e ., an average $10.6\\\\%$ lower layer similarities comparing finetuning), indicating superior generalization ability and expressive power compared to finetuning. This finding sheds light on why tuning LayerNorm is effective for multi-modal LLM training. For additional visualizations, please refer to the Appendix A.2.1 .  \n\n  \nFigure 4: Gradients of the input LayerNorm in the 11th layer of the MM-V ICUNA as training proceeds. LayerNorm-tuned model has lower gradient variance than full parameter finetuning.  \n\nTable 6: Layer representation similarity of LayerNorm and finetuning methods on three 7B MLLMs.   \nLower the similarity is, the better expressive power a model possesses.  \n\n<html><body><table><tr><td>Model</td><td>LayerNorm Sim.</td><td>Finetuning Sim.</td></tr><tr><td>MM-VICUNA</td><td>0.585</td><td>0.624</td></tr><tr><td>MM-LLAMA2</td><td>0.504</td><td>0.591</td></tr><tr><td>MM-LLAMA2-CHAT</td><td>0.550</td><td>0.617</td></tr></table></body></html>\u300d\n4aa00861-de5d-4346-a6dd-80ca6b0e7aa7:\u300cref_ids: 454959902228223542, chunk_ids: 2, Score: 0.3555, Text: # TUNING LAYER NORM IN A TTENTION : T OWARDS EFFI -CIENT MULTI -M ODAL LLM F INETUNING\nBingchen Zhao\\\\* 1 Haoqin $\\\\mathbf{T}\\\\mathbf{u}^{*2}$ Chen Wei 3 Jieru Mei 3 Cihang Xie 4  \n\n\\\\*equal contribution  \n\n1 University of Edinburgh 2 University of Chinese Academy of Sciences   \n3 Johns Hopkins University 4 UC Santa Cruz\n\n# A BSTRACT\nThis paper introduces an efficient strategy to transform Large Language Models (LLMs) into Multi-Modal Large Language Models. By conceptualizing this transformation as a domain adaptation process, i.e ., transitioning from text understanding to embracing multiple modalities, we intriguingly note that, within each attention block, tuning LayerNorm suffices to yield strong performance. Moreover, when benchmarked against other tuning approaches like full parameter finetuning or LoRA, its benefits on efficiency are substantial. For example, when compared to LoRA on a 13B model scale, performance can be enhanced by an average of over $20\\\\%$ across five multi-modal tasks, and meanwhile, results in a significant reduction of trainable parameters by $41.9\\\\%$ and a decrease in GPU memory usage by $17.6\\\\%$ . On top of this LayerNorm strategy, we showcase that selectively tuning only with conversational data can improve efficiency further. Beyond these empirical outcomes, we provide a comprehensive analysis to explore the role of LayerNorm in adapting LLMs to the multi-modal domain and improving the expressive power of the model.\n\n# 1 I NTRODUCTION\nLarge Language Models (LLMs) have had many application scenarios since their debut. In particular, extending LLMs to handle multiple modalities has gathered much interest from both academia and industry. Such models, termed Multi-modal Large Language Models (MLLMs), are typically derived by finetuning a pretrained LLM on multi-modal data ( Liu et al. ,2023 ;Ye et al. ,2023 ). However, this process typically poses a substantial computational challenge ( Liu et al. ,2023 ), particularly for exceptionally large-scale models. While Su et al. (2023 ); Zhang et al. (2023 ) employ low-rank adapters (LoRA) ( Hu et al. ,2022 ) or soft prompts ( Li & Liang ,2021a ) for more parameter-efficient tuning, this often comes at the cost of compromised performance on multi-modal tasks. This challenge prompts the pivotal question: how can we make this process more efficient?  \n\nIn response to this challenge, we introduce a simple and effective strategy for MLLM finetuning: as illustrated in Figure 1 (a), within each attention block, we adjust only the weights of the LayerNorm ( Ba et al. ,2016 ). This strategy is underpinned by the understanding that the evolution from LLMs to MLLMs can be conceptualized as a domain adaptation process, i.e ., transitioning from textcentric to multi-modal understanding. Adjusting normalization layers, as suggested by prior research, emerges as a particularly effective technique in such domain shifts ( Li et al. ,2016 ). Empirically, this straightforward technique can surprisingly yield comparable or even better performance than the strong baseline of finetuning all parameters offer about $10\\\\times$ more parameter efficiency than LoRA.  \n\nBy delving deeper, we note that the process can be further simplified by designating LayerNorm as the sole trainable component within the entire model. This means, in contrast to the typical configurations depicted in Figure 1 (a)-(c), we now freeze the standardly activated elements, including the visionlanguage connector, word embedding, and the output head. We term it as LayerNorm-simple. Impressively, despite constituting a mere $0.004\\\\%$ of trainable parameters, this configuration surpasses the performance of LoRA, registering an average enhancement of $4.3\\\\%$ across five benchmarks.  \n\n  \nFigure 1: ( left ) Different tuning methods for MLLMs. Trainable components are in blue , while frozen parameters are in gray . Within the attention blocks, $(a)$ only activates LayerNorm parameters. Note that vision-language connector, word embedding, and output head paramters are by default activated for all three options. ( right ) Comparison on trainable parameters and GPU memory. Tuning LayerNorm achieves significant reductions in trainable parameters and GPU memory usages.  \n\nOn top of this LayerNorm strategy, we further improve the finetuning efficiency from the data perspective. Specifically, we assess the performance implications of different types of finetuning data, including conversational data, detailed description data, and complex reasoning data. Our results offer a crucial insight: not all data are created equal for the task of MLLM finetuning. Remarkably, we find that MLLMs finetuned on conversational data consistently outperform those finetuned on other data types. Specifically, conversational data improves the model performance by an average of $50\\\\%$ compared to other data types. This observation interestingly opens up avenues for more targeted data collection and curation strategies, thereby further optimizing the efficiency of MLLMs finetuning. Furthermore, by combining the LayerNorm strategy and this data perspective, we can achieve on average $10.0\\\\%$ performance improvement over full parameter finetuning on traditional VQA benchmarks with an LL A MA2 13B model while using significantly less parameters and data.  \n\nBeyond the empirical outcomes above, we conduct an investigation into the expressive power of LayerNorm tuning. Our analysis reveals that LayerNorm-tuned MLLMs exhibit lower cross-layer similarity compared to models all of which parameters are finetuned. This lowered similarity is indicative of a more expressive model, since the model incorporates anisotropic layer presentations can capture a wider range of learning patterns ( Pires et al. ,2023 ). It stands to reason that this amplified expressiveness is a key factor underpinning the efficiency and superior performance we noted, granting the model enhanced adaptability to novel multi-modal datasets.  \n\nIn essence, our findings illuminate the profound influence of LayerNorm tuning, suggesting its potential to adeptly harness the intrinsic properties of LLMs. We hope that this study will catalyze subsequent research endeavors focused on efficient multi-modal finetuning.\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - \u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u5982\u4f55\uff1f\n    - \u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\uff0c\u5982\u4f55\u63d0\u5347LayerNorm\u548cRMSNorm\u5bf9\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u878d\u5408\u7684\u9002\u7528\u6027\uff1f\n - **\u7814\u7a76\u76ee\u6807**\uff1a\n    - \u63a2\u8ba8\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u7684\u8868\u73b0\u3002\n    - \u63d0\u51fa\u6539\u8fdbLayerNorm\u548cRMSNorm\u9002\u7528\u6027\u7684\u63aa\u65bd\uff0c\u5e76\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u6a21\u578b\u8f6c\u6362**\uff1a\u5c06transformer\u7f51\u7edc\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\uff0c\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u9488\u5bf9\u4e0d\u540c\u5757\u5e94\u7528\u4e0d\u540c\u7684\u6b63\u4ea4\u77e9\u9635\\(Q_{l}\\) \uff0c\u901a\u8fc7PCA\u8ba1\u7b97\u8fd9\u4e9b\u6b63\u4ea4\u77e9\u9635\u3002\u5177\u4f53\u505a\u6cd5\u662f\u4ece\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6821\u51c6\u6570\u636e\u96c6\uff0c\u4f7f\u5176\u901a\u8fc7\u8f6c\u6362\u540e\u7684\u6a21\u578b\uff0c\u63d0\u53d6\u5c42\u7684\u6b63\u4ea4\u77e9\u9635\u3002\n - **\u5207\u7247\u64cd\u4f5c**\uff1a\u5229\u7528PCA\u5bf9\u4fe1\u53f7\u77e9\u9635\u8fdb\u884c\u5904\u7406\uff0c\u901a\u8fc7\u5220\u9664\u6743\u91cd\u77e9\u9635\\(W_{in}\\)\u3001\\(W_{out}\\)\u548c\\(W_{embd}\\)\u7684\u67d0\u4e9b\u884c\u548c\u5217\u6765\u5b9e\u73b0\u5bf9\u6a21\u578b\u7684\u5207\u7247\uff0c\u4ee5\u8fbe\u5230\u52a0\u901f\u6a21\u578b\u7684\u76ee\u7684\uff0c\u5c3d\u7ba1\u8fd9\u4f1a\u589e\u52a0\u4e00\u5b9a\u7684\\((D\u00d7D)\\)\u8ba1\u7b97\u5f00\u9500\u3002\n - **\u5b9e\u9a8c\u65b9\u6cd5**\uff1a\n    - \u4f7f\u7528HuggingFace Transformers\u548cPyTorch\u5b9e\u73b0\u4ee3\u7801\uff0c\u5728\u4e0d\u540cGPU\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u8bb0\u5f55\u8ba1\u7b97\\(Q\\)\u7684\u65f6\u95f4\u3002\n    - \u91c7\u7528\u4e0d\u540c\u7684\u6821\u51c6\u96c6\uff08\u5982WikiText - 2\u8bad\u7ec3\u6570\u636e\u96c6\u548cAlpaca\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u672c\uff09\u3001\u4e0d\u540c\u7684\u6a21\u578b\uff08\u5982OPT\u3001L LAMA - 2 \u3001Phi - 2\u7b49\uff09\u3001\u4e0d\u540c\u7684\u4efb\u52a1\uff08\u8bed\u8a00\u751f\u6210\u548c\u96f6\u6837\u672c\u4efb\u52a1\uff09\u8fdb\u884c\u5b9e\u9a8c\u3002\n    - \u4e0e\u4e0d\u540c\u7684\u57fa\u7ebf\uff08\u5982SparseGPT\uff09\u8fdb\u884c\u5bf9\u6bd4\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\n    - \u53d8\u91cf\u63a7\u5236\uff1a\u901a\u8fc7\u6539\u53d8\u6821\u51c6\u96c6\u3001\u6a21\u578b\u3001\u4efb\u52a1\u4ee5\u53ca\u57fa\u7ebf\u7b49\u56e0\u7d20\uff0c\u5168\u9762\u8bc4\u4f30\u6539\u8fdb\u63aa\u65bd\u7684\u6548\u679c\u3002\n    - \u5bf9\u6bd4\u5b9e\u9a8c\uff1a\u8bbe\u7f6e\u591a\u79cd\u5bf9\u6bd4\u6761\u4ef6\uff0c\u5982\u4e0d\u540c\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u4e0a\u7684\u5fae\u8c03\u4e0eLayerNorm\u8c03\u6574\u7684\u5bf9\u6bd4\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u57fa\u7ebf\u65b9\u6cd5\u7684\u5bf9\u6bd4\u3002\n - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\n    - \u6a21\u578b\u8f6c\u6362\u4e0e\u5207\u7247\uff1a\u5b9e\u73b0\u4e86\u6a21\u578b\u7684\u8f6c\u6362\u548c\u5207\u7247\u64cd\u4f5c\uff0c\u6574\u4f53\u4e0a\u5b9e\u73b0\u4e86\u52a0\u901f\uff0c\u8bc1\u660e\u4e86\u65b9\u6cd5\u5728\u8ba1\u7b97\u6548\u7387\u4e0a\u7684\u6709\u6548\u6027\u3002\n    - \u4e0d\u540c\u6a21\u578b\u4e0e\u6570\u636e\uff1a\u4e0d\u540c\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u4e0a\uff0cLayerNorm\u8c03\u6574\u5728\u4e00\u4e9b\u4efb\u52a1\u4e0a\u8868\u73b0\u4f18\u4e8e\u5fae\u8c03\uff0c\u5982\u5728\u67d0\u4e9b\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\uff0cLayerNorm\u8c03\u6574\u540e\u7684\u6a21\u578b\u6027\u80fd\u63d0\u5347\u660e\u663e\u3002\n    - \u5bf9\u6bd4\u57fa\u7ebf\uff1a\u4e0eSparseGPT\u7b49\u57fa\u7ebf\u5bf9\u6bd4\uff0c\u5c55\u793a\u4e86\u6240\u63d0\u65b9\u6cd5\u5728\u6027\u80fd\u548c\u6548\u7387\u4e0a\u7684\u4f18\u52bf\u3002\n    - \u9886\u57df\u9002\u5e94\u4e0e\u8868\u8fbe\u80fd\u529b\uff1a\u4ece\u9886\u57df\u9002\u5e94\u89d2\u5ea6\uff0cLayerNorm\u5728\u5c06\u89c6\u89c9\u9886\u57df\u77e5\u8bc6\u8f6c\u6362\u5230\u8bed\u8a00\u9886\u57df\u4e2d\u8d77\u5230\u91cd\u8981\u4f5c\u7528\uff1b\u4ece\u8868\u8fbe\u80fd\u529b\u89d2\u5ea6\uff0cLayerNorm\u8c03\u6574\u540e\u7684\u6a21\u578b\u5404\u5c42\u4e4b\u95f4\u533a\u522b\u66f4\u660e\u663e\uff0c\u6cdb\u5316\u80fd\u529b\u66f4\u5f3a\uff0c\u5177\u6709\u66f4\u597d\u7684\u8868\u8fbe\u80fd\u529b\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u6587\u4e2d\u867d\u672a\u660e\u786e\u63d0\u53ca\uff0c\u4f46\u4ece\u5b9e\u9a8c\u89d2\u5ea6\u770b\uff0c\u5b9e\u9a8c\u53ef\u80fd\u53d7\u9650\u4e8e\u6240\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3001\u6a21\u578b\u8303\u56f4\u4ee5\u53ca\u5b9e\u9a8c\u73af\u5883\u7b49\u56e0\u7d20\uff0c\u7ed3\u679c\u7684\u666e\u9002\u6027\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u5c40\u9650\u3002\n    - \u5728\u6a21\u578b\u5207\u7247\u64cd\u4f5c\u4e2d\uff0c\u989d\u5916\u7684\u7ebf\u6027\u64cd\u4f5c\u589e\u52a0\u4e86\u4e00\u5b9a\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u5c3d\u7ba1\u6574\u4f53\u5b9e\u73b0\u4e86\u52a0\u901f\uff0c\u4f46\u8fd9\u4e00\u5f00\u9500\u53ef\u80fd\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4ecd\u6709\u4f18\u5316\u7a7a\u95f4\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u8fdb\u4e00\u6b65\u62d3\u5c55\u5b9e\u9a8c\u6570\u636e\u96c6\u548c\u6a21\u578b\u7c7b\u578b\uff0c\u63d0\u9ad8\u7814\u7a76\u7ed3\u679c\u7684\u666e\u9002\u6027\u3002\n    - \u63a2\u7d22\u5982\u4f55\u8fdb\u4e00\u6b65\u4f18\u5316\u6a21\u578b\u5207\u7247\u64cd\u4f5c\uff0c\u51cf\u5c11\u989d\u5916\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u63d0\u5347\u6a21\u578b\u6548\u7387\u3002\n    - \u6df1\u5165\u7814\u7a76LayerNorm\u5728\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u4e2d\u7684\u4f5c\u7528\u673a\u5236\uff0c\u6316\u6398\u66f4\u591a\u6f5c\u5728\u7684\u4f18\u5316\u65b9\u5411\uff0c\u63a8\u52a8\u8ba1\u7b97\u6a21\u578b\u5728\u591a\u6a21\u6001\u573a\u666f\u4e0b\u7684\u66f4\u597d\u5e94\u7528\u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u3001LayerNorm\u548cRMSNorm\u7684\u6539\u8fdb\u63aa\u65bd\u3001\u76f8\u5173\u5b9e\u9a8c\u9a8c\u8bc1\u4ee5\u53caLayerNorm\u8c03\u6574\u5728\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\u5fae\u8c03\u4e2d\u7684\u4f5c\u7528\u7b49\u8ba1\u7b97\u673a\u79d1\u5b66\u76f8\u5173\u5185\u5bb9\u5c55\u5f00\uff0c\u4ee5\u4e0b\u662f\u6309\u7167\u7814\u7a76\u6b65\u9aa4\u8fdb\u884c\u7684\u603b\u7ed3\uff1a\n\n### \u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\n - \u63a2\u8ba8\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\uff0c\u6d89\u53ca\u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\uff0c\u63d0\u5347LayerNorm\u548cRMSNorm\u5bf9\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u878d\u5408\u9002\u7528\u6027\u7684\u6539\u8fdb\u63aa\u65bd\u3002\n\n### \u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\n - \u901a\u8fc7\u5c06transformer\u4e2d\u7684LayerNorm\u8f6c\u6362\u4e3aRMSNorm\uff0c\u5bf9\u6a21\u578b\u6743\u91cd\u77e9\u9635\u8fdb\u884c\u4e00\u7cfb\u5217\u64cd\u4f5c\uff08\u5982\u7528PCA\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\\(Q_l\\) \uff0c\u5bf9\u8f93\u5165\u8f93\u51fa\u77e9\u9635\u8fdb\u884c\u9884\u4e58\u548c\u540e\u4e58\u7b49\uff09\uff0c\u867d\u7136\u589e\u52a0\u4e86\u4e00\u4e9b\u8ba1\u7b97\u5f00\u9500\uff0c\u4f46\u5b9e\u73b0\u4e86\u6a21\u578b\u5207\u7247\u5e76\u5e26\u6765\u6574\u4f53\u901f\u5ea6\u63d0\u5347\uff0c\u8fd9\u5176\u4e2d\u6d89\u53ca\u5230\u4e00\u4e9b\u64cd\u4f5c\u65e0\u6cd5\u9884\u8ba1\u7b97\u7b49\u5076\u7136\u60c5\u51b5\u3002\n - \u5728\u5b9e\u9a8c\u9a8c\u8bc1\u4e2d\uff0c\u8ba1\u7b97\\(Q\\) \u65f6\u4f7f\u7528\u4e0d\u540c\u7cbe\u5ea6\u4f1a\u5bfc\u81f4\u6700\u7ec8\u7cbe\u5ea6\u5dee\u5f02\uff1b\u9009\u62e9\u4e0d\u540c\u6821\u51c6\u96c6\uff08\u5982WikiText - 2\u548cAlpaca\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u4e0d\u540c\u6837\u672c\u6570\u91cf\uff09\u548c\u5e8f\u5217\u957f\u5ea6\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8fd9\u4e9b\u56e0\u7d20\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u5b58\u5728\u4e00\u5b9a\u5076\u7136\u6027\u3002\n\n### \u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb\n - \u901a\u8fc7\u5b9e\u9a8c\u5bf9\u6bd4SliceGPT\u4e0eSparseGPT\u7b49\u4e0d\u540c\u65b9\u6cd5\uff0c\u8bc4\u4f30\u5728\u4e0d\u540c\u6a21\u578b\uff08OPT\u3001LLAMA - 2\u3001Phi - 2\u7b49\uff09\u3001\u4efb\u52a1\uff08\u8bed\u8a00\u751f\u6210\u548c\u96f6\u6837\u672c\u4efb\u52a1\uff09\u4ee5\u53ca\u4e0d\u540cGPU\uff08Quadro RTX6000\u3001A100\u3001H100\u7b49\uff09\u6761\u4ef6\u4e0b\u7684\u6027\u80fd\uff0c\u5c06\u7814\u7a76\u6210\u679c\u5e94\u7528\u4e8e\u5b9e\u9645\u6a21\u578b\u4f18\u5316\u548c\u6027\u80fd\u8bc4\u4f30\u4e2d\u3002\n - \u7814\u7a76LayerNorm\u8c03\u6574\u5728\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\uff08MLLMs\uff09\u5fae\u8c03\u4e2d\u7684\u4f5c\u7528\uff0c\u901a\u8fc7\u5b9e\u9a8c\u8868\u660e\u8c03\u6574LayerNorm\u53ef\u4f7fLLMs\u6709\u6548\u9002\u5e94\u591a\u6a21\u6001\u9886\u57df\uff0c\u5728\u4e0d\u6fc0\u6d3b\u89c6\u89c9 - \u8bed\u8a00\u8fde\u63a5\u5668\u65f6\u4ecd\u80fd\u4fdd\u6301\u8f83\u597d\u6027\u80fd\uff0c\u4f53\u73b0\u4e86\u5176\u4f5c\u4e3a\u9886\u57df\u9002\u914d\u5668\u7684\u91cd\u8981\u4f5c\u7528\uff1b\u8fd8\u80fd\u63d0\u9ad8\u6a21\u578b\u8868\u8fbe\u80fd\u529b\uff0c\u8c03\u6574\u540e\u7684MLLMs\u5404\u5c42\u4e4b\u95f4\u5dee\u5f02\u66f4\u660e\u663e\uff0c\u6cdb\u5316\u80fd\u529b\u548c\u8868\u8fbe\u80fd\u529b\u66f4\u5f3a\uff1b\u5e76\u4e14\u4ece\u6570\u636e\u89d2\u5ea6\u8fdb\u4e00\u6b65\u4f18\u5316\u5fae\u8c03\u6548\u7387\uff0c\u53d1\u73b0\u5bf9\u8bdd\u6570\u636e\u5bf9MLLMs\u5fae\u8c03\u6548\u679c\u66f4\u4f73\uff0c\u7ed3\u5408LayerNorm\u7b56\u7565\u53ef\u5728\u4f7f\u7528\u66f4\u5c11\u53c2\u6570\u548c\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u63d0\u5347\u6027\u80fd\uff0c\u5b9e\u73b0\u4e86\u4ece\u7406\u8bba\u7814\u7a76\u5230\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u3002\n\n### \u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\n - \u5c06transformer\u7f51\u7edc\u4eceLayerNorm\u8f6c\u6362\u4e3aRMSNorm\u4ee5\u53ca\u540e\u7eed\u5bf9\u6743\u91cd\u77e9\u9635\u64cd\u4f5c\u7684\u7b97\u6cd5\uff0c\u5176\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u6a21\u578b\u901f\u5ea6\u63d0\u5347\u3001\u6027\u80fd\u53d8\u5316\u7b49\u9884\u671f\u7ed3\u679c\u5b58\u5728\u56e0\u679c\u5173\u7cfb\u3002\u901a\u8fc7PCA\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635\\(Q_l\\) \u7684\u65b9\u6cd5\u5177\u6709\u4e00\u5b9a\u53ef\u62d3\u5c55\u6027\uff0c\u53ef\u5e94\u7528\u4e8e\u4e0d\u540c\u6a21\u578b\u3002\u540c\u65f6\uff0c\u5b9e\u9a8c\u4e2d\u5bf9\u6bd4\u4e0d\u540c\u65b9\u6cd5\u548c\u8bbe\u7f6e\u7684\u7ed3\u679c\uff0c\u4e3a\u53cd\u5411\u63a8\u7406\u54ea\u4e9b\u56e0\u7d20\u5bf9\u6a21\u578b\u6027\u80fd\u6709\u91cd\u8981\u5f71\u54cd\u63d0\u4f9b\u4e86\u4f9d\u636e\u3002\n - \u5bf9\u4e8eLayerNorm\u8c03\u6574\u7b56\u7565\uff0c\u5176\u4e0eMLLMs\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u63d0\u5347\u5b58\u5728\u56e0\u679c\u5173\u7cfb\u3002\u901a\u8fc7\u5bf9\u6bd4\u4e0d\u540c\u8c03\u6574\u65b9\u6cd5\uff08\u5168\u53c2\u6570\u5fae\u8c03\u3001LoRA\u7b49\uff09\u548c\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u5fae\u8c03\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u53cd\u5411\u63a8\u7406\u51faLayerNorm\u8c03\u6574\u5728\u63d0\u5347\u6548\u7387\u548c\u6027\u80fd\u65b9\u9762\u7684\u4f18\u52bf\uff0c\u5e76\u4e14\u8be5\u7b56\u7565\u5728\u4e0d\u540c\u89c4\u6a21\u6a21\u578b\u548c\u591a\u79cd\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u90fd\u6709\u5e94\u7528\u548c\u62d3\u5c55\u7684\u6f5c\u529b \u3002  ", "dreams_personality_context": "\u4ece\u8fd9\u6bb5\u5185\u5bb9\u96be\u4ee5\u76f4\u63a5\u603b\u7ed3\u51fa\u4eba\u7269\u6027\u683c\uff0c\u4f46\u5982\u679c\u975e\u8981\u63d0\u70bc\u4e0e\u4e4b\u76f8\u5173\u7684\u6027\u683c\u7279\u70b9\uff0c\u53ef\u4ee5\u8fd9\u6837\u5206\u6790\uff1a\n\n### \u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\n - \u4f53\u73b0\u51fa\u4eba\u7269\u5177\u6709\u63a2\u7d22\u7cbe\u795e\uff0c\u5bf9\u4e0d\u540c\u573a\u666f\u4e0b\u8ba1\u7b97\u6a21\u578b\u7684\u9002\u7528\u6027\u8fdb\u884c\u6df1\u5165\u63a2\u8ba8\uff0c\u5c55\u73b0\u51fa\u5bf9\u65b0\u77e5\u8bc6\u3001\u65b0\u9886\u57df\u7684\u597d\u5947\u4e0e\u79ef\u6781\u63a2\u7d22\uff0c\u4e0d\u6ee1\u8db3\u4e8e\u73b0\u6709\u6210\u679c\uff0c\u8ffd\u6c42\u66f4\u5e7f\u6cdb\u7684\u5e94\u7528\u548c\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\u3002\n\n### \u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\n - \u9762\u5bf9\u7b97\u6cd5\u4f18\u5316\u4e2d\u51fa\u73b0\u7684\u5076\u7136\u60c5\u51b5\uff0c\u5982\u8ba1\u7b97\u5f00\u9500\u589e\u52a0\u3001\u64cd\u4f5c\u65e0\u6cd5\u9884\u8ba1\u7b97\u4ee5\u53ca\u5b9e\u9a8c\u4e2d\u4e0d\u540c\u56e0\u7d20\u5bf9\u7ed3\u679c\u7684\u5076\u7136\u5f71\u54cd\u7b49\uff0c\u4eba\u7269\u6ca1\u6709\u9000\u7f29\uff0c\u800c\u662f\u79ef\u6781\u5e94\u5bf9\uff0c\u8bf4\u660e\u5177\u6709\u575a\u97e7\u4e0d\u62d4\u3001\u52c7\u4e8e\u9762\u5bf9\u56f0\u96be\u7684\u6027\u683c\u7279\u70b9\uff0c\u540c\u65f6\u5728\u5904\u7406\u8fd9\u4e9b\u590d\u6742\u60c5\u51b5\u65f6\uff0c\u4e5f\u53cd\u6620\u51fa\u5176\u7ec6\u5fc3\u548c\u4e25\u8c28\uff0c\u4e0d\u653e\u8fc7\u4efb\u4f55\u53ef\u80fd\u5f71\u54cd\u7ed3\u679c\u7684\u56e0\u7d20\u3002\n\n### \u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb\n - \u901a\u8fc7\u5927\u91cf\u4e0d\u540c\u6761\u4ef6\u4e0b\u7684\u5b9e\u9a8c\u5bf9\u6bd4\u6765\u8bc4\u4f30\u6027\u80fd\uff0c\u5e76\u5c06\u7814\u7a76\u6210\u679c\u5e94\u7528\u4e8e\u5b9e\u9645\u6a21\u578b\u4f18\u5316\uff0c\u8868\u660e\u4eba\u7269\u5177\u6709\u5f88\u5f3a\u7684\u5b9e\u8df5\u7cbe\u795e\u548c\u52a1\u5b9e\u6001\u5ea6\uff0c\u6ce8\u91cd\u7406\u8bba\u4e0e\u5b9e\u9645\u7684\u7ed3\u5408\uff0c\u8ffd\u6c42\u7814\u7a76\u6210\u679c\u7684\u5b9e\u9645\u4ef7\u503c\u3002\u540c\u65f6\uff0c\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u5c1d\u8bd5\u65b0\u7684\u5e94\u7528\u65b9\u5411\uff0c\u5982\u63a2\u7d22LayerNorm\u8c03\u6574\u5728\u591a\u6a21\u6001\u5927\u8bed\u8a00\u6a21\u578b\u5fae\u8c03\u4e2d\u7684\u4f5c\u7528\uff0c\u4f53\u73b0\u51fa\u521b\u65b0\u610f\u8bc6\u3002\n\n### \u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\n - \u5173\u6ce8\u7b97\u6cd5\u4e0e\u7ed3\u679c\u7684\u56e0\u679c\u5173\u7cfb\uff0c\u6316\u6398\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u6f5c\u529b\uff0c\u8bf4\u660e\u4eba\u7269\u5177\u6709\u8f83\u5f3a\u7684\u903b\u8f91\u601d\u7ef4\u80fd\u529b\u548c\u524d\u77bb\u6027\u3002\u80fd\u591f\u4ece\u5b9e\u9a8c\u7ed3\u679c\u4e2d\u5206\u6790\u51fa\u56e0\u679c\u8054\u7cfb\uff0c\u5e76\u601d\u8003\u8fdb\u4e00\u6b65\u62d3\u5c55\u548c\u53cd\u5411\u63a8\u7406\u7684\u53ef\u80fd\u6027\uff0c\u5c55\u73b0\u51fa\u5bf9\u7814\u7a76\u7684\u6df1\u5165\u601d\u8003\u548c\u957f\u8fdc\u89c4\u5212\uff0c\u5177\u6709\u7406\u6027\u3001\u6c89\u7a33\u7684\u6027\u683c\u7279\u8d28\u3002\n\n\u603b\u4f53\u800c\u8a00\uff0c\u4ece\u8fd9\u4e9b\u7814\u7a76\u6b65\u9aa4\u4e2d\u53ef\u4ee5\u63a8\u6d4b\u76f8\u5173\u4eba\u7269\u5177\u6709\u63a2\u7d22\u7cbe\u795e\u3001\u575a\u97e7\u4e0d\u62d4\u3001\u7ec6\u5fc3\u4e25\u8c28\u3001\u52a1\u5b9e\u3001\u521b\u65b0\u3001\u7406\u6027\u4e14\u5177\u6709\u524d\u77bb\u6027\u7b49\u6027\u683c\u7279\u70b9 \u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["7c19e4a0-168c-43fa-9569-b202c29fc02d"], "metadata": {}}}, "analysis_store/metadata": {"7c19e4a0-168c-43fa-9569-b202c29fc02d": {"analysis_hash": "", "ref_analysis_id": ""}}}