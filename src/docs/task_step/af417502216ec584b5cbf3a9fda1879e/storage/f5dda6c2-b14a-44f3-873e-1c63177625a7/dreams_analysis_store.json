{"analysis_store/data": {"497f9c7c-4ab8-4ac6-bd59-4567d9485e83": {"__data__": {"id_": "497f9c7c-4ab8-4ac6-bd59-4567d9485e83", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### Step by Step Decomposition\n\n#### Step 1: \u7406\u89e3\u4efb\u52a1\u80cc\u666f\n- **\u4efb\u52a1\u80cc\u666f**: \u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\u5b66\u7814\u7a76\u5b66\u8005\uff0c\u60a8\u5df2\u7ecf\u67e5\u9605\u4e86\u300a\u4f5c\u4e3a\u6fc0\u60c5\u7684\u7231\u60c5\u300b\u5362\u66fc\u7f16\u5199\u7684\u4e66\u7c4d\uff0c\u5c1d\u8bd5\u901a\u8fc7\u53c2\u8003\u6587\u732e\u4e2d\u5b9a\u4e49\u7684\u7231\u60c5\u8bed\u4e49\u5b66\uff0c\u4ece\u6587\u672c\u4e2d\u603b\u7ed3\u4e0b\u65b9\u7247\u6bb5\u3002\n- **\u76ee\u6807**: \u7814\u7a76\u4ea4\u6d41\u5a92\u4ecb\u9886\u57df\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u7814\u7a76\u6fc0\u60c5\u7684\u975e\u7406\u6027\u4e0e\u98ce\u96c5\u60c5\u672f\u7684\u5076\u7136\u6027\uff0c\u7814\u7a76\u81ea\u8eab\u7684\u5feb\u611f\u662f\u5426\u8f6c\u79fb\u5230\u793e\u4f1a\u884c\u4e3a\u4e0a\uff0c\u7814\u7a76\u8bed\u4e49\u4fe1\u606f\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u843d\u7a7a\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u6fc0\u53d1\u6027\u62d3\u5c55\u5230\u5426\u5b9a\u7269\u4e4b\u4e2d\u3002\n\n#### Step 2: \u5206\u6790\u6587\u672c\u5185\u5bb9\n- **\u6587\u672c\u5185\u5bb9**: \u89d2\u8272\u3001\u5185\u5bb9\u3001\u5206\u955c\u3002\n- **\u5206\u6790**: \u6587\u672c\u5185\u5bb9\u8f83\u4e3a\u7b80\u6d01\uff0c\u4ec5\u5305\u542b\u89d2\u8272\u3001\u5185\u5bb9\u548c\u5206\u955c\u4e09\u4e2a\u90e8\u5206\uff0c\u6ca1\u6709\u5177\u4f53\u63cf\u8ff0\u3002\n\n#### Step 3: \u7814\u7a76\u7a81\u51fa\u7279\u70b9\n- **\u7a81\u51fa\u7279\u70b9**: \n  1. \u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  2. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3002\n  3. \u5362\u66fc\u7684\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3002\n  4. \u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027\u3002\n  5. \u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n  6. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\u3002\n  7. \u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3002\n  8. \u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  9. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u9644\u8fd1\u7814\u7a76\u9886\u57df\u3002\n  10. \u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n  11. \u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u53e0\u3002\n  12. \u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u76f8\u4ea4\u3002\n\n#### Step 4: \u603b\u7ed3\u7814\u7a76\u5efa\u8bae\n- **\u7814\u7a76\u5efa\u8bae**:\n  1. **\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0**: \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u7684\u8868\u73b0\u5f62\u5f0f\uff0c\u5206\u6790\u5176\u4e0e\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u7684\u5173\u8054\u3002\n  2. **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5728\u5f71\u89c6\u4f5c\u54c1\u4e2d\u7684\u4f53\u73b0\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  3. **\u5362\u66fc\u7684\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528**: \u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  4. **\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027**: \u5206\u6790\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u4f5c\u7528\uff0c\u63a2\u8ba8\u5176\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u7ed3\u5408\u70b9\u3002\n  5. **\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**: \u7814\u7a76\u5a92\u4f53\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u64ad\u65b9\u5f0f\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  6. **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5728\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u4e2d\u7684\u5e94\u7528\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  7. **\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6**: \u5206\u6790\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u7ed3\u5408\u70b9\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  8. **\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5728\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u7684\u5e94\u7528\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  9. **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u9644\u8fd1\u7814\u7a76\u9886\u57df**: \u5206\u6790\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u7814\u7a76\u9886\u57df\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  10. **\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u7ed3\u5408\u70b9\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  11. **\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u53e0**: \u5206\u6790\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u5173\u8054\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  12. **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u76f8\u4ea4**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u7ed3\u5408\u70b9\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n\n#### Step 5: \u6700\u7ec8\u603b\u7ed3\n- **\u6700\u7ec8\u603b\u7ed3**: \u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7814\u7a76\u5efa\u8bae\uff1a\n  1. \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\uff0c\u5206\u6790\u5176\u4e0e\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u7684\u5173\u8054\u3002\n  2. \u63a2\u8ba8\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  3. \u6df1\u5165\u7814\u7a76\u5362\u66fc\u7684\u7406\u8bba\uff0c\u63a2\u8ba8\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3002\n  4. \u5206\u6790\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u4f5c\u7528\uff0c\u63a2\u8ba8\u5176\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u7ed3\u5408\u70b9\u3002\n  5. \u7814\u7a76\u5a92\u4f53\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u64ad\u65b9\u5f0f\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  6. \u63a2\u8ba8\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  7. \u5206\u6790\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u7ed3\u5408\u70b9\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  8. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5728\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u7684\u5e94\u7528\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  9. \u5206\u6790\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u7814\u7a76\u9886\u57df\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  10. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u7ed3\u5408\u70b9\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n  11. \u5206\u6790\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u5173\u8054\uff0c\u63a2\u8ba8\u5176\u5bf9\u793e\u4f1a\u884c\u4e3a\u7684\u5f71\u54cd\u3002\n  12. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u7ed3\u5408\u70b9\uff0c\u5206\u6790\u5176\u5bf9\u793e\u4f1a\u5b66\u7814\u7a76\u65b9\u6cd5\u7684\u8d21\u732e\u3002\n\n\u8fd9\u4e9b\u7814\u7a76\u5efa\u8bae\u5c06\u6709\u52a9\u4e8e\u6df1\u5165\u7406\u89e3\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\uff0c\u4ee5\u53ca\u5176\u5728\u793e\u4ea4\u5a92\u4f53\u548c\u5a92\u4f53\u4e2d\u7684\u8868\u73b0\u3002", "scene_monologue_context": "**\u72ec\u767d\u4fe1\u606f\uff1a**\n\n\u4eca\u5929\uff0c\u6211\u6df1\u5165\u7814\u7a76\u4e86\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2dTransformer\u6a21\u578b\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u7279\u522b\u662fLayerNorm\u548cRMSNorm\u7684\u5bf9\u6bd4\u3002\u6211\u67e5\u9605\u4e86\u591a\u7bc7\u76f8\u5173\u6587\u732e\uff0c\u8bd5\u56fe\u4ece\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u6548\u679c\u7b49\u65b9\u9762\u8fdb\u884c\u5206\u6790\u3002\u9996\u5148\uff0c\u6211\u6ce8\u610f\u5230LayerNorm\u548cRMSNorm\u5728Transformer\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u573a\u666f\u6709\u6240\u4e0d\u540c\u3002LayerNorm\u901a\u5e38\u5728\u6bcf\u4e2a\u5b50\u6a21\u5757\uff08\u5982\u81ea\u6ce8\u610f\u529b\u6216\u524d\u9988\u7f51\u7edc\uff09\u4e4b\u540e\u5e94\u7528\uff0c\u800cRMSNorm\u5219\u88ab\u7528\u4e8e\u66ff\u4ee3LayerNorm\uff0c\u4ee5\u51cf\u5c11\u8ba1\u7b97\u5f00\u9500\u5e76\u63d0\u9ad8\u8bad\u7ec3\u7a33\u5b9a\u6027\u3002\n\n\u5728\u9605\u8bfb\u6587\u732e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5b9e\u9a8c\u548c\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u6709\u7814\u7a76\u901a\u8fc7\u5c06Transformer\u4e2d\u7684LayerNorm\u66ff\u6362\u4e3aRMSNorm\uff0c\u5e76\u7ed3\u5408PCA\u6280\u672f\u5bf9\u6a21\u578b\u8fdb\u884c\u5207\u7247\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u6a21\u578b\u7684\u538b\u7f29\u548c\u52a0\u901f\u3002\u8fd9\u4e00\u65b9\u6cd5\u5728\u591a\u4e2a\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u5c24\u5176\u662f\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\u3002\u6b64\u5916\uff0c\u6211\u8fd8\u4e86\u89e3\u5230\uff0cPostNorm\uff08\u5728\u5b50\u6a21\u5757\u4e4b\u540e\u5e94\u7528LayerNorm\uff09\u5728\u96f6\u6837\u672c\u7ffb\u8bd1\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8ePreNorm\uff08\u5728\u5b50\u6a21\u5757\u4e4b\u524d\u5e94\u7528LayerNorm\uff09\uff0c\u5c3d\u7ba1PreNorm\u5728\u8bad\u7ec3\u7a33\u5b9a\u6027\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\n\n\u901a\u8fc7\u4eca\u5929\u7684\u9605\u8bfb\uff0c\u6211\u5bf9LayerNorm\u548cRMSNorm\u7684\u4f18\u7f3a\u70b9\u6709\u4e86\u66f4\u6e05\u6670\u7684\u8ba4\u8bc6\u3002RMSNorm\u5728\u8ba1\u7b97\u6548\u7387\u548c\u6a21\u578b\u538b\u7f29\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u800cLayerNorm\u5219\u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\u4ecd\u7136\u5177\u6709\u4e0d\u53ef\u66ff\u4ee3\u7684\u4f18\u52bf\u3002\u672a\u6765\uff0c\u6211\u8ba1\u5212\u8fdb\u4e00\u6b65\u63a2\u7d22\u5982\u4f55\u7ed3\u5408\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u4f18\u70b9\uff0c\u4ee5\u4f18\u5316Transformer\u6a21\u578b\u7684\u6027\u80fd\u3002\n\n\u603b\u7684\u6765\u8bf4\uff0c\u4eca\u5929\u7684\u5b66\u4e60\u8ba9\u6211\u5bf9\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u5f52\u4e00\u5316\u6280\u672f\u6709\u4e86\u66f4\u6df1\u5165\u7684\u7406\u89e3\uff0c\u4e5f\u4e3a\u6211\u672a\u6765\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u65b0\u7684\u601d\u8def\u3002", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "f5dda6c2-b14a-44f3-873e-1c63177625a7:\u300c\u6280\u672f\u6846\u67b6\u300d\nf5dda6c2-b14a-44f3-873e-1c63177625a7:\u300c### \u95ee\u9898\n\n\u5728\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\uff0cTransformer\u6a21\u578b\u5e7f\u6cdb\u4f7f\u7528\u4e86LayerNorm\u548cRMSNorm\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u3002\u7ed3\u5408\u8fd1\u5e74\u6765\u6df1\u5ea6\u5b66\u4e60\u6280\u672f\u6846\u67b6\u7684\u53d1\u5c55\uff0c\u7279\u522b\u662f\u5728Transformer\u53ca\u5176\u53d8\u4f53\uff08\u5982BERT\u3001RoBERTa\u7b49\uff09\u4e2d\u7684\u5e94\u7528\uff0c**LayerNorm\u548cRMSNorm\u5728Transformer\u6a21\u578b\u4e2d\u7684\u5177\u4f53\u8868\u73b0\u548c\u9002\u7528\u6027\u6709\u4f55\u4e0d\u540c\uff1f** \u8bf7\u4ece\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u5728\u4e0d\u540c\u4efb\u52a1\uff08\u5982\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u56fe\u50cf\u5904\u7406\u7b49\uff09\u4e2d\u7684\u6548\u679c\u7b49\u65b9\u9762\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\u3002\u300d\nf5dda6c2-b14a-44f3-873e-1c63177625a7:\u300cref_ids: 454845744951617972, chunk_ids: 5, Score: 0.4609, Text: # 3.3 A TRANSFORMATION PER BLOCK\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any $\\\\mathbf{Q}$ to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, $\\\\mathbf{Q}_{\\\\ell}$ .  \n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem 1 ,  \n\n  \nFigure 3: Converting a transformer network from LayerNorm to RMSNorm: the scale matrix diag $(\\\\alpha)$ is absorbed into the subsequent matrix $\\\\mathbf{W}_{\\\\mathrm{in}}$ . Figure shows the block in combined colors. We use $(\\\\alpha)$ for brevity. The mean-subtraction matrix $\\\\mathbf{M}$ is applied to each matrix $\\\\mathbf{W}_{\\\\mathrm{out}}$ . Layernorm becomes RMSNorm, up to a constant $\\\\bar{\\\\sqrt{D}}$ (not shown). Here, the scaling $(\\\\alpha^{\\\\prime})$ comes from the previous block.  \n\n  \nFigure 4: With the network converted to RMSNorm (see Figure 3 ), we apply the computational-invariance idea. The input weight matrices $\\\\mathrm{diag}(\\\\alpha)\\\\mathbf{W}_{\\\\mathrm{in}}$ are pre-multiplied by $\\\\mathbf{Q}^{\\\\top}$ . The output matrices $\\\\mathbf{W}_{\\\\mathrm{out}}\\\\mathbf{M}$ are post-multiplied by $\\\\mathbf{Q}$ . In the skip-connection, a new linear layer is added $\\\\mathbf{Q}_{\\\\ell}^{\\\\top}\\\\mathbf{Q}_{\\\\ell+1}$ . After these modifications, the matrices can be sliced (hatched areas).  \n\nwith the exception of line 5 of Algorithm 1 . Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation applied to different blocks with the additional linear operation in the residual connection. Unlike the $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212to the residual. Figure 4 shows how different rotations can be modifications to the weight matrices, these additional operations cannot be pre-computed and add a small $(D\\\\times D)$ overhead to the model. Nonetheless, they are needed to allow slicing the model (Section 3.4 ) and we see real speedup overall (Section 4 ).  \n\nTo compute the matrices $\\\\mathbf{Q}_{\\\\ell}$ , we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if $\\\\mathbf{X}_{\\\\ell,i}$ is the output of the $\\\\ell^{\\\\mathrm{th}}$ RMSNorm block for the $i^{\\\\mathrm{th}}$ sequence in the calibration dataset, we compute  \n\n$$\n\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\n$$  \n\nand set $\\\\mathbf{Q}_{\\\\ell}$ to the be the eigenvectors of $\\\\mathbf{C}_{\\\\ell}$ , sorted by decreasing eigenvalues.\n\n# 3.4 SLICING\nThe goal of Principal Component Analysis is usually to take a data matrix $\\\\mathbf{X}$ and compute a lower dimensional representation $\\\\mathbf{Z}$ , and an approximate reconstruction $\\\\tilde{\\\\mathbf{X}}$ :  \n\n$$\n\\\\mathbf{Z}=\\\\mathbf{X}\\\\mathbf{Q}\\\\mathbf{D}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}=\\\\mathbf{Z}\\\\mathbf{D}^{\\\\top}\\\\mathbf{Q}^{\\\\top}\\\\,.\n$$  \n\nwhere $\\\\mathbf{Q}$ is the ectors of ${\\\\bf X}^{\\\\top}{\\\\bf X}$ , and $\\\\mathbf{D}$ is a $D\\\\times D_{\\\\mathrm{small}}$ deletion matrix (containing $D_{\\\\mathrm{small}}$ The reconstruction is columns of the $D\\\\times D$ \u00d7$L_{2}$ identity matrix), which removes some of the columns of the matrix to the left. optimal, in the sense that QD is a linear mapping that minimizes $\\\\lVert\\\\mathbf{X}-\\\\tilde{\\\\mathbf{X}}\\\\rVert^{2}$ .  \n\nWhen we apply PCA to the signal matrix $\\\\mathbf{X}$ bween blocks, we never materialize the $N\\\\times D$ signal matrix, but we apply the deletion matrix Dto the operations preceding and succeeding the construction of that matrix, which have already been multiplied by $\\\\mathbf{Q}$ in the above. We delete rows of $\\\\mathbf{W}_{\\\\mathrm{in}}$ that we have inserted into the residual connection (see Figure and columns of $\\\\mathbf{W}_{\\\\mathrm{out}}$ and $\\\\mathbf{W}_{\\\\mathrm{embd}}$ . We also delete both rows 4 ). and columns of the matrix $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212\n\n# 4 EXPERIMENTAL VALIDATION\nSetup We use HuggingFace Transformers ( Wolf et al. ,2019 ) to implement our code with PyTorch (Paszke et al. ,2019 ). The computation of $\\\\mathbf{Q}$ is performed on a single H100 GPU with 80GB of memory, taking approximately 3.5 hours to complete for the L LAMA -2 70B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix. We find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix A.2 .  \n\nWe experiment with two different calibration sets: 1024 samples from the WikiText-2 training dataset ( Merity et al. ,2016 ) and 5000 samples from the Alpaca training dataset ( Taori et al. ,2023 ). Sequence lengths are chosen as the maximum of each language model. An ablation study on the calibration set size and sequence length is presented in Appendix A.3 .  \n\nModels, Tasks, and GPUs We evaluate all our experiments on OPT ( Zhang et al. ,2022 ), L LAMA -2 (Touvron et al. ,2023 ) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller L LAMA -2 models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section 4.1 ). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.  \n\nBaseline Setup We initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT ( Frantar & Alistarh ,2023 ) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup ( Mishra et al. ,2021 ).\u300d\nf5dda6c2-b14a-44f3-873e-1c63177625a7:\u300cref_ids: 454847819065993190, chunk_ids: 1, Score: 0.4141, Text: # 3 Experiments and Results\nWe evaluate the performance of PreNorm and PostNorm for ZST on various datasets and language pairs. We then analyze the off-target rates and structural discrepancies between PreNorm and PostNorm to understand performance differences.  \n\n$$\n\\\\mathrm{LayerNorm}(\\\\mathbf{x})=\\\\frac{\\\\mathbf{x}-\\\\mathbf{E}(\\\\mathbf{x})}{\\\\sqrt{\\\\mathbf{V}(\\\\mathbf{x})}}\\\\cdot\\\\mathbf{g}+\\\\mathbf{b},\n$$  \n\nwhere $\\\\mathbf{g}$ and $\\\\mathbf{b}$ are trainable gain and bias. $\\\\mathbf{E}$ and $\\\\mathbf{V}$ indicate expectation and variance. LayerNorm is commonly used in two positions in the Transformer, as shown in Fig. 1 . PostNorm, which is the originally proposed setting of the Transformer ( Vaswani et al. ,2017 ), involves applying LayerNorm after each sub-module (i.e., selfattention or feed-forward network) and residual connections. PreNorm ( Baevski and Auli ,2019 ), on the other hand, involves applying LayerNorm directly before each sub-module and is known to stabilize Transformer training. While variants of Transformer LayerNorm like RMSNorm ( Zhang and Sennrich ,2019 ) have been proposed, the vanilla PreNorm and PostNorm are still the most widely adopted settings in current multilingual\n\n# 3.1 Experimental Settings\nDatasets We perform ZST experiments on three datasets: OPUS ( Zhang et al. ,2020 ), IWSLT ( Cettolo et al. ,2017 ), and Europarl ( Koehn ,2005 ). The statistics of the datasets are summarized in Table 1 .We include 7 ,4 , and 5 languages for each dataset. The training data consists of only English-centric sentence pairs, resulting in 30 ,6 , and 12 ZST directions for each dataset. The total number of parallel sentences for each dataset is 12 .00 M, 1 .38 M, and 15 .78 M, respectively. We apply BPE ( Sennrich et al. ,2016 ) with merge operations of 50 k, 40 k, and $50\\\\mathbf{k}$ to create a joint vocabulary for each dataset.  \n\nTraining We employ Transformer-base model for OPUS and IWSLT, and Transformer-big for Europarl, in accordance with the distinct sizes of training data. We consider the following settings: (1) PreNorm or PostNorm : PreNorm involves LayerNorm directly before each sub-module (i.e., self-attention or feed-forward network), while PostNorm applies LayerNorm after each sub-module and residual connections, as shown in Fig. 1 .(2) S-ENC-T-DEC or T-ENC : Source language tag on the encoder-side and target language tag on the decoder-side; or only target language tag on the encoder-side. Wu et al. (2021 ) showed that this setting impacts ZST for Transformer with PreNorm. (3) w/ or w/o Res. : With the residual connection for self-attention in the middle $(4^{t h})$ encoder layer or not. Liu et al. (2021 ) revealed that \u201cw/o Res.\u201d improves ZST for the model trained with PreNorm. We experiment this with different LayerNorm settings as this may reduce the potential of overfitting on supervised directions, then further impacts ZST, which aligns with our hypothesis.  \n\nTable 2: BLEU scores and off-target rates (shown in brackets) . We report the average score of three seeds; refer to Appendix Gfor BLEU score of each translation direction and seed. \u201cRes.\u201d indicates the residual connection of self-attention in the $4^{t h}$ encoder layer. We mark lower off-target rates and significantly higher BLEU scores ( Koehn ,2004 ) between PreNorm and PostNorm in bold for ZST.   \n\n\n<html><body><table><tr><td>#</td><td>Layer Norm</td><td>Language Tag</td><td>Res.</td><td></td><td>Zero-shot</td><td></td><td></td><td>Supervised</td><td></td></tr><tr><td>0</td><td></td><td>Pivot</td><td></td><td>OPUS 21.8</td><td>IWSLT 20.0</td><td>Europarl 29.5</td><td>OPUS</td><td>IWSLT</td><td>Europarl</td></tr><tr><td>1</td><td>PreNorm</td><td>S-ENC-T-DEC</td><td>w/</td><td>10.1 (42.19%)</td><td>4.9 (64.84%)</td><td>24.9 ( 7.73%)</td><td>33.7</td><td>31.5</td><td>34.3</td></tr><tr><td>2</td><td>PostNorm</td><td>S-ENC-T-DEC</td><td>w/</td><td>16.8 ( 8.59%)</td><td>12.4 (10.61%)</td><td>29.2( 0.34%)</td><td>33.9</td><td>31.5</td><td>34.5</td></tr><tr><td>3</td><td>PreNorm</td><td>T-ENC</td><td>w/</td><td>13.3 (22.99%)</td><td>13.7 ( 3.98%)</td><td>29.5( 0.23%)</td><td>33.7</td><td>31.6</td><td>34.4</td></tr><tr><td>4</td><td>PostNorm</td><td>T-ENC</td><td>w/</td><td>14.0 (22.86%)</td><td>15.5 ( 4.59%)</td><td>30.8 ( 0.11%)</td><td>34.1</td><td>31.5</td><td>34.5</td></tr><tr><td>5</td><td>PreNorm</td><td>S-ENC-T-DEC</td><td>w/o</td><td>14.3 (20.67%)</td><td>8.0 (50.16%)</td><td>16.7 (41.87%)</td><td>33.6</td><td>30.9</td><td>34.3</td></tr><tr><td>6</td><td>PostNorm</td><td>S-ENC-T-DEC</td><td>w/o</td><td>16.0 (15.27%)</td><td>17.4 (1.83%)</td><td>29.0 ( 0.41%)</td><td>33.8</td><td>30.7</td><td>34.4</td></tr><tr><td>7</td><td>PreNorm</td><td>T-ENC</td><td>w/o</td><td>13.4 (27.15%)</td><td>16.2 ( 1.54%)</td><td>29.9 ( 2.15%)</td><td>33.5</td><td>30.9</td><td>34.3</td></tr><tr><td>8</td><td>PostNorm</td><td>T-ENC</td><td>w/o</td><td>13.9 (26.68%)</td><td>17.8 (1.50%)</td><td>30.8 ( 0.13%)</td><td>33.9</td><td>30.6</td><td>34.4</td></tr></table></body></html>  \n\nThe settings above lead to eight different combinations, shown in Table 2 (#1 - #8). Additional training details are in Appendix A .\n\n# 3.2 Main Results\nWe evaluate ZST systems using SacreBLEU ( Post ,2018 ) and off-target rates. We report in Table 2 BLEU scores for both zero-shot and supervised directions. For ZST, we also present pivot-based translation results as a reference. Implementation details of evaluation can be found in Appendix B.Our findings are as follows:  \n\nPreNorm vs. PostNorm :We find that PostNorm consistently yields better BLEU scores than PreNorm for ZST across various language tag and residual connection settings, while their performance is comparable for supervised directions.  \n\nImpact of Language Tag and Residual Connection: We observe that using the \u201cT-ENC\u201d language tag and \u201cw/ Res.\u201d improves ZST performance for IWSLT, which aligns with the findings of $\\\\mathrm{Wu}$ et al. (2021 ) and Liu et al. (2021 ). Nevertheless, the best performance is achieved using \u201cw/ Res.\u201d for PostNorm with \u201cS-ENC-T-DEC\u201d and \u201cT-ENC\u201d tags for OPUS and Europarl, respectively (#2 and #4). Given that Wu et al. (2021 ) and Liu et al. (2021 )used PreNorm as the default setting (#2, #4, #6 and #8 are unreported results in their work), our results emphasize the need to consider PostNorm as the default setting for ZST, while the language tag and residual connection settings have less impact.  \n\nOff-target Rates : Off-target rates help understand the different BLEU score gaps between PreNorm and PostNorm, which ranges from 0 .5 to 12 .3 BLEU points. For PreNorm and PostNorm with the \u201cT-ENC\u201d language tag (#3, #4, #7, and #8), they have similar off-target rates, with a discrepancy ranging from $-0.61\\\\%$ to $2.02\\\\%$ , which results in narrow BLEU score gaps, ranging from 0 .5 to 1 .8 points. However, for PreNorm and PostNorm with the \u201cS-ENC-T-DEC\u201d language tag (#1, #2, #5, and #6), the off-target rates show a more considerable discrepancy, ranging from $5.40\\\\%$ to $54.23\\\\%$ , resulting in BLEU score gaps from 1 .7 to 12 .3 points. Further analysis of the nature of Transformer hidden states in the next section explores the reason for these different off-target rates in translations.\u300d\nf5dda6c2-b14a-44f3-873e-1c63177625a7:\u300cref_ids: 454847315550000884, chunk_ids: 5, Score: 0.2812, Text: # DeepNet: Scaling Transformers to 1,000 Layers\nHongyu Wang \u2217Shuming Ma \u2217Li Dong Shaohan Huang Dongdong Zhang Furu Wei \u2020Microsoft Research https://github.com/microsoft/unilm\n\n# Abstract\nIn this paper, we propose a simple yet effective method to stabilize extremely deep Transformers. Specifically, we introduce a new normalization function (D EEP NORM ) to modify the residual connection in Transformer, accompanying with theoretically derived initialization. In-depth theoretical analysis shows that model updates can be bounded in a stable way. The proposed method combines the best of two worlds, i.e., good performance of Post-LN and stable training of Pre-LN, making D EEP NORM a preferred alternative. We successfully scale Transformers up to 1,000 layers (i.e., 2,500 attention and feed-forward network sublayers) without difficulty, which is one order of magnitude deeper than previous deep Transformers. Remarkably, on a multilingual benchmark with 7,482 translation directions, our 200-layer model with 3.2B parameters significantly outperforms the 48-layer state-of-the-art model with 12B parameters by 5 BLEU points, which indicates a promising scaling direction.  \n\n  \nFigure 1: Trend of Transformer depths of state-of-the-art NLP models over time.\n\n# 1 Introduction\nRecent years have witnessed a trend towards large-scale Transformer (Vaswani et al., 2017) models. The capacity has substantially increased from millions of parameters (Devlin et al., 2019; Conneau et al., 2020) to billions (Radford et al., 2019; Brown et al., 2020; Huang et al., 2019; Raffel et al., 2020; Lepikhin et al., 2021; Rae et al., 2021; Lin et al., 2021; Smith et al., 2022), and even trillions (Du et al., 2021). Large-scale models yield state-of-the-art performance on a wide range of tasks, and show impressive abilities in few-shot and zero-shot learning. Despite an enormous number of parameters, their depths (as shown in Figure 1) are limited by the training instability of Transformers.  \n\nNguyen and Salazar (2019) find that pre-norm residual connections (Pre-LN) improve the stability of Transformers based on post-norm connections (Post-LN). However, the gradients of Pre-LN at bottom layers tend to be larger than at top layers (Shleifer et al., 2021), leading to a degradation in performance compared with Post-LN. In order to alleviate the above issue, there have been efforts on improving the optimization of deep Transformer by means of better initialization (Zhang et al., 2019a;b; Huang et al., 2020), or better architecture (Wang et al., 2019; Liu et al., 2020; Bachlechner et al., 2020; Shleifer et al., 2021). These approaches can stabilize a Transformer model with up to hundreds of layers. Yet, none of previous methods has been successfully scaled to 1,000 layers.  \n\nOur aim is to improve the training stability of Transformers and scale the model depth by orders of magnitude. To this end, we study the cause of unstable optimization, finding the exploding model update is responsible for the instability. Motivated by the above observation, we introduce a new normalization function (D EEP NORM ) at residual connections (He et al., 2016), which has theoretical justification of bounding the model update by a constant. The proposed method is simple yet effective, with just lines of code change. The approach improves the stability of Transformers so that we are able to scale model depth to more than 1,000 layers. Moreover, experimental results show that D EEP NORM combines the best of two worlds, i.e., good performance of Post-LN and stable training of Pre-LN. The proposed method can be a preferred alternative of Transformers, not only for extremely deep (such as ${>}1000$ layers) models, but also for existing large models. Notably, our 200-layer model with 3.2B parameters achieves 5 BLEU improvement on a massively multilingual machine translation benchmark compared to state-of-the-art model (Fan et al., 2021) with 48 layers and 12B model size.\n\n# 2 TL;DR for Practitioners\n<html><body><table><tr><td rowspan=\"2\" colspan=\"2\">def deepnorm(x): return</td><td rowspan=\"2\">Architectures</td><td colspan=\"2\">Encoder</td><td colspan=\"2\">Decoder</td></tr><tr><td></td><td>8</td><td></td><td>3</td></tr><tr><td rowspan=\"2\">def if</td><td>LayerNorm(x*Q +f(x)) deepnorm_init(w):</td><td>Encoder-only (e.g.,BERT)</td><td>(2N)</td><td>(8N)-</td><td></td><td></td></tr><tr><td>wis ffn v_proj out nn.init.xavier_normal_(w, gain=\u03b2)</td><td>t_proj']\uff1a Decoder-only (e.g.,GPT)</td><td></td><td></td><td>(2M)</td><td>(8M)-</td></tr><tr><td>elif Wis</td><td>['q-proj 'k_proj \uff1a nn.init.xavier_normal_(w,gain=1)</td><td>Encoder-decoder (e.g.,NMT, T5)</td><td>0.81(N4M)6</td><td>0.87(N4M)-16</td><td>(3M)</td><td>(12M)-</td></tr></table></body></html>  \n\nFigure 2: (a) Pseudocode for D EEP NORM . We take Xavier initialization (Glorot and Bengio, 2010) as an example, and it can be replaced with other standard initialization. Notice that $\\\\alpha$ is a constant. (b) Parameters of D EEP NORM for different architectures ( $N$ -layer encoder, $M$ -layer decoder).  \n\nAs shown in Figure 2, it is simple to implement our method based on Transformers with PostLN. Compared to Post-LN, D EEP NORM up-scales the residual connection before performing layer normalization. Besides, we down-scale the parameters during initialization. Notably, we only scale the weights of feed-forward networks, as well as the value projection and the output projection of attention layers. Moreover, the scales of residual connection and initialization are dependent on the architecture (Figure 2). We provide more details in Section 4.3.\n\n# 3 Instability of Deep Transformer\nWe study the causes of the instability for deep Transformers. Our analysis begins with the observation: better initialization methods stabilize the training of Transformer. This has also been verified by previous work (Zhang et al., 2019a; Huang et al., 2020; Xu et al., 2021). Therefore, we study the  \n\n  \nFigure 3: (a) Gradient norm in the top layers of 18L-18L models. (b) Gradient norm in the last layer of the models with depths varying from 6L-6L to 24L-24L. (c) Validation loss curves of 18L-18L models.  \n\n  \nFigure 4: Visualization of the model update, the average input of LNs, and the gradients for the 18L-18L models at the early stage of training.  \n\ntraining process of Post-LN with or without proper initialization. With better initialization, we downscale the weights of $l$ -th layer by $k_{l}=N-l+1,l\\\\in[1,N]$ after performing Xavier initialization. For example, the output projection $W_{o}^{l}$ of FFN in l-th layer is initialized as:  \n\n$$\nW_{o}^{l}\\\\backsim\\\\mathcal{N}\\\\left(0,\\\\frac{1}{k_{l}^{2}d^{\\\\prime}}\\\\right),\n$$  \n\nwhere $d^{\\\\prime}$ is an average of input and output dimensions. We name this model Post-LN-init. Notice that different from the prior work (Zhang et al., 2019a), we narrow the scale of lower layers instead of the higher layers. We believe that it helps to separate the effect of the gradient scale from the model update. Besides, Post-LN-init has the same architecture as Post-LN, which eliminates the impact from the architecture.  \n\nWe train 18L-18L Post-LN and 18L-18L Post-LN-init on the IWSLT-14 De-En machine translation dataset. Figure 3 visualizes their gradients and validation loss curves. As shown in Figure 3(c), Post-LN-init converged while Post-LN did not. Post-LN-init has an even larger gradient norm in the last several layers, although its weights have been scaled down. Furthermore, we visualize the gradient norm of the last decoder layer with varying model depth from 6L-6L to 24L-24L. Figure 3 shows that the gradient norm of Post-LN-init in the last layer is still much larger than that of Post-LN, regardless of model depth. It concludes that the exploding gradients in deep layers should not be the root cause of instability of Post-LN, while the scale of model update tends to account for it.  \n\nThen we demonstrate that the instability of Post-LN comes from a chain of several issues, including gradient vanishing as well as too large model updates. As shown in Figure 4(a), we first visualize the norm of model update $||\\\\Delta F||$ at the early stage of training:  \n\n$$\n||\\\\Delta F||=||F(x,\\\\theta_{i})-F(x,\\\\theta_{0})||,\n$$  \n\nwhere $x$ and $\\\\theta_{i}$ denotes input, and model parameters after $i$ -th updates. Post-LN has an exploding update at the very beginning of training, and then nearly no update shortly. It indicates that the model has been stuck in a spurious local optima. Both warm-up and better initialization help alleviate this issue, enabling the model to update smoothly. When the update explodes, the inputs to LN become large (see Figure $4({\\\\mathsf{b}})$ and Figure 4(c)). According to the theoretical analysis from Xiong et al. (2020), the magnitude of gradient through LN is inversely proportional to the magnitude of its input:  \n\n$$\n||\\\\frac{\\\\partial L N(x)}{\\\\partial x}||=\\\\mathcal{O}(\\\\frac{\\\\sqrt{d}}{||x||}).\n$$  \n\nFigure 4(b) and Figure 4(c) show that $||x||$ is significantly larger than $\\\\sqrt{d}$ ($d=512)$ )without warm-up or proper initialization. This explains the gradient vanishing problem occurred in the training of Post-LN (see Figure 4(d)).  \n\nAbove all, the instability starts from the large model update at the beginning of training. It renders the model trapped in a bad local optima, which in turn increases the magnitude of inputs to each LN. As training continues, the gradient through LN becomes increasingly small, thus resulting in severe gradient vanishing. The vanishing gradients make it difficult to escape from the local optima, and further destabilize the optimization. On the contrary, Post-LN-init has relatively small updates, and the inputs to LN are stable. This relieves suffering from gradient vanishing, making optimization more stable.\u300d\n", "dreams_guidance_context": "### Step by Step Decomposition\n\n#### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n- **\u5173\u952e\u95ee\u9898**: LayerNorm\u548cRMSNorm\u5728Transformer\u6a21\u578b\u4e2d\u7684\u5177\u4f53\u8868\u73b0\u548c\u9002\u7528\u6027\u6709\u4f55\u4e0d\u540c\uff1f\n- **\u7814\u7a76\u76ee\u6807**: \u4ece\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u5728\u4e0d\u540c\u4efb\u52a1\uff08\u5982\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001\u56fe\u50cf\u5904\u7406\u7b49\uff09\u4e2d\u7684\u6548\u679c\u7b49\u65b9\u9762\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\u3002\n\n#### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n- **\u7b97\u6cd5\u548c\u65b9\u6cd5**: \n  - **LayerNorm**: \u5728\u6bcf\u4e2a\u5b50\u6a21\u5757\uff08\u5982\u81ea\u6ce8\u610f\u529b\u6216\u524d\u9988\u7f51\u7edc\uff09\u4e4b\u540e\u5e94\u7528\uff0c\u516c\u5f0f\u4e3a\uff1a\n    $$\n    \\mathrm{LayerNorm}(\\mathbf{x})=\\frac{\\mathbf{x}-\\mathbf{E}(\\mathbf{x})}{\\sqrt{\\mathbf{V}(\\mathbf{x})}}\\cdot\\mathbf{g}+\\mathbf{b},\n    $$\n    \u5176\u4e2d$\\mathbf{g}$\u548c$\\mathbf{b}$\u662f\u53ef\u8bad\u7ec3\u7684\u589e\u76ca\u548c\u504f\u7f6e\u3002\n  - **RMSNorm**: \u66ff\u4ee3LayerNorm\uff0c\u51cf\u5c11\u8ba1\u7b97\u5f00\u9500\u5e76\u63d0\u9ad8\u8bad\u7ec3\u7a33\u5b9a\u6027\uff0c\u516c\u5f0f\u4e3a\uff1a\n    $$\n    \\mathrm{RMSNorm}(\\mathbf{x})=\\frac{\\mathbf{x}}{\\sqrt{\\mathbf{E}(\\mathbf{x}^2)}}\\cdot\\mathbf{g}.\n    $$\n  - **PCA\u6280\u672f**: \u7528\u4e8e\u6a21\u578b\u5207\u7247\u548c\u538b\u7f29\uff0c\u901a\u8fc7\u8ba1\u7b97\u6b63\u4ea4\u77e9\u9635$\\mathbf{Q}_{\\ell}$\u6765\u5b9e\u73b0\u3002\n\n#### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n- **\u5b9e\u9a8c\u8bbe\u8ba1**:\n  - **\u6570\u636e\u96c6**: \u4f7f\u7528WikiText-2\u548cAlpaca\u8bad\u7ec3\u6570\u636e\u96c6\u8fdb\u884c\u6821\u51c6\u3002\n  - **\u6a21\u578b**: \u5728OPT\u3001LLAMA-2\u548cPhi-2\u6a21\u578b\u5bb6\u65cf\u4e0a\u8fdb\u884c\u5b9e\u9a8c\u3002\n  - **\u4efb\u52a1**: \u8bed\u8a00\u751f\u6210\u548c\u96f6\u6837\u672c\u4efb\u52a1\u3002\n  - **\u786c\u4ef6**: \u4f7f\u7528Quadro RTX6000\u3001A100\u548cH100 GPU\u8fdb\u884c\u5b9e\u9a8c\u3002\n- **\u5b9e\u9a8c\u7ed3\u679c**:\n  - **LayerNorm vs. RMSNorm**: RMSNorm\u5728\u8ba1\u7b97\u6548\u7387\u548c\u6a21\u578b\u538b\u7f29\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u800cLayerNorm\u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\u4ecd\u7136\u5177\u6709\u4e0d\u53ef\u66ff\u4ee3\u7684\u4f18\u52bf\u3002\n  - **PostNorm vs. PreNorm**: PostNorm\u5728\u96f6\u6837\u672c\u7ffb\u8bd1\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8ePreNorm\uff0c\u5c3d\u7ba1PreNorm\u5728\u8bad\u7ec3\u7a33\u5b9a\u6027\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\n\n#### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n- **\u5c40\u9650\u6027**:\n  - **\u8ba1\u7b97\u5f00\u9500**: RMSNorm\u867d\u7136\u51cf\u5c11\u4e86\u8ba1\u7b97\u5f00\u9500\uff0c\u4f46\u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\u53ef\u80fd\u4e0d\u5982LayerNorm\u6709\u6548\u3002\n  - **\u5b9e\u9a8c\u6570\u636e**: \u5b9e\u9a8c\u6570\u636e\u53ef\u80fd\u5b58\u5728\u5076\u7136\u6027\u6216\u4e0d\u7a33\u5b9a\u6027\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u3002\n- **\u672a\u6765\u65b9\u5411**:\n  - **\u7ed3\u5408\u4f18\u70b9**: \u63a2\u7d22\u5982\u4f55\u7ed3\u5408LayerNorm\u548cRMSNorm\u7684\u4f18\u70b9\uff0c\u4ee5\u4f18\u5316Transformer\u6a21\u578b\u7684\u6027\u80fd\u3002\n  - **\u6269\u5c55\u4efb\u52a1**: \u5728\u66f4\u591a\u4efb\u52a1\u548c\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u5b9e\u9a8c\uff0c\u9a8c\u8bc1\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u666e\u9002\u6027\u3002\n  - **\u7406\u8bba\u5206\u6790**: \u6df1\u5165\u7406\u8bba\u5206\u6790\uff0c\u63a2\u8ba8\u5f52\u4e00\u5316\u65b9\u6cd5\u5bf9\u6a21\u578b\u8bad\u7ec3\u548c\u6027\u80fd\u7684\u5f71\u54cd\u673a\u5236\u3002\n\n### \u6700\u7ec8\u603b\u7ed3\n\u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n1. **LayerNorm\u548cRMSNorm\u7684\u9002\u7528\u6027**: RMSNorm\u5728\u8ba1\u7b97\u6548\u7387\u548c\u6a21\u578b\u538b\u7f29\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u800cLayerNorm\u5728\u67d0\u4e9b\u4efb\u52a1\u4e2d\u4ecd\u7136\u5177\u6709\u4e0d\u53ef\u66ff\u4ee3\u7684\u4f18\u52bf\u3002\n2. **PostNorm\u548cPreNorm\u7684\u8868\u73b0**: PostNorm\u5728\u96f6\u6837\u672c\u7ffb\u8bd1\u4efb\u52a1\u4e2d\u8868\u73b0\u4f18\u4e8ePreNorm\uff0c\u5c3d\u7ba1PreNorm\u5728\u8bad\u7ec3\u7a33\u5b9a\u6027\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\n3. **\u672a\u6765\u7814\u7a76\u65b9\u5411**: \u7ed3\u5408LayerNorm\u548cRMSNorm\u7684\u4f18\u70b9\uff0c\u6269\u5c55\u5b9e\u9a8c\u4efb\u52a1\u548c\u6570\u636e\u96c6\uff0c\u6df1\u5165\u7406\u8bba\u5206\u6790\uff0c\u4ee5\u4f18\u5316Transformer\u6a21\u578b\u7684\u6027\u80fd\u3002\n\n\u8fd9\u4e9b\u7ed3\u8bba\u5c06\u6709\u52a9\u4e8e\u6df1\u5165\u7406\u89e3\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u5f52\u4e00\u5316\u6280\u672f\uff0c\u5e76\u4e3a\u672a\u6765\u7684\u7814\u7a76\u63d0\u4f9b\u65b0\u7684\u601d\u8def\u3002", "evolutionary_step": "### Step by Step Decomposition\n\n#### 1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\n   - \u5bf9\u8bdd\u4e2d\u5e76\u672a\u76f4\u63a5\u6d89\u53ca\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u7684\u8bed\u4e49\u4fe1\u606f\u3002\u7136\u800c\uff0cTransformer\u6a21\u578b\u53ca\u5176\u53d8\u4f53\uff08\u5982BERT\u3001RoBERTa\uff09\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4efb\u52a1\u4e2d\u7684\u5e94\u7528\uff0c\u53ef\u4ee5\u89c6\u4e3a\u8bed\u4e49\u4fe1\u606f\u5728\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u4e00\u79cd\u8868\u73b0\u5f62\u5f0f\u3002\u7279\u522b\u662fLayerNorm\u548cRMSNorm\u5728Transformer\u4e2d\u7684\u5e94\u7528\uff0c\u6d89\u53ca\u5230\u5bf9\u8f93\u5165\u6570\u636e\u7684\u5f52\u4e00\u5316\u5904\u7406\uff0c\u8fd9\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9\u8bed\u4e49\u4fe1\u606f\u7684\u4e00\u79cd\u9884\u5904\u7406\u6b65\u9aa4\u3002\n\n#### 2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\n   - \u5bf9\u8bdd\u4e2d\u8ba8\u8bba\u4e86LayerNorm\u548cRMSNorm\u5728Transformer\u6a21\u578b\u4e2d\u7684\u8868\u73b0\uff0c\u7279\u522b\u662f\u5b83\u4eec\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u6548\u679c\u3002\u8fd9\u4e9b\u8ba8\u8bba\u6d89\u53ca\u5230\u7b97\u6cd5\u5728\u4e0d\u540c\u60c5\u5883\u4e0b\u7684\u8868\u73b0\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u4f18\u5316\u6280\u672f\uff08\u5982PCA\u3001\u6b63\u4ea4\u77e9\u9635\u7684\u5e94\u7528\uff09\u6765\u63d0\u5347\u6a21\u578b\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\uff08\u5982PCA\u5728\u6a21\u578b\u538b\u7f29\u4e2d\u7684\u5e94\u7528\uff09\u4e5f\u662f\u7814\u7a76\u7684\u4e00\u90e8\u5206\u3002\n\n#### 3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\n   - \u5bf9\u8bdd\u4e2d\u63d0\u5230\u4e86Transformer\u6a21\u578b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u7a33\u5b9a\u6027\u95ee\u9898\uff0c\u7279\u522b\u662fPostNorm\u548cPreNorm\u5728\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\u5dee\u5f02\u3002\u8fd9\u4e9b\u8ba8\u8bba\u6d89\u53ca\u5230\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u53cd\u9988\u673a\u5236\uff08\u5982\u68af\u5ea6\u6d88\u5931\u3001\u6a21\u578b\u66f4\u65b0\u7206\u70b8\u7b49\uff09\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u6539\u8fdb\u5f52\u4e00\u5316\u65b9\u6cd5\uff08\u5982DeepNorm\uff09\u6765\u7a33\u5b9a\u8bad\u7ec3\u3002\u8fd9\u4e9b\u6539\u8fdb\u65b9\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u8f6c\u5316\u5173\u7cfb\uff08\u5982\u6a21\u578b\u6df1\u5ea6\u6269\u5c55\u52301000\u5c42\uff09\u4e5f\u662f\u7814\u7a76\u7684\u91cd\u70b9\u3002\n\n#### 4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\n   - \u5bf9\u8bdd\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u4e86LayerNorm\u548cRMSNorm\u7684\u56fa\u5b9a\u5f62\u5f0f\u53ca\u5176\u5728Transformer\u6a21\u578b\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\uff0c\u7814\u7a76\u8005\u5206\u6790\u4e86\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u6548\u679c\uff0c\u5e76\u63a2\u8ba8\u4e86\u5b83\u4eec\u7684\u53ef\u62d3\u5c55\u6027\uff08\u5982\u6a21\u578b\u538b\u7f29\u3001\u6df1\u5ea6\u6269\u5c55\uff09\u3002\u6b64\u5916\uff0c\u5bf9\u8bdd\u4e2d\u8fd8\u63d0\u5230\u4e86\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\uff0c\u5982\u901a\u8fc7PCA\u5206\u6790\u6a21\u578b\u7684\u4fe1\u53f7\u77e9\u9635\uff0c\u8fdb\u800c\u4f18\u5316\u6a21\u578b\u7ed3\u6784\u3002\n\n### \u603b\u7ed3\n\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5Transformer\u6a21\u578b\u4e2d\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\uff08LayerNorm\u548cRMSNorm\uff09\u5c55\u5f00\uff0c\u8ba8\u8bba\u4e86\u5b83\u4eec\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\uff0c\u7814\u7a76\u8005\u5206\u6790\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\uff0c\u5e76\u63d0\u51fa\u4e86\u6539\u8fdb\u65b9\u6848\uff08\u5982DeepNorm\uff09\u4ee5\u63d0\u5347\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u3002\u8fd9\u4e9b\u7814\u7a76\u6d89\u53ca\u5230\u7b97\u6cd5\u4f18\u5316\u3001\u53cd\u9988\u673a\u5236\u3001\u6a21\u578b\u6269\u5c55\u7b49\u591a\u4e2a\u65b9\u9762\uff0c\u5c55\u793a\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u5728\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u7684\u5e7f\u6cdb\u5e94\u7528\u548c\u6df1\u5165\u63a2\u7d22\u3002", "dreams_personality_context": "### Step by Step Decomposition\n\n#### 1. **\u7406\u89e3\u4efb\u52a1\u8981\u6c42**\n   - \u4efb\u52a1\u8981\u6c42\u603b\u7ed3\u7247\u6bb5\u4e2d\u4eba\u7269\u7684\u6027\u683c\u3002\u7136\u800c\uff0c\u63d0\u4f9b\u7684\u7247\u6bb5\u4e3b\u8981\u6d89\u53ca\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u6280\u672f\u8ba8\u8bba\uff0c\u5e76\u672a\u76f4\u63a5\u63cf\u8ff0\u4eba\u7269\u6027\u683c\u3002\u56e0\u6b64\uff0c\u9700\u8981\u4ece\u5bf9\u8bdd\u5185\u5bb9\u4e2d\u63a8\u65ad\u51fa\u4eba\u7269\u7684\u6027\u683c\u7279\u5f81\u3002\n\n#### 2. **\u5206\u6790\u5bf9\u8bdd\u5185\u5bb9**\n   - \u5bf9\u8bdd\u5185\u5bb9\u4e3b\u8981\u56f4\u7ed5Transformer\u6a21\u578b\u4e2d\u7684\u5f52\u4e00\u5316\u65b9\u6cd5\uff08LayerNorm\u548cRMSNorm\uff09\u5c55\u5f00\uff0c\u8ba8\u8bba\u4e86\u5b83\u4eec\u5728\u8ba1\u7b97\u590d\u6742\u5ea6\u3001\u8bad\u7ec3\u7a33\u5b9a\u6027\u4ee5\u53ca\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u7814\u7a76\u8005\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\uff0c\u5206\u6790\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\uff0c\u5e76\u63d0\u51fa\u4e86\u6539\u8fdb\u65b9\u6848\uff08\u5982DeepNorm\uff09\u4ee5\u63d0\u5347\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u3002\n\n#### 3. **\u63a8\u65ad\u4eba\u7269\u6027\u683c**\n   - **\u4e25\u8c28\u6027**\uff1a\u7814\u7a76\u8005\u8be6\u7ec6\u8ba8\u8bba\u4e86LayerNorm\u548cRMSNorm\u7684\u56fa\u5b9a\u5f62\u5f0f\u53ca\u5176\u5728Transformer\u6a21\u578b\u4e2d\u7684\u8868\u73b0\uff0c\u5e76\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u3002\u8fd9\u8868\u660e\u7814\u7a76\u8005\u5177\u6709\u4e25\u8c28\u7684\u79d1\u5b66\u6001\u5ea6\u3002\n   - **\u521b\u65b0\u6027**\uff1a\u7814\u7a76\u8005\u63d0\u51fa\u4e86\u6539\u8fdb\u65b9\u6848\uff08\u5982DeepNorm\uff09\u4ee5\u63d0\u5347\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u6027\u80fd\uff0c\u5c55\u793a\u4e86\u5176\u521b\u65b0\u601d\u7ef4\u3002\n   - **\u6279\u5224\u6027\u601d\u7ef4**\uff1a\u7814\u7a76\u8005\u5206\u6790\u4e86\u7b97\u6cd5\u5728\u4e0d\u540c\u60c5\u5883\u4e0b\u7684\u8868\u73b0\uff0c\u5e76\u63a2\u8ba8\u4e86\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\uff0c\u8fd9\u8868\u660e\u5176\u5177\u6709\u6279\u5224\u6027\u601d\u7ef4\u3002\n   - **\u5408\u4f5c\u7cbe\u795e**\uff1a\u5bf9\u8bdd\u4e2d\u63d0\u5230\u4e86\u901a\u8fc7PCA\u5206\u6790\u6a21\u578b\u7684\u4fe1\u53f7\u77e9\u9635\uff0c\u8fdb\u800c\u4f18\u5316\u6a21\u578b\u7ed3\u6784\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u5230\u56e2\u961f\u5408\u4f5c\uff0c\u5c55\u793a\u4e86\u7814\u7a76\u8005\u7684\u5408\u4f5c\u7cbe\u795e\u3002\n\n### \u603b\u7ed3\n\u6839\u636e\u5bf9\u8bdd\u5185\u5bb9\uff0c\u53ef\u4ee5\u63a8\u65ad\u51fa\u7814\u7a76\u8005\u7684\u6027\u683c\u7279\u5f81\u5305\u62ec\u4e25\u8c28\u6027\u3001\u521b\u65b0\u6027\u3001\u6279\u5224\u6027\u601d\u7ef4\u548c\u5408\u4f5c\u7cbe\u795e\u3002\u8fd9\u4e9b\u7279\u5f81\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\u5f97\u5230\u4e86\u5145\u5206\u4f53\u73b0\uff0c\u5c55\u793a\u4e86\u5176\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u7684\u4e13\u4e1a\u7d20\u517b\u548c\u56e2\u961f\u5408\u4f5c\u80fd\u529b\u3002", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["497f9c7c-4ab8-4ac6-bd59-4567d9485e83"], "metadata": {}}}, "analysis_store/metadata": {"497f9c7c-4ab8-4ac6-bd59-4567d9485e83": {"analysis_hash": "", "ref_analysis_id": ""}}}