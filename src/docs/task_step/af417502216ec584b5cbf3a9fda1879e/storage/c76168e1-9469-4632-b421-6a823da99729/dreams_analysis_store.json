{"analysis_store/data": {"8b84e9fd-e099-4591-9354-52b80734ba05": {"__data__": {"id_": "8b84e9fd-e099-4591-9354-52b80734ba05", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### Step by Step Decomposition\n\n#### Step 1: \u7406\u89e3\u4efb\u52a1\u80cc\u666f\n- **\u4efb\u52a1\u80cc\u666f**: \u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\u5b66\u7814\u7a76\u5b66\u8005\uff0c\u60a8\u5df2\u7ecf\u67e5\u9605\u4e86\u300a\u4f5c\u4e3a\u6fc0\u60c5\u7684\u7231\u60c5\u300b\u5362\u66fc\u7f16\u5199\u7684\u4e66\u7c4d\uff0c\u5c1d\u8bd5\u901a\u8fc7\u53c2\u8003\u6587\u732e\u4e2d\u5b9a\u4e49\u7684\u7231\u60c5\u8bed\u4e49\u5b66\uff0c\u4ece\u6587\u672c\u4e2d\u603b\u7ed3\u4e0b\u65b9\u7247\u6bb5\u3002\n- **\u76ee\u6807**: \u7814\u7a76\u4ea4\u6d41\u5a92\u4ecb\u9886\u57df\u7684\u8bed\u4e49\u4fe1\u606f\uff0c\u7814\u7a76\u6fc0\u60c5\u7684\u975e\u7406\u6027\u4e0e\u98ce\u96c5\u60c5\u672f\u7684\u5076\u7136\u6027\uff0c\u7814\u7a76\u81ea\u8eab\u7684\u5feb\u611f\u662f\u5426\u8f6c\u79fb\u5230\u793e\u4f1a\u884c\u4e3a\u4e0a\uff0c\u7814\u7a76\u8bed\u4e49\u4fe1\u606f\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u843d\u7a7a\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u6fc0\u53d1\u6027\u62d3\u5c55\u5230\u5426\u5b9a\u7269\u4e4b\u4e2d\u3002\n\n#### Step 2: \u5206\u6790\u6587\u672c\u5185\u5bb9\n- **\u6587\u672c\u5185\u5bb9**: \u89d2\u8272\u3001\u5185\u5bb9\u3001\u5206\u955c\u3002\n- **\u89d2\u8272**: \u672a\u660e\u786e\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5206\u6790\u3002\n- **\u5185\u5bb9**: \u672a\u660e\u786e\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5206\u6790\u3002\n- **\u5206\u955c**: \u672a\u660e\u786e\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u5206\u6790\u3002\n\n#### Step 3: \u7814\u7a76\u7a81\u51fa\u7279\u70b9\n- **\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0**: \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u7684\u8868\u73b0\u5f62\u5f0f\u3002\n- **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528**: \u63a2\u8ba8\u5362\u66fc\u7684\u7406\u8bba\u5728\u5f71\u89c6\u4f5c\u54c1\u4e2d\u7684\u5e94\u7528\u3002\n- **\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528**: \u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u5e94\u7528\u3002\n- **\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027**: \u7814\u7a76\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u5f71\u54cd\u3002\n- **\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**: \u5206\u6790\u5a92\u4f53\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u64ad\u548c\u5f71\u54cd\u3002\n- **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u7684\u5185\u5bb9**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\u3002\n- **\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6**: \u7814\u7a76\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u63a5\u8fd1\u7a0b\u5ea6\u3002\n- **\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5982\u4f55\u89e3\u91ca\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n- **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u9644\u8fd1\u7814\u7a76\u9886\u57df**: \u7814\u7a76\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u76f8\u5173\u9886\u57df\u3002\n- **\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u9886\u57df\u3002\n- **\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u53e0**: \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u5408\u70b9\u3002\n- **\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u76f8\u4ea4**: \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u4ea4\u96c6\u3002\n\n#### Step 4: \u603b\u7ed3\u4e0e\u5efa\u8bae\n- **\u5efa\u8bae**: \n  1. \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  2. \u7814\u7a76\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3002\n  3. \u6df1\u5165\u7814\u7a76\u5362\u66fc\u7684\u7406\u8bba\uff0c\u4ee5\u4e86\u89e3\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3002\n  4. \u7814\u7a76\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027\u3002\n  5. \u5206\u6790\u5a92\u4f53\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u64ad\u548c\u5f71\u54cd\u3002\n  6. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\u3002\n  7. \u7814\u7a76\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u63a5\u8fd1\u7a0b\u5ea6\u3002\n  8. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u5982\u4f55\u89e3\u91ca\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3002\n  9. \u7814\u7a76\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u76f8\u5173\u9886\u57df\u3002\n  10. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u9886\u57df\u3002\n  11. \u7814\u7a76\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u5408\u70b9\u3002\n  12. \u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u4ea4\u96c6\u3002\n\n#### Step 5: \u6700\u7ec8\u7b54\u6848\n\u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n- **\u7814\u7a76\u91cd\u70b9**: \u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u548c\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u60c5\u611f\u56e0\u7d20\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u91cd\u8981\u6027\u3001\u5a92\u4f53\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u4f20\u64ad\u548c\u5f71\u54cd\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u7684\u5173\u8054\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u63a5\u8fd1\u7a0b\u5ea6\u3001\u5362\u66fc\u7406\u8bba\u5982\u4f55\u89e3\u91ca\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u76f8\u5173\u9886\u57df\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u9886\u57df\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u7684\u91cd\u5408\u70b9\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u7684\u4ea4\u96c6\u3002\n- **\u5efa\u8bae**: \u6df1\u5165\u7814\u7a76\u4ee5\u4e0a\u5404\u4e2a\u9886\u57df\uff0c\u4ee5\u5168\u9762\u7406\u89e3\u5362\u66fc\u7684\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\u548c\u5f71\u54cd\u3002\n\n\u901a\u8fc7\u8fd9\u4e9b\u7814\u7a76\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u7231\u60c5\u5728\u793e\u4f1a\u4e2d\u7684\u8868\u73b0\u548c\u5f71\u54cd\uff0c\u4ee5\u53ca\u5362\u66fc\u7406\u8bba\u5728\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u7684\u4f5c\u7528\u3002", "scene_monologue_context": "**\u72ec\u767d\u4fe1\u606f\uff1a**\n\n\u4eca\u5929\uff0c\u6211\u6df1\u5165\u7814\u7a76\u4e86LayerNorm\u548cRMSNorm\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u3002\u6211\u7279\u522b\u5173\u6ce8\u4e86\u5b83\u4eec\u5728\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u548c\u591a\u6a21\u6001\u6570\u636e\u65f6\u7684\u8868\u73b0\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u4f18\u5316\u6548\u679c\u3002\u901a\u8fc7\u67e5\u9605\u76f8\u5173\u6587\u732e\u548c\u5b9e\u9a8c\u6570\u636e\uff0c\u6211\u53d1\u73b0LayerNorm\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u5c24\u5176\u662f\u5728\u89c6\u89c9-\u8bed\u8a00\u8f6c\u6362\u4efb\u52a1\u4e2d\uff0c\u5b83\u80fd\u591f\u6709\u6548\u5730\u5c06\u89c6\u89c9\u7279\u5f81\u6620\u5c04\u5230\u8bed\u8a00\u9886\u57df\uff0c\u5c55\u73b0\u51fa\u5f3a\u5927\u7684\u9886\u57df\u9002\u5e94\u80fd\u529b\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cRMSNorm\u867d\u7136\u5728\u8ba1\u7b97\u6548\u7387\u4e0a\u6709\u4e00\u5b9a\u4f18\u52bf\uff0c\u4f46\u5728\u5904\u7406\u590d\u6742\u591a\u6a21\u6001\u6570\u636e\u65f6\uff0c\u5176\u8868\u73b0\u4e0d\u5982LayerNorm\u7a33\u5b9a\u3002\n\n\u6211\u8fd8\u6ce8\u610f\u5230\uff0cLayerNorm\u7684\u68af\u5ea6\u65b9\u5dee\u8f83\u5c0f\uff0c\u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u66f4\u5feb\u5730\u6536\u655b\u5230\u66f4\u597d\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002\u8fd9\u4e00\u70b9\u5728\u5b9e\u9a8c\u6570\u636e\u4e2d\u5f97\u5230\u4e86\u9a8c\u8bc1\uff0cLayerNorm\u8c03\u4f18\u7684\u6a21\u578b\u5728\u591a\u4e2a\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u90fd\u4f18\u4e8e\u5168\u53c2\u6570\u5fae\u8c03\u7684\u6a21\u578b\u3002\u6b64\u5916\uff0cLayerNorm\u8c03\u4f18\u8fd8\u663e\u8457\u51cf\u5c11\u4e86\u53ef\u8bad\u7ec3\u53c2\u6570\u7684\u6570\u91cf\uff0c\u4f7f\u5f97\u5728\u6d88\u8d39\u7ea7GPU\u4e0a\u8fdb\u884c\u9ad8\u6548\u5fae\u8c03\u6210\u4e3a\u53ef\u80fd\u3002\n\n\u603b\u7684\u6765\u8bf4\uff0c\u4eca\u5929\u7684\u63a2\u7d22\u8ba9\u6211\u5bf9LayerNorm\u548cRMSNorm\u6709\u4e86\u66f4\u6df1\u5165\u7684\u7406\u89e3\uff0c\u5c24\u5176\u662f\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u5e94\u7528\u3002LayerNorm\u4f5c\u4e3a\u4e00\u79cd\u7b80\u5355\u800c\u6709\u6548\u7684\u8c03\u4f18\u65b9\u6cd5\uff0c\u5c55\u73b0\u4e86\u5176\u5728\u63d0\u5347\u6a21\u578b\u6027\u80fd\u548c\u6548\u7387\u65b9\u9762\u7684\u5de8\u5927\u6f5c\u529b\u3002\u672a\u6765\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u8fdb\u4e00\u6b65\u7814\u7a76\u5982\u4f55\u4f18\u5316\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u4ee5\u5e94\u5bf9\u66f4\u590d\u6742\u7684\u5e94\u7528\u573a\u666f\u3002", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "c76168e1-9469-4632-b421-6a823da99729:\u300c\u53d8\u4f53\u300d\nc76168e1-9469-4632-b421-6a823da99729:\u300c### \u95ee\u9898\uff1a\n\u5728\u5927\u6a21\u578b\u4e2d\uff0cLayerNorm\u548cRMSNorm\u4f5c\u4e3a\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u53d8\u4f53\uff0c\u5206\u522b\u9488\u5bf9\u54ea\u4e9b\u7279\u5b9a\u4efb\u52a1\u6216\u573a\u666f\u8fdb\u884c\u4e86\u4f18\u5316\uff1f\u5b83\u4eec\u5728\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u6216\u591a\u6a21\u6001\u6570\u636e\u65f6\uff0c\u5404\u81ea\u7684\u4f18\u52bf\u548c\u5c40\u9650\u6027\u662f\u4ec0\u4e48\uff1f\u300d\nc76168e1-9469-4632-b421-6a823da99729:\u300cref_ids: 454895409734360760, chunk_ids: 3, Score: 0.3359, Text: # 5 I NTUITIONS BEHIND LAYER NORM TUNING\nIn this section, driven by the empirical success of LayerNorm tuning, we explore the intuitions behind LayerNorm from three perspectives, domain adaptation, expressive power, and gradient variance.  \n\nTable 3: Model performance on different data types. Methods with 80K and Conv.20K suffix are tuned on the full 80K data and the 20K conversational data, respectively.   \n\n\n<html><body><table><tr><td>Method</td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td colspan=\"6\">MM-V1CUNA-7B</td></tr><tr><td>Finetune-80K</td><td>625.2/270.7</td><td>15.40</td><td>67.50</td><td>34.61</td><td>73.8/76.5/66.5</td></tr><tr><td>LayerNorm-80K</td><td>723.2/253.2</td><td>17.06</td><td>80.89</td><td>48.01</td><td>76.1/81.1/70.8</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>777.1/231.4</td><td>15.39</td><td>67.30</td><td>40.33</td><td>75.2/79.2/68.8</td></tr><tr><td colspan=\"6\">MM-LLAMA2-7B</td></tr><tr><td>Finetune-80K</td><td>661.3/237.1</td><td>16.09</td><td>65.08</td><td>31.64</td><td>56.3/65.0/55.4</td></tr><tr><td>LayerNorm-80K</td><td>583.2/200.7</td><td>16.78</td><td>88.85</td><td>49.24</td><td>66.6/68.5/64.9</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>376.2/157.5</td><td>16.19</td><td>86.80</td><td>44.88</td><td>50.5/50.7/50.3</td></tr><tr><td colspan=\"6\">MM-LLAMA2-CHAT-7B</td></tr><tr><td>Finetune-80K</td><td>805.4/234.6</td><td>15.29</td><td>57.40</td><td>26.70</td><td>60.3/69.8/57.9</td></tr><tr><td>LayerNorm-80K</td><td>651.3/219.3</td><td>16.60</td><td>75.34</td><td>43.75</td><td>71.3/72.4/67.8</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>482.9/172.1</td><td>13.88</td><td>66.85</td><td>41.95</td><td>62.7/71.7/61.3</td></tr><tr><td colspan=\"6\">MM-LLAMA2-13B</td></tr><tr><td>Finetune-80K</td><td>402.3/199.3</td><td>18.33</td><td>73.88</td><td>45.33</td><td>51.6/51.1/52.2</td></tr><tr><td>LayerNorm-80K</td><td>526.0/177.5</td><td>15.31</td><td>82.92</td><td>48.42</td><td>60.0/69.1/58.9</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>646.0/242.9</td><td>16.01</td><td>76.50</td><td>44.86</td><td>70.0/76.9/68.6</td></tr><tr><td colspan=\"6\">MM-LLAMA2-CHAT-13B</td></tr><tr><td>Finetune-80K</td><td>623.3/221.4</td><td>15.17</td><td>64.19</td><td>41.82</td><td>67.6/64.8/64.5</td></tr><tr><td>LayerNorm-80K</td><td>929.3/254.3</td><td>16.10</td><td>74.96</td><td>42.79</td><td>78.9/83.9/74.3</td></tr><tr><td>LayerNorm-Conv. 20K</td><td>769.7/227.5</td><td>15.57</td><td>73.30</td><td>43.08</td><td>68.2/72.8/65.3</td></tr></table></body></html>  \n\nTable 4: Results of models with LayerNorm and/or vision-language Connector activated.   \n\n\n<html><body><table><tr><td>Method</td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td colspan=\"6\">MM-LLAMA2-7B</td></tr><tr><td>LayerNorm + Connector</td><td>583.2/200.7</td><td>16.78</td><td>88.85</td><td>49.24</td><td>66.6/68.5/64.9</td></tr><tr><td>Connector</td><td>311.1/105.4</td><td>12.72</td><td>60.43</td><td>35.91</td><td>67.9/73.7/66.9</td></tr><tr><td>LayerNorm</td><td>395.0/191.4</td><td>18.18</td><td>80.13</td><td>41.68</td><td>50.3/51.3/50.2</td></tr><tr><td colspan=\"6\">MM-LLAMA2-13B</td></tr><tr><td>LayerNorm + Connector</td><td>526.0/177.5</td><td>15.31</td><td>82.92</td><td>48.42</td><td>60.0/69.1/58.9</td></tr><tr><td>Connector</td><td>507.0/187.9</td><td>15.22</td><td>62.60</td><td>25.13</td><td>60.9/66.8/60.1</td></tr><tr><td>LayerNorm</td><td>405.0/188.6</td><td>16.51</td><td>70.41</td><td>39.86</td><td>50.9/52.7/51.0</td></tr></table></body></html>\n\n# 5.1 LAYER NORM TUNING A DAPTS LLM S TO MULTI -M ODAL\nInfluence of the Vision-Language Connector The vision-language connector serves as the converter to project features from the vision encoder to the LLM domain. In our previous experiments, we focused on finetuning the LLM component of the MLLMs while keeping the vision-language connector activated by default. To determine which component plays a more important role for domain adaptation of LLM to multi-modal domain, we performed an ablation study by activating the two components separately. Results are presented in table 4 , tuning LayerNorm in attention blocks without activating the vision-language connector resulted in only a $4.2\\\\%$ and $5.4\\\\%$ decrease in performance on three traditional multi-modal tasks and the MME benchmark, respectively. This decrease is significantly lower than the $15.6\\\\%$ and $9.2\\\\%$ downgrade observed when only activating the Connector on the same tasks. This observation highlights the vital role LayerNorm plays in transforming knowledge from the vision domain to language, indicating LayerNorm as a strong domain adaptor for the LLM architecture.  \n\n  \n\nFigure 3: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNorm-tuned MM-V ICUNA -7B. The average layer similarity of two models are 0.624 and 0.585, respectively.  \n\nTable 5: Results of models with LL A MA2 Finetuned/LayerNorm-tuned with ViT pre-trained on ImageNet (Deng et al. ,2009 ), which have not been aligned with the language domain.   \n\n\n<html><body><table><tr><td></td><td>MME</td><td>VQAv2</td><td>MSCOCO</td><td>Flickr30k</td><td>POPE</td></tr><tr><td>Finetune-7B</td><td>406.79/182.5</td><td>15.05</td><td>47.75</td><td>18.97</td><td>50.0/51.6/50.1</td></tr><tr><td>LayerNorm-7B</td><td>301.51/127.14</td><td>15.48</td><td>66.22</td><td>31.73</td><td>50.0/50.1/50.1</td></tr><tr><td>Finetune-13B</td><td>375.41/171.79</td><td>25.38</td><td>51.26</td><td>25.96</td><td>50.3/51.1/51.0</td></tr><tr><td>LayerNorm-13B</td><td>445.98/150.0</td><td>15.59</td><td>64.63</td><td>32.17</td><td>51.2/53.0/50.8</td></tr></table></body></html>  \n\nSwitching Visual Features. We employ the ViT encoder from CLIP ( Radford et al. ,2021 ) by default in our previous experiments. CLIP ( Radford et al. ,2021 ) models are trained with image-text contrastive loss, thus its feature space is already aligned with language. Since LayerNorm has shown its effectiveness as a domain adaptor, we are interested in testing whether or not LayerNorm tuning can adapt a LLM to image features that are not pretrained to align with language. The vision encoder is switched to a ViT model that was pretrained on ImageNet (Dosovitskiy et al. ,2021 ;Deng et al. ,2009 ). Results in table 5 demonstrate that both LayerNorm and finetuning approaches can yield high performance. Interestingly, we observe that by LayerNorm tuning with ImageNet trained ViT, which has not been aligned with language, the model is able to achieve comparable performance to full parameter finetuning , i.e ., results show that LayerNorm tuning outperforms finetuning by $12.0\\\\%$ on captioning tasks, but performs slightly worse by $5.0\\\\%$ on the MME benchmark. These results again indicates the domain adaptor role of the LayerNorm , hinting the reason behind the empircal success of LayerNorm tuning. Furthermore, it is worth noting that the performance of MLLMs incorporating ViT pretrained on ImageNet is generally inferior to that of CLIP\u2019s vision encoder. This observation provides compelling evidence that, despite differences in tokenizer and training paradigm between CLIP\u2019s text encoder and LL A MA\u2019s, ViT from CLIP has the capacity to learn general patterns of language formulation during pre-training. Thus, significantly enhance MLLM abilities.\n\n# 5.2 LAYER NORM TUNING I MPROVES THE EXPRESSIVE POWER\nIt is shown in Pires et al. (2023 ) that a Transformer model incorporating anisotropic layer representation can capture a wider range of learning patterns. By computing the cosine similarities between all layers in the LLM of a finetuned MLLM, we aim to investigate whether the improved efficiency is the results of the improved expressive power. In table 6 , we present the average layer similarity of three 7B scale MLLMs, and in fig. 3 we present the visualization of per layer similarity scores of MM-V ICUNA -7B. Our analysis reveals that the transformer layers in the MLLMs with LayerNorm tuning exhibit a clear distinction from one another ( i.e ., an average $10.6\\\\%$ lower layer similarities comparing finetuning), indicating superior generalization ability and expressive power compared to finetuning. This finding sheds light on why tuning LayerNorm is effective for multi-modal LLM training. For additional visualizations, please refer to the Appendix A.2.1 .  \n\n  \nFigure 4: Gradients of the input LayerNorm in the 11th layer of the MM-V ICUNA as training proceeds. LayerNorm-tuned model has lower gradient variance than full parameter finetuning.  \n\nTable 6: Layer representation similarity of LayerNorm and finetuning methods on three 7B MLLMs.   \nLower the similarity is, the better expressive power a model possesses.  \n\n<html><body><table><tr><td>Model</td><td>LayerNorm Sim.</td><td>Finetuning Sim.</td></tr><tr><td>MM-VICUNA</td><td>0.585</td><td>0.624</td></tr><tr><td>MM-LLAMA2</td><td>0.504</td><td>0.591</td></tr><tr><td>MM-LLAMA2-CHAT</td><td>0.550</td><td>0.617</td></tr></table></body></html>\u300d\nc76168e1-9469-4632-b421-6a823da99729:\u300cref_ids: 454847042436311108, chunk_ids: 4, Score: 0.3086, Text: # 3.3 A TRANSFORMATION PER BLOCK\nNow that every LayerNorm in the transformer has been converted to RMSNorm, we can select any $\\\\mathbf{Q}$ to modify the model. Our initial plan was to collect signals from the model, construct an orthogonal matrix using those signals and to delete parts of the network. We quickly saw that the signals at different blocks of the network were not aligned, and that we would need to apply a different orthogonal matrix at each block, $\\\\mathbf{Q}_{\\\\ell}$ .  \n\nAllowing the orthogonal matrix used in each block to differ can be shown to leave the model unchanged using the same proof as Theorem 1 ,  \n\n  \nFigure 3: Converting a transformer network from LayerNorm to RMSNorm: the scale matrix diag $(\\\\alpha)$ is absorbed into the subsequent matrix $\\\\mathbf{W}_{\\\\mathrm{in}}$ . Figure shows the block in combined colors. We use $(\\\\alpha)$ for brevity. The mean-subtraction matrix $\\\\mathbf{M}$ is applied to each matrix $\\\\mathbf{W}_{\\\\mathrm{out}}$ . Layernorm becomes RMSNorm, up to a constant $\\\\bar{\\\\sqrt{D}}$ (not shown). Here, the scaling $(\\\\alpha^{\\\\prime})$ comes from the previous block.  \n\n  \nFigure 4: With the network converted to RMSNorm (see Figure 3 ), we apply the computational-invariance idea. The input weight matrices $\\\\mathrm{diag}(\\\\alpha)\\\\mathbf{W}_{\\\\mathrm{in}}$ are pre-multiplied by $\\\\mathbf{Q}^{\\\\top}$ . The output matrices $\\\\mathbf{W}_{\\\\mathrm{out}}\\\\mathbf{M}$ are post-multiplied by $\\\\mathbf{Q}$ . In the skip-connection, a new linear layer is added $\\\\mathbf{Q}_{\\\\ell}^{\\\\top}\\\\mathbf{Q}_{\\\\ell+1}$ . After these modifications, the matrices can be sliced (hatched areas).  \n\nwith the exception of line 5 of Algorithm 1 . Here we see that the residual connection and the output of the block must have the same rotation. To fix this, we modify the residual connection by applying the linear transformation applied to different blocks with the additional linear operation in the residual connection. Unlike the $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212to the residual. Figure 4 shows how different rotations can be modifications to the weight matrices, these additional operations cannot be pre-computed and add a small $(D\\\\times D)$ overhead to the model. Nonetheless, they are needed to allow slicing the model (Section 3.4 ) and we see real speedup overall (Section 4 ).  \n\nTo compute the matrices $\\\\mathbf{Q}_{\\\\ell}$ , we use PCA. We select a calibration dataset from the training set, run it through the model (after converting LayerNorm operations into RMSNorm), and extract the orthogonal matrix of the layer. We use the output of the transformed network to calculate the orthogonal matrices of the next layers. More precisely, if $\\\\mathbf{X}_{\\\\ell,i}$ is the output of the $\\\\ell^{\\\\mathrm{th}}$ RMSNorm block for the $i^{\\\\mathrm{th}}$ sequence in the calibration dataset, we compute  \n\n$$\n\\\\mathbf{C}_{\\\\ell}=\\\\sum_{i}\\\\mathbf{X}_{\\\\ell,i}^{\\\\top}\\\\mathbf{X}_{\\\\ell,i}\n$$  \n\nand set $\\\\mathbf{Q}_{\\\\ell}$ to the be the eigenvectors of $\\\\mathbf{C}_{\\\\ell}$ , sorted by decreasing eigenvalues.\n\n# 3.4 SLICING\nThe goal of Principal Component Analysis is usually to take a data matrix $\\\\mathbf{X}$ and compute a lower dimensional representation $\\\\mathbf{Z}$ , and an approximate reconstruction $\\\\tilde{\\\\mathbf{X}}$ :  \n\n$$\n\\\\mathbf{Z}=\\\\mathbf{X}\\\\mathbf{Q}\\\\mathbf{D}\\\\,,\\\\qquad\\\\tilde{\\\\mathbf{X}}=\\\\mathbf{Z}\\\\mathbf{D}^{\\\\top}\\\\mathbf{Q}^{\\\\top}\\\\,.\n$$  \n\nwhere $\\\\mathbf{Q}$ is the ectors of ${\\\\bf X}^{\\\\top}{\\\\bf X}$ , and $\\\\mathbf{D}$ is a $D\\\\times D_{\\\\mathrm{small}}$ deletion matrix (containing $D_{\\\\mathrm{small}}$ The reconstruction is columns of the $D\\\\times D$ \u00d7$L_{2}$ identity matrix), which removes some of the columns of the matrix to the left. optimal, in the sense that QD is a linear mapping that minimizes $\\\\lVert\\\\mathbf{X}-\\\\tilde{\\\\mathbf{X}}\\\\rVert^{2}$ .  \n\nWhen we apply PCA to the signal matrix $\\\\mathbf{X}$ bween blocks, we never materialize the $N\\\\times D$ signal matrix, but we apply the deletion matrix Dto the operations preceding and succeeding the construction of that matrix, which have already been multiplied by $\\\\mathbf{Q}$ in the above. We delete rows of $\\\\mathbf{W}_{\\\\mathrm{in}}$ that we have inserted into the residual connection (see Figure and columns of $\\\\mathbf{W}_{\\\\mathrm{out}}$ and $\\\\mathbf{W}_{\\\\mathrm{embd}}$ . We also delete both rows 4 ). and columns of the matrix $\\\\mathbf{Q}_{\\\\ell-1}^{\\\\top}\\\\mathbf{Q}_{\\\\ell}$ \u2212\n\n# 4 EXPERIMENTAL VALIDATION\nSetup We use HuggingFace Transformers ( Wolf et al. ,2019 ) to implement our code with PyTorch (Paszke et al. ,2019 ). The computation of $\\\\mathbf{Q}$ is performed on a single H100 GPU with 80GB of memory, taking approximately 3.5 hours to complete for the L LAMA -2 70B model. During the PCA calculation, we use double precision for computing the eigenvectors of the covariance matrix. We find that using single precision for eigenvector calculations in PyTorch leads to a discrepancy in the final accuracy, as detailed in Appendix A.2 .  \n\nWe experiment with two different calibration sets: 1024 samples from the WikiText-2 training dataset ( Merity et al. ,2016 ) and 5000 samples from the Alpaca training dataset ( Taori et al. ,2023 ). Sequence lengths are chosen as the maximum of each language model. An ablation study on the calibration set size and sequence length is presented in Appendix A.3 .  \n\nModels, Tasks, and GPUs We evaluate all our experiments on OPT ( Zhang et al. ,2022 ), L LAMA -2 (Touvron et al. ,2023 ) model families, and additionally evaluate Phi-2 (in our zero-shot task) experiments. We exclude OPT 175B, as it is outperformed by smaller L LAMA -2 models. Nonetheless, we anticipate that this larger model will yield improved results, as larger models typically offer more promising opportunities for compression (see Section 4.1 ). We evaluate our scheme on both language generation as well as popular zero-shot tasks. To demonstrate the comprehensive speedup achieved by SliceGPT we use: Quadro RTX6000 GPUs with 24GB of memory as a representative example of consumer-level GPUs; 40GB A100s and 80GB H100s to provide datacenter-level benchmarks.  \n\nBaseline Setup We initially planned to compare our results against a scheme that pruned columns (or rows) with the smallest norm but found that this baseline was very poor, with the perplexity of the model soaring into the 1000s after pruning just a few columns. Instead, we compare SliceGPT against SparseGPT ( Frantar & Alistarh ,2023 ) employing a 2:4 sparsity ratio, as this is the only sparsity scheme which achieves speedup ( Mishra et al. ,2021 ).\u300d\nc76168e1-9469-4632-b421-6a823da99729:\u300cref_ids: 454847819065993190, chunk_ids: 1, Score: 0.2812, Text: # 5.3 LAYER NORM TUNING HAS SMALLER GRADIENT VARIANCE\nA well accepted view about LayerNorm is that, as the neural network goes deeper, the mean of LayerNorm gradients should goes to zero as the LayerNorm itself is designed to normalize all training parameters. In the meantime, the variance of LayerNorm gradients should be small to ensure a better generalization ability of the model ( Xu et al. ,2019 ) (See the proof in Appendix A.2.2 ). As we presented in fig. 4 , MLLM with LayerNorm tuning method has a more concentrated LayerNorm gradients than fine-tuning during the training process. This result gives another view on the effectiveness of LayerNorm from the optimization perspective. More visualizations are listed in Appendix A.2.2 .\n\n# 6 CONCLUSION AND DISCUSSIONS\nLayerNorm is effective and sufficient built upon MLLM pre-training. MLLM training typically involves pre-training on image-text pairs followed by finetuning on visual instruction data. While the second stage of training receives more attention, it is worth noting that the function of the first stage pre-training is non-negligible for training a competent MLLM. We have presented in the paper only a small portion of parameter activation is sufficient to tune a well-behaved MLLM. However, other models such as I NSTRUCT BLIP ( Dai et al. ,2023 ) and M INI GPT4 ( Zhu et al. ,2023 ) only tune the vision-language connector, leaving the LLM untouched during the second stage of training. These models have yielded strong performances when given a large-scale finetuning dataset. In Sec. 5.1 , we demonstrate that tuning LayerNorm may be a more effective means for the second stage training, especially when compared to existing parameter-efficient methods for training MLLMs.  \n\nLimitations. One shortcoming of these parameter-efficient finetuning methods is that they are more sensitive to hyper-parameters ( e.g ., learning rate, training epoch) than finetuning. Since the number of trainable parameters of LayerNorm is small, the model performance of LayerNorm method also varies when twitching the training hyper-parameters. This drawback calls for potential future investigations on the LayerNorm tuning method. In the Appendix A.1 , we give a hint for the grid search range of learning rate on both 7B and 13B scaled models using LayerNorm tuning based on our experimental results.  \n\nConclusion. Our studies demonstrate LayerNorm tuning as a simple yet effective tuning method for adapting LLMs comprehend multi-modal content across various model variants. Compared to LoRA tuning or full parameter finetuning, LayerNorm tuning reduces the trainable parameters by a significant $41.9\\\\%$ , enabling efficient finetuning of MLLMs on consumer-grade GPUs. Moreover, we demonstrate that MLLMs can achieve exceptional performance with minimal \u201cright\u201d data and parameters, showcasing the potential of LayerNorm tuning method in real-world applications. Given the empirical success of LayerNorm tuning, we revisited the MLLM finetuning from a domain adaptation perspective and showed that LayerNorm plays a critical role in adapting LLMs to the multi-modal domain. Additionally, our research illustrates the expressive power and optimization potential of LayerNorm tuning from layer similarities and the gradient variance. We hope that our work could inspire future works on designing improved PEFT methods that enable more diverse application scenarios for MLLMs.\n\n\n\n# A A PPENDIX\n\n# A.1 TRAINING DETAILS\nFor the first stage, we set the learning rate to 2e-3 for all variants. During the second stage, we search learning the learning rate from [2e-3, 1e-3, 6e-4, 3e-4, 1e-4, 5e-5, 2e-5, 1e-5, 6e-6, 1e-6, 1e-7] for all models and pick the best learning rate based on their performances on the CIDEr score on the Flickr $30\\\\,\\\\mathrm{k}$ task.  \n\nAccording to our tryouts based on Flickr $30\\\\,\\\\mathrm{k}$ results in Table A1 , the recommended learning rate for 7B scale is between 6e-4 to 2e-3, while on the 13B, the learning rate should be searched in the range of 3e-6 to 6e-5.  \n\nTable A1: Performance of MLLMs (LayerNorm-simp.) trained with different learning rates and scales on the Flickr30k task.   \n\n\n<html><body><table><tr><td>Learning Rate</td><td>3e-6</td><td>1e-5</td><td>3e-5</td><td>6e-5</td></tr><tr><td>MM-LLAMA2 7B</td><td>21.42</td><td>32.45</td><td>43.04</td><td>28.24</td></tr><tr><td>Learning Rate</td><td>6e-4</td><td>1e-3</td><td>2e-3</td><td></td></tr><tr><td>MM-LLAMA213B</td><td>37.35</td><td>46.88</td><td>44.15</td><td></td></tr></table></body></html>\n\n# A.2INSIGHTS OFLAYERNORMTUNING\n\n# A.2.1 VISUALIZATION EXAMPLES OF LAYER SIMILARITIES\nLower similarities between different layers of the transformer indicates more expressive power ( Pires et al. ,2023 ). In section 5.2 , we have shown the computed cosine similarity between layers on a Vicuna model, here we show the layer similarities between layers on LL A MA2 and LL A MA2 CHAT models in fig. A1 and fig. A2 . It is clear that, LayerNorm tuning again allows the model to learn dissimilar layer representations, improving the expressive power of the model.\n\n# A.2.2 GRADIENTS OF LAYER NORM\nVisualization examples of LayerNorm gradients. In fig. A3 and fig. A4 , we present the gradients of the LayerNorm parameters during the training process. Similar to the one we have shown in the main text, LayerNorm tuning demonstrates a smaller gradient variance which is important for converging to a better local minimum ( Xu et al. ,2019 ).  \n\nProof of smaller variance in LayerNorm . As stated in Sec. 5.3 , deeper the network is, the variance of LayerNorm in the model should be naturally smaller ( $\\\\mathrm{\\\\DeltaXu}$ et al. ,2019 ). We first let $\\\\mathbf{y}\\\\,=\\\\,(y_{1},y_{2},...,y_{N})$ be the normalized vector, meaning the mean and variance of $\\\\mathbf{y}$ is 0 and 1 ,respectively. We can then formulate the standard LayerNorm as follow:  \n\n$$\n{\\\\mathbf{y}}={\\\\frac{\\\\mathbf{x}-{\\\\boldsymbol{\\\\mu}}}{\\\\sigma}},\\\\quad{\\\\boldsymbol{\\\\mu}}={\\\\frac{1}{N}}\\\\sum_{i=1}^{N}x_{i},\\\\quad\\\\sigma={\\\\sqrt{{\\\\frac{1}{N}}\\\\sum_{i=1}^{N}\\\\left(x_{i}-{\\\\boldsymbol{\\\\mu}}\\\\right)^{2}}},\n$$  \n\nwhere $\\\\mathbf{x}=(x_{1},x_{2},...,x_{N})$ is the input vector and $N$ is the dimension of $\\\\mathbf{x}$ .$\\\\mu$ and $\\\\sigma$ are the mean and standard deviation of $\\\\mathbf{x}$ .  \n\nWe first define $\\\\mathbf{1}_{N}=\\\\underbrace{(1,1,...,1)^{\\\\intercal}}_{N}$ . For calculating the gradients of the normalized vector $\\\\mathbf{y}$ , we first simulate the backward propagation regarding the loss {z }$\\\\ell$ :  \n\n$$\n{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{x}}}=\\\\left({\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\mathbf{x}}}+{\\\\frac{\\\\partial\\\\mu}{\\\\partial\\\\mathbf{x}}}{\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\mu}}+{\\\\frac{\\\\partial\\\\sigma}{\\\\partial\\\\mathbf{x}}}{\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\sigma}}\\\\right){\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}={\\\\frac{1}{\\\\sigma}}\\\\left(I-{\\\\frac{\\\\mathbf{y}\\\\mathbf{y}^{\\\\intercal}}{N}}-{\\\\frac{\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\intercal}}{N}}\\\\right){\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}.\n$$  \n\n  \nFigure A1: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNormtuned MM-LL A MA2-7B.  \n\nHere we define $\\\\begin{array}{r l r}{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf x}}&{{}\\\\!\\\\!=}&{\\\\!\\\\!(a_{1},a_{2},...,a_{N})}\\\\end{array}$ with mean $\\\\bar{a}$ and standard deviation $D_{a}$ , and $\\\\begin{array}{r l}{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}&{{}=}\\\\end{array}$ $(b_{1},b_{2},...,b_{N})$ with mean $\\\\bar{b}$ and standard deviation $D_{b}$ . We set $\\\\begin{array}{r}{W_{1}\\\\;=\\\\;I\\\\,-\\\\,\\\\frac{{\\\\bf y}{\\\\bf y}^{\\\\intercal}}{N}\\\\,-\\\\,\\\\frac{{\\\\bf1}_{N}{\\\\bf1}_{N}^{\\\\intercal}}{N}}\\\\end{array}$ \u2212, we can verify that:  \n\n$$\n\\\\lfloor\\\\mathbf{\\\\Pi}_{N}^{\\\\mathsf{T}}W_{1}=\\\\mathbf{1}_{N}^{\\\\mathsf{T}}{\\\\frac{1}{\\\\sigma}}\\\\left(I-{\\\\frac{\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\mathsf{T}}+\\\\mathbf{y}\\\\mathbf{y}^{\\\\mathsf{T}}}{N}}\\\\right)={\\\\frac{1}{\\\\sigma}}\\\\left(\\\\mathbf{1}_{N}-{\\\\frac{\\\\mathbf{1}_{N}^{\\\\mathsf{T}}\\\\mathbf{1}_{N}}{N}}\\\\mathbf{1}_{N}^{\\\\mathsf{T}}-{\\\\frac{\\\\mathbf{1}_{N}^{\\\\mathsf{T}}\\\\mathbf{y}}{N}}\\\\mathbf{y}^{\\\\mathsf{T}}\\\\right)={\\\\frac{\\\\mathbf{1}_{N}-\\\\mathbf{1}_{N}-0}{\\\\sigma}}=0\n$$  \n\nTherefore, we can easily proof that $N\\\\bar{a}\\\\propto{\\\\bf1}_{N}^{\\\\top}W_{1}\\\\bar{b}=0$ , which means the mean of $\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{x}}$ should be zero. Then we dive into proofing the variance of LayerNorm gradients should be small when the number of network parameters $N$ becomes large.  \n\n$$\n\\\\begin{array}{l}{{\\\\displaystyle{D_{a}=\\\\sum_{i=1}^{N}(a_{i}-\\\\bar{a})^{2}/N=\\\\sum_{i=1}^{N}a_{i}^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{(a_{1},a_{2},\\\\ldots,a_{N})^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(b_{1},b_{2},\\\\ldots,b_{N}\\\\right)^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(b_{1}-\\\\bar{b},b_{2}-\\\\bar{b},\\\\ldots,b_{N}-\\\\bar{b}\\\\right)^{\\\\top}+W_{1}\\\\bar{b}{\\\\bf1}_{N}}\\\\right\\\\|^{2}/N}\\\\ }}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(g_{1}-\\\\bar{b},g_{2}-\\\\bar{b},\\\\ldots,g_{N}-\\\\bar{b}\\\\right)^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{\\\\leq W_{1}^{2}\\\\sum_{i=1}^{N}(b_{i}-\\\\bar{b})^{2}/N}\\\\ }}\\\\end{array}\n$$  \n\nSince the projection matrix $W_{1}$ is idempotent, we have $W_{1}^{2}=W_{1}$ . That is to say, when $N$ is large enough, there stands the network parameter $\\\\begin{array}{r}{D_{a}\\\\le\\\\big(I-\\\\frac{\\\\mathbf{y}\\\\mathbf{y}^{\\\\top}+\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\top}}{N}\\\\big)\\\\sum_{i=1}^{N}(b_{i}-\\\\bar{b_{}})^{2}/N\\\\propto1/N^{2}}\\\\end{array}$ Nis large, the gradient variance of LayerNorm should be small. P\u2212. As a consequence, when  \n\n  \nFigure A2: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNormtuned MM-LL A MA2-7B CHAT .  \n\n  \nFigure A3: The gradients of both input and post LayerNorm in 21st layer of the MM-V ICUNA as the training proceeds.  \n\n  \nFigure A4: The gradients of both input and post LayerNorm in 11th layer of the MM-V ICUNA as the training proceeds.\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u7814\u7a76\u7684\u6838\u5fc3\u95ee\u9898\u548c\u76ee\u6807\u3002\u6839\u636e\u7814\u7a76\u4e3b\u9898\u6897\u6982\uff0c\u5173\u952e\u95ee\u9898\u5305\u62ec\uff1a\n- **LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u4f18\u5316\u4efb\u52a1\u548c\u573a\u666f**\uff1a\u5b83\u4eec\u5206\u522b\u9488\u5bf9\u54ea\u4e9b\u7279\u5b9a\u4efb\u52a1\u6216\u573a\u666f\u8fdb\u884c\u4e86\u4f18\u5316\uff1f\n- **\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u548c\u591a\u6a21\u6001\u6570\u636e\u65f6\u7684\u8868\u73b0**\uff1a\u5b83\u4eec\u5728\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u6216\u591a\u6a21\u6001\u6570\u636e\u65f6\uff0c\u5404\u81ea\u7684\u4f18\u52bf\u548c\u5c40\u9650\u6027\u662f\u4ec0\u4e48\uff1f\n\n\u76ee\u6807\u662f\u901a\u8fc7\u5206\u6790\u6587\u732e\u548c\u5b9e\u9a8c\u6570\u636e\uff0c\u7406\u89e3\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u5e76\u8bc4\u4f30\u5b83\u4eec\u7684\u4f18\u5316\u6548\u679c\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5206\u6790\u6587\u732e\u4e2d\u4f7f\u7528\u7684\u7b97\u6cd5\u548c\u65b9\u6cd5\u3002\u5177\u4f53\u95ee\u9898\u5305\u62ec\uff1a\n- **LayerNorm\u548cRMSNorm\u7684\u5177\u4f53\u5b9e\u73b0**\uff1a\u8fd9\u4e24\u79cd\u5f52\u4e00\u5316\u65b9\u6cd5\u5728\u5927\u6a21\u578b\u4e2d\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\n- **\u4e0e\u4e3b\u6d41\u65b9\u6cd5\u7684\u5dee\u5f02**\uff1a\u8fd9\u4e9b\u65b9\u6cd5\u662f\u5426\u4e0e\u5f53\u524d\u7684\u4e3b\u6d41\u65b9\u6cd5\u6709\u663e\u8457\u5dee\u5f02\uff1f\u662f\u5426\u6709\u65b0\u7684\u4f18\u5316\u6280\u5de7\u6216\u7b97\u6cd5\u521b\u65b0\uff1f\n\n\u901a\u8fc7\u6587\u732e\u5206\u6790\uff0c\u6211\u4eec\u53d1\u73b0LayerNorm\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u5c24\u5176\u662f\u5728\u89c6\u89c9-\u8bed\u8a00\u8f6c\u6362\u4efb\u52a1\u4e2d\uff0c\u5b83\u80fd\u591f\u6709\u6548\u5730\u5c06\u89c6\u89c9\u7279\u5f81\u6620\u5c04\u5230\u8bed\u8a00\u9886\u57df\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cRMSNorm\u867d\u7136\u5728\u8ba1\u7b97\u6548\u7387\u4e0a\u6709\u4e00\u5b9a\u4f18\u52bf\uff0c\u4f46\u5728\u5904\u7406\u590d\u6742\u591a\u6a21\u6001\u6570\u636e\u65f6\uff0c\u5176\u8868\u73b0\u4e0d\u5982LayerNorm\u7a33\u5b9a\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n\u6df1\u5165\u63a2\u8ba8\u5b9e\u9a8c\u90e8\u5206\uff0c\u6211\u4eec\u9700\u8981\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a\n- **\u5b9e\u9a8c\u8bbe\u8ba1\u5982\u4f55\u652f\u6301\u8bba\u6587\u4e2d\u7684\u5047\u8bbe**\uff1a\u5b9e\u9a8c\u8bbe\u8ba1\u662f\u5426\u5408\u7406\uff0c\u662f\u5426\u80fd\u591f\u6709\u6548\u9a8c\u8bc1\u5047\u8bbe\uff1f\n- **\u7ed3\u679c\u662f\u5426\u7b26\u5408\u9884\u671f**\uff1a\u5b9e\u9a8c\u7ed3\u679c\u662f\u5426\u652f\u6301\u4e86LayerNorm\u548cRMSNorm\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff1f\n- **\u5b9e\u9a8c\u6570\u636e\u7684\u9a8c\u8bc1**\uff1a\u662f\u5426\u5bf9\u5b9e\u9a8c\u7ed3\u679c\u8fdb\u884c\u4e86\u5145\u5206\u9a8c\u8bc1\uff0c\u662f\u5426\u5b58\u5728\u5076\u7136\u6027\u6216\u4e0d\u7a33\u5b9a\u6027\uff1f\n\n\u901a\u8fc7\u5206\u6790\u5b9e\u9a8c\u6570\u636e\uff0c\u6211\u4eec\u53d1\u73b0LayerNorm\u8c03\u4f18\u7684\u6a21\u578b\u5728\u591a\u4e2a\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u90fd\u4f18\u4e8e\u5168\u53c2\u6570\u5fae\u8c03\u7684\u6a21\u578b\u3002\u6b64\u5916\uff0cLayerNorm\u7684\u68af\u5ea6\u65b9\u5dee\u8f83\u5c0f\uff0c\u8fd9\u6709\u52a9\u4e8e\u6a21\u578b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u66f4\u5feb\u5730\u6536\u655b\u5230\u66f4\u597d\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n\u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u5173\u6ce8\u6587\u732e\u4e2d\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u7814\u7a76\u65b9\u5411\u3002\u5177\u4f53\u95ee\u9898\u5305\u62ec\uff1a\n- **\u7814\u7a76\u7684\u5c40\u9650\u6027**\uff1a\u4f5c\u8005\u662f\u5426\u63d0\u5230\u76ee\u524d\u7814\u7a76\u7684\u5c40\u9650\u6027\uff1f\u4f8b\u5982\uff0cLayerNorm\u8c03\u4f18\u5bf9\u8d85\u53c2\u6570\u7684\u654f\u611f\u6027\u3002\n- **\u672a\u6765\u7814\u7a76\u65b9\u5411**\uff1a\u4f5c\u8005\u662f\u5426\u63d0\u51fa\u4e86\u672a\u6765\u7814\u7a76\u7684\u5efa\u8bae\u6216\u62d3\u5c55\u65b9\u5411\uff1f\u8fd9\u4e9b\u65b9\u5411\u662f\u5426\u80fd\u63a8\u52a8\u9886\u57df\u7684\u8fdb\u4e00\u6b65\u53d1\u5c55\uff1f\n\n\u6587\u732e\u4e2d\u63d0\u5230\uff0cLayerNorm\u8c03\u4f18\u65b9\u6cd5\u5bf9\u8d85\u53c2\u6570\u8f83\u4e3a\u654f\u611f\uff0c\u8fd9\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76\u3002\u672a\u6765\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f18\u5316\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u4ee5\u5e94\u5bf9\u66f4\u590d\u6742\u7684\u5e94\u7528\u573a\u666f\u3002\n\n### \u603b\u7ed3\u4e0e\u5efa\u8bae\n\u901a\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a\n- **\u7814\u7a76\u91cd\u70b9**\uff1aLayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u4f18\u5316\u4efb\u52a1\u548c\u573a\u666f\uff0c\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u548c\u591a\u6a21\u6001\u6570\u636e\u65f6\u7684\u8868\u73b0\u3002\n- **\u5efa\u8bae**\uff1a\u6df1\u5165\u7814\u7a76LayerNorm\u548cRMSNorm\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u4f18\u5316\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u4ee5\u5e94\u5bf9\u66f4\u590d\u6742\u7684\u5e94\u7528\u573a\u666f\u3002\n\n\u901a\u8fc7\u8fd9\u4e9b\u7814\u7a76\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u548c\u4f18\u5316\u6f5c\u529b\uff0c\u4e3a\u672a\u6765\u7684\u7814\u7a76\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u53c2\u8003\u3002", "evolutionary_step": "### Step-by-Step Decomposition of the Dialogue\n\n#### 1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8ba8\u8bba\u4e86LayerNorm\u548cRMSNorm\u4f5c\u4e3a\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u53d8\u4f53\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u548c\u591a\u6a21\u6001\u6570\u636e\u65f6\u7684\u8868\u73b0\u88ab\u8be6\u7ec6\u5206\u6790\u3002\n   - **\u8bed\u4e49\u4fe1\u606f**\uff1aLayerNorm\u548cRMSNorm\u7684\u4f18\u5316\u76ee\u6807\u662f\u901a\u8fc7\u5f52\u4e00\u5316\u6280\u672f\u6765\u63d0\u5347\u6a21\u578b\u5728\u5904\u7406\u590d\u6742\u6570\u636e\uff08\u5982\u957f\u5e8f\u5217\u548c\u591a\u6a21\u6001\u6570\u636e\uff09\u65f6\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u8c03\u6574\u6a21\u578b\u7684\u5185\u90e8\u8868\u793a\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u66f4\u597d\u5730\u6355\u6349\u6570\u636e\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n\n#### 2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u63d0\u5230\u4e86LayerNorm\u548cRMSNorm\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u7279\u522b\u662f\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u6570\u636e\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0a\u7684\u6027\u80fd\u5dee\u5f02\u3002\n   - **\u975e\u7406\u6027\u8868\u73b0\u4e0e\u5076\u7136\u6027**\uff1aLayerNorm\u548cRMSNorm\u7684\u8868\u73b0\u5e76\u975e\u5b8c\u5168\u53ef\u9884\u6d4b\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u65f6\uff0c\u5b83\u4eec\u7684\u6027\u80fd\u53ef\u80fd\u4f1a\u53d7\u5230\u6570\u636e\u5206\u5e03\u3001\u6a21\u578b\u7ed3\u6784\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u8fd9\u79cd\u5076\u7136\u6027\u8868\u660e\uff0c\u4f18\u5316\u6280\u672f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u8981\u6839\u636e\u5177\u4f53\u4efb\u52a1\u8fdb\u884c\u8c03\u6574\u3002\n\n#### 3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8ba8\u8bba\u4e86LayerNorm\u5728\u591a\u6a21\u6001\u5927\u6a21\u578b\uff08MLLM\uff09\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662f\u5176\u5728\u89c6\u89c9-\u8bed\u8a00\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\uff0c\u5c55\u793a\u4e86LayerNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u53cd\u9988\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u8c03\u6574LayerNorm\u6765\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\n   - **\u53cd\u9988\u673a\u5236\u4e0e\u5e94\u7528\u8f6c\u5316**\uff1aLayerNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u8d77\u5230\u4e86\u5173\u952e\u7684\u53cd\u9988\u4f5c\u7528\uff0c\u7279\u522b\u662f\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\uff0c\u5b83\u80fd\u591f\u5e2e\u52a9\u6a21\u578b\u66f4\u597d\u5730\u9002\u5e94\u4e0d\u540c\u6a21\u6001\u7684\u6570\u636e\u3002\u8fd9\u79cd\u53cd\u9988\u673a\u5236\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u80fd\u591f\u663e\u8457\u63d0\u5347\u6a21\u578b\u7684\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u89c6\u89c9-\u8bed\u8a00\u4efb\u52a1\u4e2d\u3002\n\n#### 4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8be6\u7ec6\u5206\u6790\u4e86LayerNorm\u548cRMSNorm\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4e0d\u540c\u6a21\u578b\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u6570\u636e\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u6a21\u578b\u89c4\u6a21\uff08\u59827B\u548c13B\u6a21\u578b\uff09\u4e2d\u7684\u8868\u73b0\u5dee\u5f02\u3002\n   - **\u56e0\u679c\u6027\u4e0e\u53ef\u62d3\u5c55\u6027**\uff1aLayerNorm\u548cRMSNorm\u7684\u7b97\u6cd5\u7ed3\u6784\u4e0e\u5176\u6027\u80fd\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u56e0\u679c\u5173\u7cfb\u3002\u901a\u8fc7\u8c03\u6574\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u53ef\u4ee5\u663e\u8457\u5f71\u54cd\u6a21\u578b\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u89c4\u6a21\u7684\u6a21\u578b\u4e2d\u8868\u73b0\u51fa\u4e00\u5b9a\u7684\u53ef\u62d3\u5c55\u6027\uff0c\u8868\u660e\u5b83\u4eec\u5728\u5927\u89c4\u6a21\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u6f5c\u529b\u3002\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\u5219\u4f53\u73b0\u5728\u901a\u8fc7\u5206\u6790\u6a21\u578b\u7684\u8868\u73b0\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u3002\n\n### \u603b\u7ed3\n\u901a\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u770b\u51fa\u5bf9\u8bdd\u5185\u5bb9\u4e3b\u8981\u56f4\u7ed5LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u5c55\u5f00\uff0c\u8ba8\u8bba\u4e86\u5b83\u4eec\u5728\u5904\u7406\u590d\u6742\u6570\u636e\u65f6\u7684\u8868\u73b0\u3001\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\u3001\u53cd\u9988\u673a\u5236\u4ee5\u53ca\u7b97\u6cd5\u7ed3\u6784\u7684\u56e0\u679c\u6027\u548c\u53ef\u62d3\u5c55\u6027\u3002\u8fd9\u4e9b\u5185\u5bb9\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3001\u7b97\u6cd5\u4f18\u5316\u3001\u53cd\u9988\u673a\u5236\u548c\u6570\u636e\u7ed3\u6784\u7814\u7a76\u5bc6\u5207\u76f8\u5173\u3002", "dreams_personality_context": "### Step-by-Step Decomposition of the Dialogue\n\n#### 1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8ba8\u8bba\u4e86LayerNorm\u548cRMSNorm\u4f5c\u4e3a\u5f52\u4e00\u5316\u65b9\u6cd5\u7684\u53d8\u4f53\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u3002\u8fd9\u4e9b\u65b9\u6cd5\u5728\u5904\u7406\u957f\u5e8f\u5217\u6570\u636e\u548c\u591a\u6a21\u6001\u6570\u636e\u65f6\u7684\u8868\u73b0\u88ab\u8be6\u7ec6\u5206\u6790\u3002\n   - **\u8bed\u4e49\u4fe1\u606f**\uff1aLayerNorm\u548cRMSNorm\u7684\u4f18\u5316\u76ee\u6807\u662f\u901a\u8fc7\u5f52\u4e00\u5316\u6280\u672f\u6765\u63d0\u5347\u6a21\u578b\u5728\u5904\u7406\u590d\u6742\u6570\u636e\uff08\u5982\u957f\u5e8f\u5217\u548c\u591a\u6a21\u6001\u6570\u636e\uff09\u65f6\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u8c03\u6574\u6a21\u578b\u7684\u5185\u90e8\u8868\u793a\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u66f4\u597d\u5730\u6355\u6349\u6570\u636e\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n\n#### 2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u63d0\u5230\u4e86LayerNorm\u548cRMSNorm\u5728\u4e0d\u540c\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\uff0c\u7279\u522b\u662f\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u6570\u636e\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0a\u7684\u6027\u80fd\u5dee\u5f02\u3002\n   - **\u975e\u7406\u6027\u8868\u73b0\u4e0e\u5076\u7136\u6027**\uff1aLayerNorm\u548cRMSNorm\u7684\u8868\u73b0\u5e76\u975e\u5b8c\u5168\u53ef\u9884\u6d4b\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u65f6\uff0c\u5b83\u4eec\u7684\u6027\u80fd\u53ef\u80fd\u4f1a\u53d7\u5230\u6570\u636e\u5206\u5e03\u3001\u6a21\u578b\u7ed3\u6784\u7b49\u56e0\u7d20\u7684\u5f71\u54cd\u3002\u8fd9\u79cd\u5076\u7136\u6027\u8868\u660e\uff0c\u4f18\u5316\u6280\u672f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u8981\u6839\u636e\u5177\u4f53\u4efb\u52a1\u8fdb\u884c\u8c03\u6574\u3002\n\n#### 3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8ba8\u8bba\u4e86LayerNorm\u5728\u591a\u6a21\u6001\u5927\u6a21\u578b\uff08MLLM\uff09\u4e2d\u7684\u5e94\u7528\uff0c\u7279\u522b\u662f\u5176\u5728\u89c6\u89c9-\u8bed\u8a00\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\uff0c\u5c55\u793a\u4e86LayerNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u53cd\u9988\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u8c03\u6574LayerNorm\u6765\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\n   - **\u53cd\u9988\u673a\u5236\u4e0e\u5e94\u7528\u8f6c\u5316**\uff1aLayerNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u8d77\u5230\u4e86\u5173\u952e\u7684\u53cd\u9988\u4f5c\u7528\uff0c\u7279\u522b\u662f\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\uff0c\u5b83\u80fd\u591f\u5e2e\u52a9\u6a21\u578b\u66f4\u597d\u5730\u9002\u5e94\u4e0d\u540c\u6a21\u6001\u7684\u6570\u636e\u3002\u8fd9\u79cd\u53cd\u9988\u673a\u5236\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u80fd\u591f\u663e\u8457\u63d0\u5347\u6a21\u578b\u7684\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u89c6\u89c9-\u8bed\u8a00\u4efb\u52a1\u4e2d\u3002\n\n#### 4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\n   - **\u5bf9\u8bdd\u5185\u5bb9**\uff1a\u5bf9\u8bdd\u4e2d\u8be6\u7ec6\u5206\u6790\u4e86LayerNorm\u548cRMSNorm\u7684\u7b97\u6cd5\u7ed3\u6784\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4e0d\u540c\u6a21\u578b\u4e2d\u7684\u8868\u73b0\u3002\u901a\u8fc7\u5b9e\u9a8c\u6570\u636e\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u6a21\u578b\u89c4\u6a21\uff08\u59827B\u548c13B\u6a21\u578b\uff09\u4e2d\u7684\u8868\u73b0\u5dee\u5f02\u3002\n   - **\u56e0\u679c\u6027\u4e0e\u53ef\u62d3\u5c55\u6027**\uff1aLayerNorm\u548cRMSNorm\u7684\u7b97\u6cd5\u7ed3\u6784\u4e0e\u5176\u6027\u80fd\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u56e0\u679c\u5173\u7cfb\u3002\u901a\u8fc7\u8c03\u6574\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\uff0c\u53ef\u4ee5\u663e\u8457\u5f71\u54cd\u6a21\u578b\u7684\u6027\u80fd\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5728\u4e0d\u540c\u89c4\u6a21\u7684\u6a21\u578b\u4e2d\u8868\u73b0\u51fa\u4e00\u5b9a\u7684\u53ef\u62d3\u5c55\u6027\uff0c\u8868\u660e\u5b83\u4eec\u5728\u5927\u89c4\u6a21\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u6f5c\u529b\u3002\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\u5219\u4f53\u73b0\u5728\u901a\u8fc7\u5206\u6790\u6a21\u578b\u7684\u8868\u73b0\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u8fd9\u4e9b\u5f52\u4e00\u5316\u65b9\u6cd5\u3002\n\n### \u603b\u7ed3\n\u901a\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u770b\u51fa\u5bf9\u8bdd\u5185\u5bb9\u4e3b\u8981\u56f4\u7ed5LayerNorm\u548cRMSNorm\u5728\u5927\u6a21\u578b\u4e2d\u7684\u5e94\u7528\u5c55\u5f00\uff0c\u8ba8\u8bba\u4e86\u5b83\u4eec\u5728\u5904\u7406\u590d\u6742\u6570\u636e\u65f6\u7684\u8868\u73b0\u3001\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\u3001\u53cd\u9988\u673a\u5236\u4ee5\u53ca\u7b97\u6cd5\u7ed3\u6784\u7684\u56e0\u679c\u6027\u548c\u53ef\u62d3\u5c55\u6027\u3002\u8fd9\u4e9b\u5185\u5bb9\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u3001\u7b97\u6cd5\u4f18\u5316\u3001\u53cd\u9988\u673a\u5236\u548c\u6570\u636e\u7ed3\u6784\u7814\u7a76\u5bc6\u5207\u76f8\u5173\u3002", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["8b84e9fd-e099-4591-9354-52b80734ba05"], "metadata": {}}}, "analysis_store/metadata": {"8b84e9fd-e099-4591-9354-52b80734ba05": {"analysis_hash": "", "ref_analysis_id": ""}}}