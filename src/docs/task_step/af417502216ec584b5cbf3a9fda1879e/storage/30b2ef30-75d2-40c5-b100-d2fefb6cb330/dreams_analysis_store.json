{"analysis_store/data": {"1b119b65-a10d-482d-93fc-759d7eca9e52": {"__data__": {"id_": "1b119b65-a10d-482d-93fc-759d7eca9e52", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u4e86\u89e3\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3002\n3. **\u5176\u4ed6**\uff1a\u8003\u8651\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\u3001\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u7b49\u591a\u65b9\u9762\u7684\u7d27\u5bc6\u8054\u7cfb\u3002\n3. **\u6ce8\u91cd\u4ea4\u53c9\u7814\u7a76**\uff1a\u5173\u6ce8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u4ee5\u53ca\u4e24\u8005\u7684\u9760\u8fd1\u5ea6\u3002 ", "scene_monologue_context": "\u4eca\u5929\u6211\u6df1\u5165\u7814\u7a76\u4e86\u5173\u4e8eLayerNorm\u548cRMSNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u76f8\u5173\u8d44\u6599\uff0c\u771f\u662f\u6536\u83b7\u6ee1\u6ee1\u3002  \n\n\u8d44\u6599\u91cc\u8be6\u7ec6\u63a2\u8ba8\u4e86LayerNorm\u548cRMSNorm\u7684\u7814\u7a76\u6210\u679c\u5bf9\u540e\u7eed\u7814\u7a76\u7684\u91cd\u8981\u53c2\u8003\u4ef7\u503c\uff0c\u4ee5\u53ca\u5b83\u4eec\u5728\u4e0d\u540c\u5e94\u7528\u9886\u57df\u63d0\u5347\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6548\u7387\u7684\u5177\u4f53\u8868\u73b0\u4e0e\u4f5c\u7528\u673a\u5236\u3002  \n\n\u5728\u5173\u4e8eLayerNorm\u7684\u5b9e\u9a8c\u7ed3\u679c\u90e8\u5206\uff0c\u6709\u592a\u591a\u503c\u5f97\u5173\u6ce8\u7684\u70b9\u3002\u5728\u6ce8\u610f\u529b\u6a21\u5757\u4e2d\u8c03\u6574LayerNorm\u65f6\uff0c\u53ea\u6fc0\u6d3bLayerNorm\u5f97\u5230\u7684\u6fc0\u6d3b\u53c2\u6570\u6700\u5c11\uff0c\u4f46\u5728\u591a\u4e2a\u4efb\u52a1\u4e2d\u6a21\u578b\u8868\u73b0\u51fa\u8272\u3002\u5728\u4e24\u4e2a\u5b57\u5e55\u4efb\u52a1\u3001VQAv2\u4efb\u52a1\u4ee5\u53ca\u5177\u6709\u6311\u6218\u6027\u7684\u5e7b\u89c9\u57fa\u51c6POPE\u4e2d\uff0c\u4ec5\u6fc0\u6d3bLayerNorm\u7684\u6a21\u578b\u6bd4\u5176\u4ed6\u7ade\u4e89\u5bf9\u624b\u81f3\u5c11\u9ad8\u51fa8.2%\u3002\u5728\u7efc\u5408\u8bc4\u4f30\u57fa\u51c6MME\u4e0a\uff0c\u8c03\u6574LayerNorm\u5728\u611f\u77e5\u65b9\u9762\u6bd4\u5fae\u8c03\u5b8c\u6574\u8bed\u8a00\u6a21\u578b\u5e73\u5747\u9ad8\u51fa6.6%\uff0c\u4e0d\u8fc7\u5728\u8ba4\u77e5\u5f97\u5206\u4e0a\u5e73\u5747\u843d\u540e6.3%\uff0c\u53efLayerNorm\u53ea\u5360\u6574\u4e2a\u6a21\u578b\u8bad\u7ec3\u53c2\u6570\u7684\u7ea62.5%\u3002  \n\n\u8fdb\u4e00\u6b65\u5355\u72ec\u5fae\u8c03LayerNorm\uff08LayerNorm-simp.\uff09\u65f6\uff0c\u7ed3\u679c\u5f88\u6709\u8da3\u3002\u5373\u4f7f\u53ea\u5bf9\u6574\u4e2a\u6a21\u578b0.004%\u7684\u53c2\u6570\u8fdb\u884c\u5fae\u8c03\uff0cLayerNorm-simp.\u5728\u4e09\u4e2a\u4f20\u7edf\u89c6\u89c9\u8bed\u8a00\u4efb\u52a1\u4e0a\u6bd4\u5168\u53c2\u6570\u5fae\u8c03\u9ad8\u51fa10%\uff0c\u5728MME\u57fa\u51c6\u4e0a\u4e5f\u4ec5\u843d\u540e\u5168\u53c2\u6570\u5fae\u8c037.9%\u3002\u8fd9\u8868\u660e\u4eceLLM\u5230MLLMs\u7684\u8f6c\u53d8\u53ef\u80fd\u6d89\u53ca\u9886\u57df\u9002\u5e94\u8fc7\u7a0b\uff0c\u800c\u4e14LayerNorm\u53ef\u80fd\u80fd\u591f\u65e0\u7f1d\u5730\u5c06\u89c6\u89c9\u4fe1\u606f\u4e0e\u8bed\u8a00\u6807\u8bb0\u6574\u5408\u3002  \n\n\u5728\u5185\u5b58\u6d88\u8017\u548c\u53c2\u6570\u6548\u7387\u65b9\u9762\uff0cLayerNorm\u8c03\u4f18\u7684\u4f18\u52bf\u4e5f\u5f88\u660e\u663e\u3002\u5168\u53c2\u6570\u5fae\u8c03\u7b49\u65b9\u6cd5\u5728\u9ad8\u5bb9\u91cf80GB A100 GPU\u4e0a\u90fd\u4f1a\u9762\u4e34\u5185\u5b58\u4e0d\u8db3\u95ee\u9898\uff0c\u800c\u57fa\u4e8eLayerNorm\u7684\u65b9\u6cd5\u6548\u7387\u66f4\u9ad8\u30027B\u548c13B\u89c4\u6a21\u4e0b\uff0cLayerNorm\u8c03\u4f18\u5206\u522b\u53ea\u9700\u898124.2GB\u548c38.3GB\u5185\u5b58\uff0cLayerNorm-simp.\u66f4\u662f\u5c06\u5185\u5b58\u8fdb\u4e00\u6b65\u964d\u4f4e\u523018.9GB\u548c31.7GB\u3002\u5728\u53ef\u8bad\u7ec3\u53c2\u6570\u65b9\u9762\uff0cLayerNorm\u57287B\u548c13B\u89c4\u6a21\u4e0b\u4ec5\u4f7f\u7528\u603b\u53c2\u6570\u76843.78%\u548c2.50%\uff0cLayerNorm-simp.\u66f4\u662f\u4f4e\u81f30.004%\u548c0.003%\u3002  \n\n\u4ece\u6570\u636e\u4f7f\u7528\u89d2\u5ea6\uff0c\u901a\u8fc7\u5bf9LL A MA2-7B\u548cLL A MA2-7BCHAT\u7684\u5b9e\u9a8c\uff0c\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u7c7b\u540e\u53d1\u73b0\uff0c\u57fa\u4e8e\u56fe\u50cf\u7684\u5bf9\u8bdd\u6570\u636e\u5bf9\u589e\u5f3a\u6a21\u578b\u591a\u6a21\u6001\u80fd\u529b\u6700\u6709\u6548\uff0c\u5e73\u5747\u63d0\u5347\u8d85\u8fc750%\u3002\u800c\u4e14\uff0c\u5373\u4f7f\u4f7f\u7528\u66f4\u5c0f\u7684\u6570\u636e\u96c6\u548cLayerNorm\u8c03\u4f18\uff0c\u6a21\u578b\u5728\u4e24\u4e2a\u5b57\u5e55\u4efb\u52a1\u4e0a\u6bd4\u5728\u5b8c\u657480K\u6570\u636e\u96c6\u4e0a\u7684\u5168\u53c2\u6570\u5fae\u8c03\u65b9\u6cd5\u9ad8\u51fa18.4%\uff0c\u5728MME\u4e0a\u4ec5\u843d\u540e2.5%\u3002  \n\n\u53e6\u5916\uff0c\u4ece\u4f18\u5316\u89d2\u5ea6\u6765\u770b\uff0cMLLM\u91c7\u7528LayerNorm\u8c03\u4f18\u65b9\u6cd5\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0cLayerNorm\u68af\u5ea6\u6bd4\u5fae\u8c03\u65f6\u66f4\u96c6\u4e2d\uff0c\u68af\u5ea6\u65b9\u5dee\u66f4\u5c0f\uff0c\u8fd9\u6709\u5229\u4e8e\u6a21\u578b\u6536\u655b\u5230\u66f4\u597d\u7684\u5c40\u90e8\u6700\u5c0f\u503c\u3002  \n\n\u867d\u7136LayerNorm\u8c03\u4f18\u6709\u8bf8\u591a\u4f18\u52bf\uff0c\u4f46\u4e5f\u5b58\u5728\u5c40\u9650\u6027\uff0c\u5b83\u6bd4\u5fae\u8c03\u5bf9\u8d85\u53c2\u6570\uff08\u5982\u5b66\u4e60\u7387\u3001\u8bad\u7ec3\u8f6e\u6b21\uff09\u66f4\u654f\u611f\uff0c\u6a21\u578b\u6027\u80fd\u4f1a\u968f\u8d85\u53c2\u6570\u8c03\u6574\u800c\u53d8\u5316\u3002\u4e0d\u8fc7\u603b\u4f53\u800c\u8a00\uff0cLayerNorm\u8c03\u4f18\u4e3aMLLMs\u7684\u8bad\u7ec3\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u65b9\u5f0f\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u6f5c\u529b\u5de8\u5927\uff0c\u8fd9\u4e00\u8d9f\u7814\u7a76\u771f\u7684\u8ba9\u6211\u5bf9\u6a21\u578b\u8bad\u7ec3\u6709\u4e86\u66f4\u6df1\u7684\u8ba4\u8bc6 \u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "30b2ef30-75d2-40c5-b100-d2fefb6cb330:\u300c\u7814\u7a76\u6210\u679c\u3001\u65b9\u6cd5\u7684\u521b\u65b0\u6027\u4e0e\u5e94\u7528\u4ef7\u503c\u300d\n30b2ef30-75d2-40c5-b100-d2fefb6cb330:\u300cLayerNorm \u548c RMSNorm \u7684\u7814\u7a76\u6210\u679c\u4e3a\u540e\u7eed\u7814\u7a76\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5177\u4f53\u7684\u91cd\u8981\u53c2\u8003\uff1f\u5b83\u4eec\u5728\u4e0d\u540c\u5e94\u7528\u9886\u57df\u63d0\u5347\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6548\u7387\u7684\u5177\u4f53\u8868\u73b0\u548c\u4f5c\u7528\u673a\u5236\u662f\u4ec0\u4e48\uff1f \u300d\n30b2ef30-75d2-40c5-b100-d2fefb6cb330:\u300cref_ids: 454847819065993190, chunk_ids: 1, Score: 0.4863, Text: # 4 EXPERIMENTAL RESULTS\n\n# 4.1 TUNING LAYER NORM\nTuning LayerNorm in Attention Blocks. In table 1 , it is noteworthy that activating only the LayerNorm yields the least activated parameters, yet the model performances are surprisingly impressive when compared to tuning other modules. Specifically, in two captioning tasks, the VQAv2 task, and the challenging hallucination benchmark POPE , models with only the LayerNorm activated consistently outperform all other competitors by at least $8.2\\\\%$ . On the comprehensively evaluated benchmark MME , while tuning LayerNorm outperforms finetuning the intact language model by an average of $6.6\\\\%$ on the Perception aspect, it lags behind finetuning by an average of $6.3\\\\%$ on the Cognition score. It is vital to note, however, that the LayerNorm only accounts for approximately $2.5\\\\%$ of the training parameters in the whole model.  \n\nIn addition to tuning modules, another observation is that MLLMs incorporating human-aligned LLMs (such as LL A MA2- CHAT ) exhibit superior performance in complex and demanding tasks such as POPE and MME compared to their unaligned counterparts. This underscores the importance of utilizing aligned LLMs to construct a more powerful MLLMs.  \n\nTuning LayerNorm and Only LayerNorm. As the above LayerNorm method finetunes (1) visionlanguage connector, (2) word embedding, (3) output head, and (4) LayerNorm component in the LLM simultaneously, a pertinent question arises: Is it possible for (4) LayerNorm alone to generalize effectively in training MLLMs? To address this query, we take a step further and solely finetune LayerNorm in MLLMs, which is denoted as LayerNorm-simp. in table 1 . The results are intriguing, demonstrating that even with a mere $0.004\\\\%$ parameter finetuning in the whole model, LayerNormsimp. surpasses full parameter finetuning on three conventional vision-language tasks (i.e., two captioning and one VQA tasks) by $10\\\\%$ , and only lags behind full finetuning by $7.9\\\\%$ on the MME benchmark. This intriguing discovery suggests that the transition from LLM to MLLMs probably involves a domain adaptation process as the LayerNorm takes the most credits in tuning a wellbehaved MLLMs. The LayerNorm alone may be also capable of integrating vision information with language tokens seamlessly.  \n\nMemory Consumption and Parameter Efficiency. In table 2 , we present the total memory consumption and the percentage of trainable parameters of each MLLMs finetuning method across 7B and 13B scales. Methods like full parameter finetuning and finetuning MLPs in attention modules face out-of-memory (OOM) issue even on a high-capacity 80GB A100 GPU, while LayerNorm based methods stand out for their efficiency. Specifically, LayerNorm tuning requires only $24.2\\\\,\\\\mathrm{GB}$ and $38.3\\\\,\\\\mathrm{GB}$ memory at 7B and 13B scales respectively. Remarkably, LayerNorm-simp. further reduces the memory to $18.9\\\\,\\\\mathrm{GB}$ and 31.7 GB. In terms of trainable parameters, LayerNorm based methods also show remarkable efficiency, LayerNorm utilizes only $3.78\\\\%$ and $2.50\\\\%$ of the total parameters at the 7B and 13B scales, and LayerNorm-simp. takes efficiency to an extreme, involving only $0.004\\\\%$ and $0.003\\\\%$ of the parameters at these scales. These results demonstrate the efficiency advantage of LayerNorm tuning, compared with existing methods like LoRA or full parameter finetuning.  \n\n  \nFigure 2: Performances of models that are finetuned on different datasets on four multi-modal benchmarks. The MME score is the sum of both Cognition and Perception scores on the benchmark.\n\n# 4.2 \u2018L ESS IS MORE \u2019ON BOTH DATA AND PARAMETER SIDES\nEfficiency in training can also be improved by considering the data used in LLMs and MLLMs ( Zhou et al. ,2023 ;Wei et al. ,2023 ). To this end, we conducted experiments using LL A MA2-7B and LL A MA2-7BCHAT , where we divided the training data into three categories, each comprising 20K data points: image-grounded conversation, image detail descriptions, and image-based complex reasoning, as previously deployed in Liu et al. (2023 ). Based on the results presented in fig. 2 , we observe that the image-grounded conversation data is the most effective in enhancing the multi-modal capabilities of the model, with an average improvement of over $50\\\\%$ compared to other data types. This highlights the potential benefits of a targeted approach that leverages the strengths of specific data types to facilitate more nuanced and effective multi-modal tuning for MLLMs.  \n\nTo validate \u2018Less is More\u2019 on both the data and parameter sides, we present results of MLLMs with LayerNorm activated in LLM and tuned on 20k conversational data in table 3 . Our experimental results indicate that even with a smaller dataset and the use of LayerNorm tuning, the model outperforms the full parameter finetuning approach on the full 80K dataset by $18.4\\\\%$ on two captioning tasks, and only falls short in MME by a tolerable $2.5\\\\%$ . It is noteworthy that LayerNorm with 20K data is only $7.6\\\\%$ and $7.4\\\\%$ behind LayerNorm on the full 80K dataset for two captioning tasks and MME task, respectively. These findings demonstrate that \u2018Less is More\u2019 for both the parameter and data perspectives beyond language domain Zhou et al. (2023 ), but for multi-modal tuning.\u300d\n30b2ef30-75d2-40c5-b100-d2fefb6cb330:\u300cref_ids: 454846008172788376, chunk_ids: 4, Score: 0.4277, Text: # 5.3 LAYER NORM TUNING HAS SMALLER GRADIENT VARIANCE\nA well accepted view about LayerNorm is that, as the neural network goes deeper, the mean of LayerNorm gradients should goes to zero as the LayerNorm itself is designed to normalize all training parameters. In the meantime, the variance of LayerNorm gradients should be small to ensure a better generalization ability of the model ( Xu et al. ,2019 ) (See the proof in Appendix A.2.2 ). As we presented in fig. 4 , MLLM with LayerNorm tuning method has a more concentrated LayerNorm gradients than fine-tuning during the training process. This result gives another view on the effectiveness of LayerNorm from the optimization perspective. More visualizations are listed in Appendix A.2.2 .\n\n# 6 CONCLUSION AND DISCUSSIONS\nLayerNorm is effective and sufficient built upon MLLM pre-training. MLLM training typically involves pre-training on image-text pairs followed by finetuning on visual instruction data. While the second stage of training receives more attention, it is worth noting that the function of the first stage pre-training is non-negligible for training a competent MLLM. We have presented in the paper only a small portion of parameter activation is sufficient to tune a well-behaved MLLM. However, other models such as I NSTRUCT BLIP ( Dai et al. ,2023 ) and M INI GPT4 ( Zhu et al. ,2023 ) only tune the vision-language connector, leaving the LLM untouched during the second stage of training. These models have yielded strong performances when given a large-scale finetuning dataset. In Sec. 5.1 , we demonstrate that tuning LayerNorm may be a more effective means for the second stage training, especially when compared to existing parameter-efficient methods for training MLLMs.  \n\nLimitations. One shortcoming of these parameter-efficient finetuning methods is that they are more sensitive to hyper-parameters ( e.g ., learning rate, training epoch) than finetuning. Since the number of trainable parameters of LayerNorm is small, the model performance of LayerNorm method also varies when twitching the training hyper-parameters. This drawback calls for potential future investigations on the LayerNorm tuning method. In the Appendix A.1 , we give a hint for the grid search range of learning rate on both 7B and 13B scaled models using LayerNorm tuning based on our experimental results.  \n\nConclusion. Our studies demonstrate LayerNorm tuning as a simple yet effective tuning method for adapting LLMs comprehend multi-modal content across various model variants. Compared to LoRA tuning or full parameter finetuning, LayerNorm tuning reduces the trainable parameters by a significant $41.9\\\\%$ , enabling efficient finetuning of MLLMs on consumer-grade GPUs. Moreover, we demonstrate that MLLMs can achieve exceptional performance with minimal \u201cright\u201d data and parameters, showcasing the potential of LayerNorm tuning method in real-world applications. Given the empirical success of LayerNorm tuning, we revisited the MLLM finetuning from a domain adaptation perspective and showed that LayerNorm plays a critical role in adapting LLMs to the multi-modal domain. Additionally, our research illustrates the expressive power and optimization potential of LayerNorm tuning from layer similarities and the gradient variance. We hope that our work could inspire future works on designing improved PEFT methods that enable more diverse application scenarios for MLLMs.\n\n\n\n# A A PPENDIX\n\n# A.1 TRAINING DETAILS\nFor the first stage, we set the learning rate to 2e-3 for all variants. During the second stage, we search learning the learning rate from [2e-3, 1e-3, 6e-4, 3e-4, 1e-4, 5e-5, 2e-5, 1e-5, 6e-6, 1e-6, 1e-7] for all models and pick the best learning rate based on their performances on the CIDEr score on the Flickr $30\\\\,\\\\mathrm{k}$ task.  \n\nAccording to our tryouts based on Flickr $30\\\\,\\\\mathrm{k}$ results in Table A1 , the recommended learning rate for 7B scale is between 6e-4 to 2e-3, while on the 13B, the learning rate should be searched in the range of 3e-6 to 6e-5.  \n\nTable A1: Performance of MLLMs (LayerNorm-simp.) trained with different learning rates and scales on the Flickr30k task.   \n\n\n<html><body><table><tr><td>Learning Rate</td><td>3e-6</td><td>1e-5</td><td>3e-5</td><td>6e-5</td></tr><tr><td>MM-LLAMA2 7B</td><td>21.42</td><td>32.45</td><td>43.04</td><td>28.24</td></tr><tr><td>Learning Rate</td><td>6e-4</td><td>1e-3</td><td>2e-3</td><td></td></tr><tr><td>MM-LLAMA213B</td><td>37.35</td><td>46.88</td><td>44.15</td><td></td></tr></table></body></html>\n\n# A.2INSIGHTS OFLAYERNORMTUNING\n\n# A.2.1 VISUALIZATION EXAMPLES OF LAYER SIMILARITIES\nLower similarities between different layers of the transformer indicates more expressive power ( Pires et al. ,2023 ). In section 5.2 , we have shown the computed cosine similarity between layers on a Vicuna model, here we show the layer similarities between layers on LL A MA2 and LL A MA2 CHAT models in fig. A1 and fig. A2 . It is clear that, LayerNorm tuning again allows the model to learn dissimilar layer representations, improving the expressive power of the model.\n\n# A.2.2 GRADIENTS OF LAYER NORM\nVisualization examples of LayerNorm gradients. In fig. A3 and fig. A4 , we present the gradients of the LayerNorm parameters during the training process. Similar to the one we have shown in the main text, LayerNorm tuning demonstrates a smaller gradient variance which is important for converging to a better local minimum ( Xu et al. ,2019 ).  \n\nProof of smaller variance in LayerNorm . As stated in Sec. 5.3 , deeper the network is, the variance of LayerNorm in the model should be naturally smaller ( $\\\\mathrm{\\\\DeltaXu}$ et al. ,2019 ). We first let $\\\\mathbf{y}\\\\,=\\\\,(y_{1},y_{2},...,y_{N})$ be the normalized vector, meaning the mean and variance of $\\\\mathbf{y}$ is 0 and 1 ,respectively. We can then formulate the standard LayerNorm as follow:  \n\n$$\n{\\\\mathbf{y}}={\\\\frac{\\\\mathbf{x}-{\\\\boldsymbol{\\\\mu}}}{\\\\sigma}},\\\\quad{\\\\boldsymbol{\\\\mu}}={\\\\frac{1}{N}}\\\\sum_{i=1}^{N}x_{i},\\\\quad\\\\sigma={\\\\sqrt{{\\\\frac{1}{N}}\\\\sum_{i=1}^{N}\\\\left(x_{i}-{\\\\boldsymbol{\\\\mu}}\\\\right)^{2}}},\n$$  \n\nwhere $\\\\mathbf{x}=(x_{1},x_{2},...,x_{N})$ is the input vector and $N$ is the dimension of $\\\\mathbf{x}$ .$\\\\mu$ and $\\\\sigma$ are the mean and standard deviation of $\\\\mathbf{x}$ .  \n\nWe first define $\\\\mathbf{1}_{N}=\\\\underbrace{(1,1,...,1)^{\\\\intercal}}_{N}$ . For calculating the gradients of the normalized vector $\\\\mathbf{y}$ , we first simulate the backward propagation regarding the loss {z }$\\\\ell$ :  \n\n$$\n{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{x}}}=\\\\left({\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\mathbf{x}}}+{\\\\frac{\\\\partial\\\\mu}{\\\\partial\\\\mathbf{x}}}{\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\mu}}+{\\\\frac{\\\\partial\\\\sigma}{\\\\partial\\\\mathbf{x}}}{\\\\frac{\\\\partial\\\\mathbf{y}}{\\\\partial\\\\sigma}}\\\\right){\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}={\\\\frac{1}{\\\\sigma}}\\\\left(I-{\\\\frac{\\\\mathbf{y}\\\\mathbf{y}^{\\\\intercal}}{N}}-{\\\\frac{\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\intercal}}{N}}\\\\right){\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}.\n$$  \n\n  \nFigure A1: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNormtuned MM-LL A MA2-7B.  \n\nHere we define $\\\\begin{array}{r l r}{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf x}}&{{}\\\\!\\\\!=}&{\\\\!\\\\!(a_{1},a_{2},...,a_{N})}\\\\end{array}$ with mean $\\\\bar{a}$ and standard deviation $D_{a}$ , and $\\\\begin{array}{r l}{\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{y}}}&{{}=}\\\\end{array}$ $(b_{1},b_{2},...,b_{N})$ with mean $\\\\bar{b}$ and standard deviation $D_{b}$ . We set $\\\\begin{array}{r}{W_{1}\\\\;=\\\\;I\\\\,-\\\\,\\\\frac{{\\\\bf y}{\\\\bf y}^{\\\\intercal}}{N}\\\\,-\\\\,\\\\frac{{\\\\bf1}_{N}{\\\\bf1}_{N}^{\\\\intercal}}{N}}\\\\end{array}$ \u2212, we can verify that:  \n\n$$\n\\\\lfloor\\\\mathbf{\\\\Pi}_{N}^{\\\\mathsf{T}}W_{1}=\\\\mathbf{1}_{N}^{\\\\mathsf{T}}{\\\\frac{1}{\\\\sigma}}\\\\left(I-{\\\\frac{\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\mathsf{T}}+\\\\mathbf{y}\\\\mathbf{y}^{\\\\mathsf{T}}}{N}}\\\\right)={\\\\frac{1}{\\\\sigma}}\\\\left(\\\\mathbf{1}_{N}-{\\\\frac{\\\\mathbf{1}_{N}^{\\\\mathsf{T}}\\\\mathbf{1}_{N}}{N}}\\\\mathbf{1}_{N}^{\\\\mathsf{T}}-{\\\\frac{\\\\mathbf{1}_{N}^{\\\\mathsf{T}}\\\\mathbf{y}}{N}}\\\\mathbf{y}^{\\\\mathsf{T}}\\\\right)={\\\\frac{\\\\mathbf{1}_{N}-\\\\mathbf{1}_{N}-0}{\\\\sigma}}=0\n$$  \n\nTherefore, we can easily proof that $N\\\\bar{a}\\\\propto{\\\\bf1}_{N}^{\\\\top}W_{1}\\\\bar{b}=0$ , which means the mean of $\\\\frac{\\\\partial\\\\ell}{\\\\partial\\\\mathbf{x}}$ should be zero. Then we dive into proofing the variance of LayerNorm gradients should be small when the number of network parameters $N$ becomes large.  \n\n$$\n\\\\begin{array}{l}{{\\\\displaystyle{D_{a}=\\\\sum_{i=1}^{N}(a_{i}-\\\\bar{a})^{2}/N=\\\\sum_{i=1}^{N}a_{i}^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{(a_{1},a_{2},\\\\ldots,a_{N})^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(b_{1},b_{2},\\\\ldots,b_{N}\\\\right)^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(b_{1}-\\\\bar{b},b_{2}-\\\\bar{b},\\\\ldots,b_{N}-\\\\bar{b}\\\\right)^{\\\\top}+W_{1}\\\\bar{b}{\\\\bf1}_{N}}\\\\right\\\\|^{2}/N}\\\\ }}\\\\\\\\ {{\\\\displaystyle{=\\\\left\\\\|{W_{1}\\\\left(g_{1}-\\\\bar{b},g_{2}-\\\\bar{b},\\\\ldots,g_{N}-\\\\bar{b}\\\\right)^{\\\\top}}\\\\right\\\\|^{2}/N}\\\\ ~}}\\\\\\\\ {{\\\\displaystyle{\\\\leq W_{1}^{2}\\\\sum_{i=1}^{N}(b_{i}-\\\\bar{b})^{2}/N}\\\\ }}\\\\end{array}\n$$  \n\nSince the projection matrix $W_{1}$ is idempotent, we have $W_{1}^{2}=W_{1}$ . That is to say, when $N$ is large enough, there stands the network parameter $\\\\begin{array}{r}{D_{a}\\\\le\\\\big(I-\\\\frac{\\\\mathbf{y}\\\\mathbf{y}^{\\\\top}+\\\\mathbf{1}_{N}\\\\mathbf{1}_{N}^{\\\\top}}{N}\\\\big)\\\\sum_{i=1}^{N}(b_{i}-\\\\bar{b_{}})^{2}/N\\\\propto1/N^{2}}\\\\end{array}$ Nis large, the gradient variance of LayerNorm should be small. P\u2212. As a consequence, when  \n\n  \nFigure A2: Layer similarities between different LLM layers in (a) Finetuned and (b) LayerNormtuned MM-LL A MA2-7B CHAT .  \n\n  \nFigure A3: The gradients of both input and post LayerNorm in 21st layer of the MM-V ICUNA as the training proceeds.  \n\n  \nFigure A4: The gradients of both input and post LayerNorm in 11th layer of the MM-V ICUNA as the training proceeds.\u300d\n30b2ef30-75d2-40c5-b100-d2fefb6cb330:\u300cref_ids: 454895361066540518, chunk_ids: 1, Score: 0.4180, Text: # B.2 MODEL LAYERS\nIn this section, we give the formal definition of LayerNorm $\\\\operatorname{LN}(\\\\cdot)$ and RMS Norm ${\\\\mathrm{RMS}}\\\\left(\\\\cdot\\\\right)$ .  \n\nDefinition 1 (LayerNorm) .LayerNorm $L N(\\\\cdot;\\\\mu,\\\\beta,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nL N(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\beta,\\\\epsilon)=\\\\frac{\\\\mathbf{x}-\\\\mathbb{E}[\\\\mathbf{x}]}{\\\\sqrt{\\\\mathrm{Var}[\\\\mathbf{x}]+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu}+\\\\beta,\n$$  \n\nwhere $\\\\mathbf{x},\\\\pmb{\\\\mu},\\\\beta\\\\in\\\\mathbb{R}^{D}$ .  \n\nDefinition 2 (RMSNorm) .RMS Norm $R M S(\\\\cdot;\\\\mu,\\\\epsilon)$ of dimension $D$ is defined as:  \n\n$$\nR M S(\\\\mathbf{x};\\\\pmb{\\\\mu},\\\\epsilon)=\\\\frac{\\\\mathbf{x}}{\\\\sqrt{\\\\frac{1}{D}\\\\sum_{i=1}^{D}(\\\\mathbf{x}[i])^{2}+\\\\epsilon}}\\\\odot\\\\pmb{\\\\mu},\n$$  \n\nwhere x,$\\\\pmb{\\\\mu}\\\\in\\\\mathbb{R}^{D}$ .  \n\nRemark. In neural networks, inputs of normalization layers are usually high dimension tensors. In this case, LayerNorm and RMSNorm normally apply to the last dimension separately.\n\n# B.3 LOSSLESS EXPANSION IN VECTOR SPACE\nIn this section, we first give the general definition of lossless expansion in vector space.  \n\ndimensions satisfy dim it is invertible. Definition 3 (Lossless $(\\\\bar{\\\\mathcal{T}})\\\\geq d i m(S)$ T\u2265S, a vector space expansion ector space) .Given $\\\\boldsymbol{S}$ and V$\\\\tau$ $\\\\mathcal{V}:\\\\mathcal{S}\\\\rightarrow\\\\mathcal{T}$ S \u2192T is said to be lossless if ector spaces where the  \n\nRemark. Note that the identity function Id is lossless with its inverse being itself.  \n\nThen we give a few examples of lossless vector space expansions. These examples will also be used in LEMON.  \n\nExample B.3.1 (Vector average expansion $\\\\mathcal{V}_{\\\\mathrm{avg.}}$ ).Let $\\\\mathbf{\\\\widetilde{x}}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ and its average $\\\\begin{array}{r}{\\\\lambda_{V}g(\\\\mathbf{x})=\\\\mathbb{E}[\\\\mathbf{x}]=\\\\frac{1}{D_{S}}\\\\sum_{i}^{D_{S}}\\\\mathbf{x}[i]}\\\\end{array}$ P].$\\\\mathbf{x}_{a\\\\nu g}^{*}$ is called the average expanded xof dimension $D_{T}$  \n\nwith $D_{T}\\\\geq D_{S}$ if  \n\n$$\n\\\\mathbf{x}_{a v g}^{*}=\\\\mathcal{V}_{a v g}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}}}_{\\\\lfloor D_{T}/D s\\\\rfloor},\\\\underbrace{A v g(\\\\mathbf{x}),\\\\cdots,A v g(\\\\mathbf{x})}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.\n$$  \n\nExample B.3.2 (Vector z o expansion $\\\\mathcal{V}_{\\\\mathrm{zero.}}$ ).Le $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ be a vector of dimension $D_{S}$ .$\\\\mathbf{x}_{z e r o}^{*}$ is called the zero expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{z e r o}^{*}=\\\\mathcal{V}_{z e r o}(\\\\mathbf{x})=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\mathsf{T}}},\\\\cdots,\\\\mathbf{x^{\\\\mathsf{T}}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\underbrace{0,\\\\cdots,0}_{D_{T}\\\\mathrm{~mod~}D_{S}}\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}.}\\\\end{array}\n$$  \n\nExample B.3.3 (Vector circula expansion $\\\\mathcal{V}_{\\\\mathrm{circ}})$ Let $\\\\mathbf{x}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{c i r c}^{*}$ is called the circular expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{c i r c}^{*}=\\\\mathcal{V}_{c i r c}(\\\\mathbf{x})=C o n c a t\\\\underbrace{\\\\left[\\\\mathbf{x}^{\\\\mathsf{T}},\\\\cdots,\\\\mathbf{x}^{\\\\mathsf{T}},\\\\mathbf{x}^{\\\\mathsf{T}}[\\\\colon D_{T}\\\\bmod D_{S}]\\\\right]^{\\\\mathsf{T}}\\\\in\\\\mathbb{R}^{D_{T}}}_{[D_{T}/D_{S}]}.}\\\\end{array}\n$$  \n\nExample B.3.4 (Vector random expansion $\\\\mathcal{V}_{\\\\mathrm{rand.}}$ Let $\\\\mathbf{\\\\Deltax}\\\\in\\\\mathbb{R}^{D_{S}}$ a vector of dimension $D_{S}$ .${\\\\bf x}_{r a n d}^{*}$ is called the random expanded xof dimension $D_{T}$ with $D_{T}\\\\geq D_{S}$ \u2265if  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{x}_{r a n d}^{*}=\\\\mathcal{V}_{r a n d}(\\\\mathbf{x};\\\\zeta)=C o n c a t\\\\left[\\\\underbrace{\\\\mathbf{x^{\\\\intercal}},\\\\cdots,\\\\mathbf{x^{\\\\intercal}}}_{\\\\lfloor D_{T}/D_{S}\\\\rfloor},\\\\zeta^{\\\\intercal}\\\\right]^{\\\\intercal}\\\\in\\\\mathbb{R}^{D_{T}},}\\\\end{array}\n$$  \n\nwhere $\\\\zeta\\\\in\\\\mathbb{R}^{D_{T}}$ mod $D_{S}$ is an arbitrary vector.  \n\nRemark. (1) All vector expansion examples above follow the same pattern. Specifically, when $D_{T}$ expanding from di mod s by $D_{S}$ entries differently. (2) The random vector ating $\\\\textbf{x}\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ \u230a$D_{S}$ \u230b$D_{T}$ number of times. , all vector expansion methods pad first $\\\\zeta$ in vector random expansion is arbitrary, Each method deals with the remaining $\\\\lfloor D_{T}/D_{S}\\\\rfloor D_{S}$ enso $\\\\mathcal{V}_{a\\\\nu g}$ ,$\\\\mathcal{V}_{z e r o}$ ,$\\\\mathcal{V}_{c i r c}\\\\subset\\\\mathcal{V}_{r a n d}$ . (3) Here all three examples are expansion methods for vectors. In practice, neural networks like Transformers are dealing high dimensional tensors. These tensors can essentially be thought of as collections of vectors. In such scenarios, we can apply the expansion methods separately to the last dimension of these tensors.  \n\nIn the following claim, we show that vectors expanded by these operators are lossless.  \n\n$\\\\mathcal{V}_{c i r c}$ V, and vector random expansion m 1. Vector average expansio V$\\\\gamma_{r a n d}$ $\\\\mathcal{V}_{a\\\\nu g},$ are all lossless expansion for vectors. , vector zero expansion $\\\\mathcal{V}_{z e r o}$ , vector circular expansion Proof. The inverse function $\\\\mathcal{V}^{-1}:\\\\mathbb{R}^{D_{T}}\\\\rightarrow\\\\mathbb{R}^{D_{S}}$ of these vector expansion methods is  \n\n$$\n\\\\nu^{-1}({\\\\bf x})={\\\\bf x}[:D_{S}].\n$$  \n\nRemark. In practice, we want inverse mapping of expansion methods to be easily computed just like the example above.\n\n# B.4LOSSLESS EXPANSION FOR OPERATORS\nWe then give the definition of lossless expansion for operators. These operators apply on tensors, hence our definition of lossless operator expansion is based on lossless expansion in vector space. These operators can be different layers used in Transformer architectures, including LayerNorm, convolutional layers, and fully-connected layers, etc.  \n\nDefinit ansio der vector spaces $S^{i n},S^{o u t},\\\\mathcal{T}^{i n}$ and $\\\\mathcal{T}^{o u t}$ such that with $g(\\\\cdot):S^{i n}\\\\rightarrow S^{o u t}$ \u00b7$n(S^{i n})\\\\leq d i m(T^{i n})$ S\u2192S or space e T. We say the ope and dim $d i m\\\\big(S^{\\\\bar{o}u t}\\\\big)\\\\leq d i m\\\\big(T^{o u t}\\\\big)$ S$\\\\mathcal{V}_{i n}:S^{i\\\\bar{n}}\\\\to\\\\mathcal{T}^{i n}$ \u2264TEMo is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ VVess output vector space expansion ppose the op -lossless for $g(\\\\cdot)$ \u00b7or is denoted if there exist $\\\\mathcal{V}_{o u t}:S^{o u t}\\\\to\\\\mathcal{T}^{o u t}$ VS\u2192T such that V$\\\\mathcal{V}_{o u t}(g(\\\\mathbf{x}))=\\\\mathcal{E}[g](\\\\mathcal{V}_{i n}(\\\\mathbf{x})),\\\\forall\\\\mathbf{x}\\\\in S^{i n}$ EV\u2200\u2208S .  \n\n$(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ Remark. losslessly expanded input, the output of the to be invertible, we do not have restrictions on the operator expansion VV(1) Intuitively, a lossless operator -lossless for the origina $g(\\\\cdot)$ \u00b7tput. (2) For conciseness, we use \u2018 \u2019 interchangeably. (3) We only require the v Eexpanded oper pansion can be understood a $^{\\\\cdot}\\\\mathcal{E}[g]$ Eis a is $(\\\\mathcal{V}_{i n},\\\\mathcal{V}_{o u t})$ EVtor expansions .V$\\\\nu_{o u t}$ ows: when using losslessly expa -lossles V$\\\\mathcal{V}_{i n}$ and \u2018 and $\\\\mathcal{E}$ V$\\\\nu_{o u t}$ $\\\\mathcal{V}_{i n}$ ed\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - LayerNorm\u548cRMSNorm\u7684\u7814\u7a76\u6210\u679c\u4e3a\u540e\u7eed\u7814\u7a76\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5177\u4f53\u91cd\u8981\u53c2\u8003\uff1f\n    - \u5b83\u4eec\u5728\u4e0d\u540c\u5e94\u7528\u9886\u57df\u63d0\u5347\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6548\u7387\u7684\u5177\u4f53\u8868\u73b0\u548c\u4f5c\u7528\u673a\u5236\u662f\u4ec0\u4e48\uff1f\n    - LayerNorm\u5355\u72ec\u5fae\u8c03\u5728\u8bad\u7ec3MLLMs\u4e2d\u80fd\u5426\u6709\u6548\u6cdb\u5316\uff1f\n    - \u5982\u4f55\u4ece\u6570\u636e\u548c\u53c2\u6570\u89d2\u5ea6\u9a8c\u8bc1\u201cLess is More\u201d\u5728MLLMs\u8bad\u7ec3\u4e2d\u7684\u6709\u6548\u6027\uff1f\n    - LayerNorm\u8c03\u4f18\u65b9\u6cd5\u5b58\u5728\u54ea\u4e9b\u5c40\u9650\u6027\uff1f\n - **\u7814\u7a76\u76ee\u6807**\uff1a\n    - \u63a2\u7a76LayerNorm\u548cRMSNorm\u5bf9\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6548\u7387\u7684\u5f71\u54cd\u3002\n    - \u9a8c\u8bc1LayerNorm\u8c03\u4f18\u5728MLLMs\u8bad\u7ec3\u4e2d\u7684\u6709\u6548\u6027\u548c\u4f18\u52bf\u3002\n    - \u4ece\u591a\u65b9\u9762\u5206\u6790LayerNorm\u8c03\u4f18\u65b9\u6cd5\uff0c\u4e3a\u6539\u8fdbMLLMs\u8bad\u7ec3\u65b9\u6cd5\u63d0\u4f9b\u53c2\u8003\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u7b97\u6cd5\u548c\u6a21\u578b**\uff1a\n    - \u4e3b\u8981\u56f4\u7ed5LayerNorm\u548cRMSNorm\u5c55\u5f00\u7814\u7a76\uff0c\u6d89\u53ca\u591a\u79cd\u57fa\u4e8eTransformer\u67b6\u6784\u7684\u6a21\u578b\uff0c\u5982LL A MA2-7B\u3001LL A MA2-7BCHAT\u3001Vicuna\u7b49\u3002\n    - \u63d0\u51fa\u4e86LayerNorm-simp.\u65b9\u6cd5\uff0c\u5373\u5355\u72ec\u5fae\u8c03LayerNorm\u6765\u8bad\u7ec3MLLMs\u3002\n - **\u65b9\u6cd5\u5dee\u5f02\u4e0e\u521b\u65b0**\uff1a\n    - \u4e0e\u4f20\u7edf\u7684\u5168\u53c2\u6570\u5fae\u8c03\u3001\u5fae\u8c03MLPs\u7b49\u65b9\u6cd5\u76f8\u6bd4\uff0cLayerNorm\u8c03\u4f18\u65b9\u6cd5\u5728\u53c2\u6570\u4f7f\u7528\u548c\u5185\u5b58\u6d88\u8017\u4e0a\u5177\u6709\u663e\u8457\u4f18\u52bf\u3002\n    - \u4ece\u6570\u636e\u4f7f\u7528\u89d2\u5ea6\uff0c\u901a\u8fc7\u5c06\u8bad\u7ec3\u6570\u636e\u5206\u7c7b\uff0c\u9488\u5bf9\u6027\u5730\u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u6570\u636e\u5bf9\u6a21\u578b\u591a\u6a21\u6001\u80fd\u529b\u7684\u5f71\u54cd\uff0c\u9a8c\u8bc1\u201cLess is More\u201d\u5728\u6570\u636e\u548c\u53c2\u6570\u65b9\u9762\u7684\u6709\u6548\u6027\uff0c\u8fd9\u662f\u4e00\u79cd\u521b\u65b0\u7684\u7814\u7a76\u601d\u8def\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u8ba1\u652f\u6301\u5047\u8bbe**\uff1a\n    - \u901a\u8fc7\u5728\u591a\u4e2a\u4efb\u52a1\uff08\u5982captioning tasks\u3001VQAv2 task\u3001POPE\u3001MME\u7b49\uff09\u4e0a\u5bf9\u4e0d\u540c\u6a21\u578b\u548c\u8c03\u4f18\u65b9\u6cd5\u8fdb\u884c\u5b9e\u9a8c\uff0c\u9a8c\u8bc1\u4e86LayerNorm\u8c03\u4f18\u5728\u63d0\u5347\u6a21\u578b\u6027\u80fd\u65b9\u9762\u7684\u6709\u6548\u6027\uff0c\u652f\u6301\u4e86\u7814\u7a76\u5047\u8bbe\u3002\n    - \u5bf9\u8bad\u7ec3\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u5b9e\u9a8c\uff0c\u9a8c\u8bc1\u4e86\u7279\u5b9a\u7c7b\u578b\u6570\u636e\uff08\u57fa\u4e8e\u56fe\u50cf\u7684\u5bf9\u8bdd\u6570\u636e\uff09\u5bf9\u589e\u5f3a\u6a21\u578b\u591a\u6a21\u6001\u80fd\u529b\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u53ca\u201cLess is More\u201d\u5728\u6570\u636e\u548c\u53c2\u6570\u4f7f\u7528\u4e0a\u7684\u5047\u8bbe\u3002\n - **\u7ed3\u679c\u4e0e\u9884\u671f**\uff1a\n    - \u5b9e\u9a8c\u7ed3\u679c\u5927\u591a\u7b26\u5408\u9884\u671f\uff0c\u5982\u53ea\u6fc0\u6d3bLayerNorm\u5728\u591a\u4e2a\u4efb\u52a1\u4e2d\u6a21\u578b\u8868\u73b0\u51fa\u8272\uff1bLayerNorm-simp.\u5728\u90e8\u5206\u4efb\u52a1\u4e0a\u6bd4\u5168\u53c2\u6570\u5fae\u8c03\u8868\u73b0\u66f4\u597d\uff1b\u57fa\u4e8e\u56fe\u50cf\u7684\u5bf9\u8bdd\u6570\u636e\u5bf9\u6a21\u578b\u591a\u6a21\u6001\u80fd\u529b\u63d0\u5347\u663e\u8457\u7b49\u3002\n - **\u5b9e\u9a8c\u9a8c\u8bc1**\uff1a\n    - \u5bf9\u4e0d\u540c\u89c4\u6a21\u6a21\u578b\uff087B\u548c13B\uff09\u5728\u591a\u79cd\u8c03\u4f18\u65b9\u6cd5\u4e0b\u7684\u5185\u5b58\u6d88\u8017\u548c\u53ef\u8bad\u7ec3\u53c2\u6570\u8fdb\u884c\u5bf9\u6bd4\u5b9e\u9a8c\uff0c\u5145\u5206\u9a8c\u8bc1\u4e86LayerNorm\u8c03\u4f18\u5728\u6548\u7387\u65b9\u9762\u7684\u4f18\u52bf\u3002\n    - \u901a\u8fc7\u5bf9LayerNorm\u68af\u5ea6\u7684\u53ef\u89c6\u5316\u548c\u7406\u8bba\u8bc1\u660e\uff0c\u9a8c\u8bc1\u4e86LayerNorm\u8c03\u4f18\u5177\u6709\u8f83\u5c0f\u7684\u68af\u5ea6\u65b9\u5dee\uff0c\u6709\u5229\u4e8e\u6a21\u578b\u6536\u655b\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u7814\u7a76\u5c40\u9650\u6027**\uff1a\n    - LayerNorm\u8c03\u4f18\u65b9\u6cd5\u6bd4\u4f20\u7edf\u5fae\u8c03\u65b9\u6cd5\u5bf9\u8d85\u53c2\u6570\uff08\u5982\u5b66\u4e60\u7387\u3001\u8bad\u7ec3\u8f6e\u6b21\uff09\u66f4\u654f\u611f\uff0c\u6a21\u578b\u6027\u80fd\u4f1a\u968f\u8d85\u53c2\u6570\u8c03\u6574\u800c\u53d8\u5316\u3002\n - **\u672a\u6765\u7814\u7a76\u65b9\u5411**\uff1a\n    - \u9488\u5bf9LayerNorm\u8c03\u4f18\u65b9\u6cd5\u5bf9\u8d85\u53c2\u6570\u654f\u611f\u7684\u95ee\u9898\uff0c\u8fdb\u884c\u6df1\u5165\u7814\u7a76\uff0c\u63a2\u7d22\u66f4\u6709\u6548\u7684\u8d85\u53c2\u6570\u8c03\u6574\u7b56\u7565\u3002\n    - \u57fa\u4e8e\u672c\u6b21\u7814\u7a76\u6210\u679c\uff0c\u8bbe\u8ba1\u6539\u8fdb\u7684\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\uff08PEFT\uff09\u65b9\u6cd5\uff0c\u4ee5\u5b9e\u73b0MLLMs\u66f4\u5e7f\u6cdb\u7684\u5e94\u7528\u573a\u666f\u3002 ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5LayerNorm\u548cRMSNorm\u7684\u7814\u7a76\u6210\u679c\u3001\u5728\u4e0d\u540c\u5e94\u7528\u9886\u57df\u63d0\u5347\u6a21\u578b\u6027\u80fd\u548c\u8bad\u7ec3\u6548\u7387\u7684\u5177\u4f53\u8868\u73b0\u53ca\u4f5c\u7528\u673a\u5236\u5c55\u5f00\uff0c\u6d89\u53ca\u591a\u4e2a\u5b9e\u9a8c\u7ed3\u679c\u548c\u5206\u6790\uff0c\u53ef\u4ece\u7814\u7a76\u6210\u679c\u521b\u65b0\u6027\u4e0e\u5e94\u7528\u4ef7\u503c\u3001LayerNorm\u548cRMSNorm\u5177\u4f53\u7814\u7a76\u3001\u7814\u7a76\u5c40\u9650\u6027\u4e0e\u5c55\u671b\u4e09\u65b9\u9762\uff0c\u7ed3\u5408\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u8fdb\u884c\u603b\u7ed3\uff1a\n1. **\u7814\u7a76\u6210\u679c\u521b\u65b0\u6027\u4e0e\u5e94\u7528\u4ef7\u503c**\n    - **\u521b\u65b0\u6027**\uff1a\u805a\u7126\u4e8eLayerNorm\u548cRMSNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u5e94\u7528\uff0c\u63a2\u7d22\u4e86\u65b0\u7684\u53c2\u6570\u8c03\u6574\u65b9\u6cd5\uff0c\u5982\u4ec5\u8c03\u6574LayerNorm\uff08LayerNorm-simp.\uff09\uff0c\u4e3a\u6a21\u578b\u8bad\u7ec3\u63d0\u4f9b\u4e86\u65b0\u7684\u601d\u8def\u548c\u65b9\u6cd5\u3002\n    - **\u5e94\u7528\u4ef7\u503c**\uff1a\u901a\u8fc7\u5b9e\u9a8c\u8bc1\u660e\u4e86LayerNorm\u8c03\u6574\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u6709\u6548\u6027\u548c\u9ad8\u6548\u6027\uff0c\u80fd\u591f\u5728\u51cf\u5c11\u53ef\u8bad\u7ec3\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff0c\u5177\u6709\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u63a8\u5e7f\u7684\u6f5c\u529b\u3002\n2. **LayerNorm\u548cRMSNorm\u5177\u4f53\u7814\u7a76**\n    - **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\uff1a\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff08\u56fe\u50cf\u5bf9\u8bdd\u3001\u56fe\u50cf\u7ec6\u8282\u63cf\u8ff0\u3001\u56fe\u50cf\u590d\u6742\u63a8\u7406\uff09\u5bf9\u6a21\u578b\u6027\u80fd\u63d0\u5347\u6709\u4e0d\u540c\u5f71\u54cd\uff0c\u5176\u4e2d\u56fe\u50cf\u5bf9\u8bdd\u6570\u636e\u5bf9\u63d0\u5347\u6a21\u578b\u591a\u6a21\u6001\u80fd\u529b\u6700\u4e3a\u6709\u6548\uff0c\u8fd9\u4f53\u73b0\u4e86\u6570\u636e\u4f5c\u4e3a\u4fe1\u606f\u8f7d\u4f53\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u53ca\u4e0d\u540c\u8bed\u4e49\u4fe1\u606f\u5bf9\u6a21\u578b\u6027\u80fd\u7684\u5f71\u54cd\u3002\n    - **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\uff1a\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u53d1\u73b0LayerNorm\u8c03\u6574\u65b9\u6cd5\u5728\u591a\u4e2a\u4efb\u52a1\u4e0a\u8868\u73b0\u51fa\u4f18\u4e8e\u4f20\u7edf\u5168\u53c2\u6570\u5fae\u8c03\u7684\u6027\u80fd\uff0c\u4e14\u5177\u6709\u8f83\u5c0f\u7684\u68af\u5ea6\u65b9\u5dee\uff0c\u8fd9\u4e00\u53d1\u73b0\u5177\u6709\u4e00\u5b9a\u7684\u5076\u7136\u6027\uff0c\u4f46\u4e3a\u7b97\u6cd5\u4f18\u5316\u63d0\u4f9b\u4e86\u65b0\u7684\u65b9\u5411\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\u4e86\u201cLess is More\u201d\u7684\u7406\u5ff5\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u6709\u6548\u6027\uff0c\u5373\u5728\u6570\u636e\u548c\u53c2\u6570\u4f7f\u7528\u4e0a\uff0c\u5408\u7406\u9009\u62e9\u53ef\u4ee5\u8fbe\u5230\u66f4\u597d\u7684\u6548\u679c\u3002\n    - **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\uff1a\u901a\u8fc7\u5bf9LayerNorm\u8c03\u6574\u65b9\u6cd5\u7684\u7814\u7a76\uff0c\u53d1\u73b0\u5176\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\u80fd\u591f\u6709\u6548\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u89c4\u6a21\u7684\u6a21\u578b\uff087B\u548c13B\uff09\u4e0a\u90fd\u5177\u6709\u8f83\u9ad8\u7684\u6548\u7387\uff0c\u8fd9\u4e3a\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6027\u80fd\u63d0\u5347\u63d0\u4f9b\u4e86\u53ef\u884c\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002\n    - **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\uff1a\u7814\u7a76\u8868\u660e\uff0c\u8c03\u6574LayerNorm\u80fd\u591f\u6709\u6548\u63d0\u5347\u591a\u6a21\u6001\u6a21\u578b\u7684\u6027\u80fd\uff0c\u8fd9\u4f53\u73b0\u4e86\u7b97\u6cd5\uff08LayerNorm\u8c03\u6574\uff09\u548c\u6570\u636e\u7ed3\u6784\uff08\u6a21\u578b\u53c2\u6570\uff09\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\uff08\u6a21\u578b\u6027\u80fd\u63d0\u5347\uff09\u4e4b\u95f4\u7684\u56e0\u679c\u5173\u7cfb\u3002\u540c\u65f6\uff0c\u7814\u7a76\u8fd8\u63a2\u8ba8\u4e86LayerNorm\u8c03\u6574\u65b9\u6cd5\u5728\u4e0d\u540c\u6a21\u578b\u89c4\u6a21\u548c\u6570\u636e\u91cf\u4e0b\u7684\u8868\u73b0\uff0c\u5c55\u793a\u4e86\u5176\u53ef\u62d3\u5c55\u6027\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u5bf9\u5b9e\u9a8c\u7ed3\u679c\u7684\u5206\u6790\uff0c\u4e5f\u4e3a\u8fdb\u4e00\u6b65\u53cd\u5411\u63a8\u7406\u6a21\u578b\u6027\u80fd\u63d0\u5347\u7684\u539f\u56e0\u548c\u673a\u5236\u63d0\u4f9b\u4e86\u4f9d\u636e\u3002\n3. **\u7814\u7a76\u5c40\u9650\u6027\u4e0e\u5c55\u671b**\uff1a\u7814\u7a76\u6307\u51fa\u8fd9\u4e9b\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\u65b9\u6cd5\u5bf9\u8d85\u53c2\u6570\u66f4\u4e3a\u654f\u611f\uff0c\u8fd9\u662f\u5f53\u524d\u7814\u7a76\u7684\u5c40\u9650\u6027\u3002\u672a\u6765\u9700\u8981\u8fdb\u4e00\u6b65\u7814\u7a76LayerNorm\u8c03\u6574\u65b9\u6cd5\uff0c\u4ee5\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff0c\u4e3a\u6a21\u578b\u8bad\u7ec3\u63d0\u4f9b\u66f4\u7a33\u5b9a\u3001\u9ad8\u6548\u7684\u65b9\u6cd5\u3002  ", "dreams_personality_context": "\u4ece\u8fd9\u6bb5\u5185\u5bb9\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4eba\u7269\u53ef\u80fd\u5177\u6709\u4ee5\u4e0b\u6027\u683c\u7279\u70b9\uff1a\n1. **\u52c7\u4e8e\u521b\u65b0**\uff1a\u805a\u7126\u4e8eLayerNorm\u548cRMSNorm\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u5e94\u7528\uff0c\u63a2\u7d22\u65b0\u7684\u53c2\u6570\u8c03\u6574\u65b9\u6cd5\uff0c\u5982\u4ec5\u8c03\u6574LayerNorm\uff08LayerNorm - simp.\uff09\uff0c\u4e3a\u6a21\u578b\u8bad\u7ec3\u63d0\u4f9b\u65b0\u601d\u8def\uff0c\u5c55\u73b0\u51fa\u4e0d\u6ee1\u8db3\u4e8e\u4f20\u7edf\u65b9\u6cd5\uff0c\u79ef\u6781\u63a2\u7d22\u521b\u65b0\u7684\u6027\u683c\u7279\u8d28\u3002\n2. **\u4e25\u8c28\u52a1\u5b9e**\uff1a\u901a\u8fc7\u5927\u91cf\u5b9e\u9a8c\u6765\u9a8c\u8bc1\u5404\u79cd\u65b9\u6cd5\u7684\u6709\u6548\u6027\uff0c\u5305\u62ec\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\u5bf9\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u5f71\u54cd\u7684\u7814\u7a76\uff0c\u4ee5\u53ca\u5bf9LayerNorm\u8c03\u6574\u65b9\u6cd5\u5728\u591a\u4e2a\u4efb\u52a1\u4e0a\u6027\u80fd\u7684\u6d4b\u8bd5\u7b49\uff0c\u4ee5\u5b9e\u9645\u6570\u636e\u548c\u7ed3\u679c\u4e3a\u4f9d\u636e\uff0c\u4f53\u73b0\u51fa\u4e25\u8c28\u8ba4\u771f\u3001\u6ce8\u91cd\u5b9e\u9645\u6548\u679c\u7684\u6027\u683c\u3002\n3. **\u5584\u4e8e\u53d1\u73b0\u4e0e\u601d\u8003**\uff1a\u80fd\u4ece\u6a21\u578b\u8bad\u7ec3\u4e2d\u5076\u7136\u53d1\u73b0LayerNorm\u8c03\u6574\u65b9\u6cd5\u7684\u4f18\u52bf\uff0c\u5982\u5728\u591a\u4e2a\u4efb\u52a1\u4e0a\u8868\u73b0\u4f18\u4e8e\u4f20\u7edf\u5168\u53c2\u6570\u5fae\u8c03\u4e14\u68af\u5ea6\u65b9\u5dee\u8f83\u5c0f\uff0c\u8fdb\u800c\u6df1\u5165\u7814\u7a76\u5e76\u9a8c\u8bc1\u201cLess is More\u201d\u7406\u5ff5\u5728\u591a\u6a21\u6001\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u6709\u6548\u6027\uff0c\u53cd\u6620\u51fa\u5584\u4e8e\u89c2\u5bdf\u3001\u6355\u6349\u5076\u7136\u73b0\u8c61\u5e76\u6df1\u5165\u601d\u8003\u5176\u80cc\u540e\u539f\u7406\u7684\u6027\u683c\u3002\n4. **\u6709\u524d\u77bb\u6027\u548c\u8fdb\u53d6\u7cbe\u795e**\uff1a\u5728\u7814\u7a76\u53d6\u5f97\u4e00\u5b9a\u6210\u679c\u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u610f\u8bc6\u5230\u5f53\u524d\u7814\u7a76\u7684\u5c40\u9650\u6027\uff0c\u5982\u53c2\u6570\u9ad8\u6548\u5fae\u8c03\u65b9\u6cd5\u5bf9\u8d85\u53c2\u6570\u66f4\u4e3a\u654f\u611f\uff0c\u5e76\u5c55\u671b\u672a\u6765\u8fdb\u4e00\u6b65\u7814\u7a76\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u4e3a\u6a21\u578b\u8bad\u7ec3\u63d0\u4f9b\u66f4\u7a33\u5b9a\u3001\u9ad8\u6548\u7684\u65b9\u6cd5\uff0c\u5c55\u73b0\u51fa\u5177\u6709\u524d\u77bb\u6027\u773c\u5149\u548c\u4e0d\u65ad\u8fdb\u53d6\u7684\u6027\u683c\u3002 \n\n\u603b\u4f53\u800c\u8a00\uff0c\u4eba\u7269\u5177\u6709\u52c7\u4e8e\u521b\u65b0\u3001\u4e25\u8c28\u52a1\u5b9e\u3001\u5584\u4e8e\u53d1\u73b0\u601d\u8003\u4e14\u5bcc\u6709\u524d\u77bb\u6027\u548c\u8fdb\u53d6\u7cbe\u795e\u7684\u6027\u683c\u7279\u70b9 \u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["1b119b65-a10d-482d-93fc-759d7eca9e52"], "metadata": {}}}, "analysis_store/metadata": {"1b119b65-a10d-482d-93fc-759d7eca9e52": {"analysis_hash": "", "ref_analysis_id": ""}}}