角色,内容,分镜
0f8fcb2e-9570-4314-99ab-0d3606636375,路径规划,1>2
0f8fcb2e-9570-4314-99ab-0d3606636375,"### 问题提出

在机器人导航和自动驾驶领域，路径规划是一个关键任务。蒙特卡洛树搜索（MCTS）作为一种启发式搜索算法，已被证明在优化路径选择方面具有潜力。然而，MCTS在大规模问题中计算复杂度较高，这可能限制了其在实时应用中的效率。

**问题**：在机器人导航和自动驾驶的路径规划任务中，如何有效降低MCTS的计算复杂度，同时保持其路径选择的优化性能？具体来说，有哪些策略或技术可以在MCTS的选择、扩展、模拟和回溯阶段进行优化，以提高其在实时应用中的效率和实用性？",1>2
0f8fcb2e-9570-4314-99ab-0d3606636375,"ref_ids: 454845766417543398, chunk_ids: 4, Score: 0.5391, Text: # Monte Carlo Tree Search in the Presence of Transition Uncertainty
Farnaz Kohankhaki , Kiarash Aghakasiri , Hongming Zhang 1 , Ting-Han Wei 1 , Chao Gao 2 ,Martin M¨uller 1  

1 University of Alberta, 2 Edmonton Research Center, Huawei Canada {kohankha, aghakasi, hongmin2, tinghan, mmueller }@ualberta.ca, cgao3 $@$ outlook.com

# Abstract
Monte Carlo Tree Search (MCTS) is an immensely popular search-based framework used for decision making. It is traditionally applied to domains where a perfect simulation model of the environment is available. We study and improve MCTS in the context where the environment model is given but imperfect. We show that the discrepancy between the model and the actual environment can lead to significant performance degradation with standard MCTS. We therefore develop Uncertainty Adapted MCTS (UA-MCTS), a more robust algorithm within the MCTS framework. We estimate the transition uncertainty in the given model, and direct the search towards more certain transitions in the state space. We modify all four MCTS phases to improve the search behavior by considering these estimates. We prove, in the corrupted bandit case, that adding uncertainty information to adapt UCB leads to tighter regret bound than standard UCB. Empirically, we evaluate UA-MCTS and its individual components on the deterministic domains from the MinAtar test suite. Our results demonstrate that UA-MCTS strongly improves MCTS in the presence of model transition errors.

# 1 Introduction
The Monte Carlo Tree Search (MCTS) framework (Browne et al. 2012) approaches sequential decision-making problems by selective lookahead search. It manages the balance of exploration and exploitation with techniques such as UCT (Kocsis, Szepesv´ari, and Willemson 2006). Often combined with machine learning, it has been enormously successful in both games (Silver et al. 2016; Banerjee 2020; Arneson, Hayward, and Henderson 2010; Saffidine 2008; Nijssen and Winands 2010) and non-game applications (Lu et al. 2016; Mansley, Weinstein, and Littman 2011; Sabharwal, Samulowitz, and Reddy 2012; Cazenave 2010). In these applications, a perfect simulation model allows for efficient lookahead search. However, in many practical applications, only an imperfect model is available to the agent. Yet lookahead using such a model can still be useful. We improve MCTS for this setting.  

One research area that studies imperfect models of the environment is model-based reinforcement learning (MBRL).  

Here, an agent builds its own model through limited real world interactions. The resulting learned model, when used for lookahead search, can either be for planning or for producing more accurate training targets (Silver, Sutton, and M¨uller 2008). It can also be used to generate simulated training samples for better sample efficiency (Sutton and Barto 2018). The learned model may be inaccurate for many reasons, including stochasticity of the environment, insufficient training, insufficient capacity, non stationary environments, etc. Consequently, there is a rich body of research on uncertainty in MBRL (Abbas et al. 2020; Xiao et al. 2019; Buckman et al. 2018).  

While previous approaches to using search with imperfect models exist (Vemula et al. 2020; Vemula, Bagnell, and Likhachev 2021), to the best of our knowledge, there is no prior work that directly adapts MCTS to deal with model uncertainty. In our work, we define transition uncertainty as a measure of difference between the state transitions in the perfect model and in the model that is available to the agent. We use a neural network to estimate this uncertainty.  

Our Uncertainty Adapted MCTS (UA-MCTS) approach implements the main components of the MCTS framework in a way that guides the search away from states with high uncertainty. We compare the performance of our proposed methods with MCTS baselines in three deterministic MinAtar environments (Young and Tian 2019). In each case the search agent “believes” it is playing the real game. However, the rules of the game itself have changed, and the agent only learns about this change slowly when it acts in the real environment. The results show that UA-MCTS is able to outperform the baseline MCTS with an imperfect model.  

Our approach is inspired by the work of (Vemula et al. 2020) where a robotic arm has to solve tasks despite being handicapped, e.g. by a broken motor or by an unmodeled weight restriction. To show how an agent should adapt UCB-based exploration strategy in the presence of environment uncertainties, we first consider a case of stochastic bandits (Lattimore and Szepesv´ari 2020) along with corrupted feedback. We prove that incorporating uncertainty information can enhance the performance of UCB, yielding a regret bound that is more constrained compared to the standard UCB. We also prove that in the general case of tree search, with similar modification of UCT, our UA-MCTS approach maintains its completeness property, ensuring that as the number of iterations goes to infinity, all nodes will be consistently explored. To further motivate our approach, we compare the scenarios of learning to improve the transition function, using MCTS, directly against the easier task of just learning a transition uncertainty function with UA-MCTS. In both cases, learning occurs online; the former is used with MCTS while the latter is used with UA-MCTS. Our results show that learning the transition function is much harder than learning transition uncertainty, which justifies the use of UA-MCTS in such settings.",1>2
0f8fcb2e-9570-4314-99ab-0d3606636375,"ref_ids: 454845659346651798, chunk_ids: 3, Score: 0.4648, Text: # Large-Scale Multi-Robot Coverage Path Planning via Local Search \\*
Jingtao Tang, Hang Ma  

Simon Fraser University {jingtao tang, hangma }@sfu.ca

# Abstract
We study graph-based Multi-Robot Coverage Path Planning (MCPP) that aims to compute coverage paths for multiple robots to cover all vertices of a given 2D grid terrain graph $G$ . Existing graph-based MCPP algorithms first compute a tree cover on $G$ —a forest of multiple trees that cover all vertices—and then employ the Spanning Tree Coverage (STC) paradigm to generate coverage paths on the decomposed graph $D$ of the terrain graph $G$ by circumnavigating the edges of the computed trees, aiming to optimize the makespan (i.e., the maximum coverage path cost among all robots). In this paper, we take a different approach by exploring how to systematically search for good coverage paths directly on $D$ . We introduce a new algorithmic framework, called LS-MCPP, which leverages a local search to operate directly on $D$ . We propose a novel standalone paradigm, Extended-STC (ESTC), that extends STC to achieve complete coverage for MCPP on any decomposed graphs, even those resulting from incomplete terrain graphs. Furthermore, we demonstrate how to integrate ESTC with three novel types of neighborhood operators into our framework to effectively guide its search process. Our extensive experiments demonstrate the effectiveness of LS-MCPP, consistently improving the initial solution returned by two state-of-the-art baseline algorithms that compute suboptimal tree covers on $G$ , with a notable reduction in makespan by up to $35.7\\%$ and $30.3\\%$ , respectively. Moreover, LS-MCPP consistently matches or surpasses the results of optimal tree cover computation, achieving these outcomes with orders of magnitude faster runtime, thereby showcasing its significant benefits for large-scale real-world coverage tasks.",1>2
0f8fcb2e-9570-4314-99ab-0d3606636375,"ref_ids: 454846884311042388, chunk_ids: 1, Score: 0.4453, Text: # 1 Introduction
Coverage path planning (CPP) is a fundamental problem (Galceran and Carreras 2013) in robotics, which aims to find a path for a robot to completely cover a terrain of interest, such as indoor floors (Bormann et al. 2018) and outdoor fields (Torres et al. 2016). Multi-Robot Coverage Path Planning (MCPP) is an extension of CPP tailored for multi-robot systems, aiming to coordinate the paths of multiple robots to completely cover the given terrain. With improved task efficiency and system robustness, MCPP has facilitated diverse real-world applications, including environmental monitoring (Collins et al. 2021) and search and rescue (Song et al. 2022). A fundamental challenge of MCPP lies in generating cost-balancing coverage paths to optimize task efficiency, commonly quantified by the makespan , which is the maximum path cost of all robots. This challenge is further compounded when dealing with large-scale applications where the number of robots and the size of the terrain increase.  

  
Figure 1: Graph-based CPP and MCPP: Gray squares, black circles, and black stars represent terrain graph vertices, decomposed graph vertices, and initial vertices of robots, respectively; Solid lines and dashed lines represent coverage paths and spanning edges, respectively. (a) The terrain to be covered where all terrain graph edges have uniform weights of 1 . (b) The single-robot coverage path generated by STC. (c)(d) Suboptimal and optimal 2 -robot coverage paths with makespans of 2 and 1 .5 , respectively.  

In this paper, we follow existing graph-based MCPP algorithms (Zheng et al. 2010; Li et al. 2023) that represent the terrain to be covered as a 4-connected 2D grid graph $G$ , where each edge connects horizontally or vertically adjacent vertices. The robots are required to start at and return to their respective initial vertices, as in the cover and return setting (Zheng and Koenig 2007). The foundation of these graph-based MCPP algorithms lies in the Spanning Tree Coverage (STC) paradigm (Gabriely and Rimon 2001, 2002), initially developed for (single-robot) CPP. STC operates on the terrain graph $G$ but finds a coverage path with minimal makespan on the decomposed graph $D$ derived from $G$ . The decomposed graph $D$ is also a 4-connected 2D grid graph, resulting from decomposing each vertex of $G$ into four decomposed vertices. Fig. 1 shows the terrain graph $G$ and its corresponding decomposed graph $D$ of an example terrain to be covered, where STC generates a single-robot coverage path on $D$ by circumnavigating (i.e., always moving along the right side of the spanning edges) the minimum spanning tree of $G$ .  

Like STC, existing graph-based MCPP algorithms operate on the given terrain graph $G$ exclusively to build a tree cover—a forest of multiple trees, each rooted at the initial vertex of a robot, that jointly cover all vertices of $G$ . The coverage path for each robot is then obtained by circumnavigating its corresponding tree. In essence, these algorithms reduce MCPP to the NP-hard Min-Max Rooted Tree Cover problem (Even et al. 2004; Nagamochi and Okada 2007) on $G$ that aims to optimize the weight of the largest-weighted tree in the tree cover since it determines the makespan of the resulting coverage paths on $D$ . However, operating on the terrain graph $G$ exclusively has two disadvantages. Firstly, it does not work for an incomplete terrain graph $G$ where some of the four decomposed vertices of a vertex might be blocked and thus absent in the decomposed graph $D$ . Secondly, an optimal tree cover on $G$ does not necessarily result in an optimal MCPP solution (as illustrated in Fig. 1-(c) and (d)), which yields an asymptotic suboptimality ratio of four for makespan in the worst case (Zheng et al. 2010), since circumnavigating the trees in a tree cover explores only a portion of the solution space that encompasses all possible sets of coverage paths on the decomposed graph $D$ .  

Therefore, we take a different route to explore how to systematically search for good coverage paths directly on the decomposed graph. Our algorithmic contribution is through the following key aspects: (1) We propose a novel standalone algorithmic paradigm called Extended-STC (ESTC), an extension of STC, to address coverage planning problems on both complete and incomplete terrain graphs by directly operating on decomposed graphs. Importantly, we demonstrate that ESTC guarantees complete coverage for both singleand multi-robot settings, rendering it an efficient and versatile solution to coverage path planning. (2) We propose three types of specialized neighborhood operators to facilitate an effective local search process by identifying costefficient subgraphs of the decomposed graph that are used to generate coverage paths for the robots. The strategic integration of these operators enhances the efficiency of the local search in exploring the solution space. (3) We demonstrate how to combine these neighborhood operators with iterative calls to the ESTC paradigm to establish our proposed LS-MCPP framework for solving MCPP. To validate the effectiveness of LS-MCPP, we conduct extensive experiments, comparing it with three state-of-the-art baseline graph-based MCPP algorithms that operate on complete terrain graphs only. The results show that LS-MCPP achieves makespans that are smaller by up to $35.7\\%$ and $30.3\\%$ than two of the baseline algorithms, respectively, which compute suboptimal tree covers on the terrain graph. Additionally, LS-MCPP consistently achieves makespans comparable to or better than those achieved by the remaining baseline algorithm, which employs mixed integer programming (MIP) to compute optimal tree covers on the terrain graph. While the baseline algorithm takes more than tens of hours to complete, LS-MCPP accomplishes the same task in just a matter of minutes, showcasing its efficiency and practicality for large-scale real-world coverage problems.",1>2
