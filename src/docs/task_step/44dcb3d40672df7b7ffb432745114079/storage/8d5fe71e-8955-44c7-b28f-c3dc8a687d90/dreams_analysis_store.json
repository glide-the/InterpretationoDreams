{"analysis_store/data": {"0e29307e-b399-4da7-a98c-2b2e81a661e5": {"__data__": {"id_": "0e29307e-b399-4da7-a98c-2b2e81a661e5", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u56e0\u7d20\u76f8\u5173**\uff1a\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3001\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0 \u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u7406\u8bba\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u3001\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u7b49\u591a\u65b9\u9762\u7684\u7d27\u5bc6\u8054\u7cfb \u3002\n3. **\u805a\u7126\u4ea4\u53c9\u7814\u7a76**\uff1a\u6ce8\u91cd\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u4ee5\u53ca\u5728\u4e0d\u540c\u60c5\u5883\u4e0b\u7684\u5173\u8054\u8868\u73b0\u3002  ", "scene_monologue_context": "\u4eca\u5929\u6211\u4e00\u76f4\u5728\u6df1\u5165\u7814\u7a76\u8fd1\u51e0\u5e74\u6a21\u578b\u84b8\u998f\u76f8\u5173\u7814\u7a76\u9886\u57df\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u3002\u4e3b\u8981\u56f4\u7ed5\u7740\u77e5\u8bc6\u4ece\u590d\u6742\u6559\u5e08\u6a21\u578b\u8f6c\u79fb\u5230\u7b80\u5355\u5b66\u751f\u6a21\u578b\u5c55\u5f00\uff0c\u63a2\u5bfb\u90a3\u4e9b\u88ab\u8ba4\u4e3a\u6709\u6548\u7684\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\uff0c\u4ee5\u6b64\u6765\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\u3002\n\n\u5728\u77e5\u8bc6\u84b8\u998f\u65b9\u9762\uff0c\u5b83\u5728\u5404\u4e2a\u9886\u57df\u7684\u6a21\u578b\u538b\u7f29\u4e2d\u90fd\u5907\u53d7\u5173\u6ce8\u3002\u901a\u8fc7\u5c06\u6559\u5e08\u6a21\u578b\u5b66\u5230\u7684\u77e5\u8bc6\u8f6c\u79fb\u5230\u8f7b\u91cf\u7ea7\u5b66\u751f\u6a21\u578b\uff0c\u80fd\u663e\u8457\u964d\u4f4e\u63a8\u7406\u6210\u672c\uff0c\u8fd8\u80fd\u4fdd\u6301\u4e0d\u9519\u7684\u6027\u80fd\u3002\u73b0\u5728\u4e0d\u5c11\u7814\u7a76\u91c7\u7528\u591a\u4e2a\u6559\u5e08\u6a21\u578b\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u5229\u7528\u5f02\u6784\u6559\u5e08\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u80fd\u878d\u5408\u4e92\u8865\u77e5\u8bc6\uff0c\u6bd4\u5355\u4e00\u6559\u5e08\u6a21\u578b\u63d0\u4f9b\u66f4\u5168\u9762\u7684\u6307\u5bfc\u3002\u800c\u4e14\u5728\u6392\u5e8f\u95ee\u9898\u4e0a\uff0c\u77e5\u8bc6\u84b8\u998f\u4e5f\u6709\u7814\u7a76\uff0c\u65b0\u7684\u65b9\u6cd5\u5c06\u84b8\u998f\u8fc7\u7a0b\u6784\u5efa\u4e3a\u6392\u5e8f\u5339\u914d\u4efb\u52a1\uff0c\u76f4\u63a5\u8f6c\u79fb\u6392\u5e8f\u77e5\u8bc6\uff0c\u5728\u5f88\u591a\u6392\u5e8f\u5e94\u7528\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u8fd8\u80fd\u7075\u6d3b\u5e94\u7528\u4e8e\u5f02\u6784\u6a21\u578b\u95f4\u7684\u77e5\u8bc6\u8f6c\u79fb\u3002\n\n\u53e6\u5916\uff0c\u53d7\u4eba\u7c7b\u5b66\u4e60\u8fc7\u7a0b\u542f\u53d1\u7684\u6613\u5230\u96be\u5b66\u4e60\u65b9\u6cd5\uff0c\u5728\u673a\u5668\u5b66\u4e60\u5404\u9886\u57df\u4e5f\u88ab\u5e7f\u6cdb\u7814\u7a76\u3002\u5b83\u5728\u76f4\u63a5\u4f18\u5316\u975e\u51f8\u76ee\u6807\u51fd\u6570\u53ef\u80fd\u6536\u655b\u5230\u8f83\u5dee\u5c40\u90e8\u6700\u5c0f\u503c\u65f6\u5f88\u6709\u7528\uff0c\u80fd\u5e2e\u52a9\u6a21\u578b\u5b9e\u73b0\u66f4\u597d\u7684\u6cdb\u5316\u3002\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\uff0c\u8fd9\u79cd\u65b9\u6cd5\u88ab\u5e94\u7528\u5230\u77e5\u8bc6\u84b8\u998f\u91cc\uff0c\u4ee5\u63d0\u9ad8\u84b8\u998f\u6548\u7387\u3002\n\n\u6211\u8fd8\u4e86\u89e3\u5230\uff0c\u73b0\u6709\u7684\u9488\u5bf9\u63a8\u8350\u7cfb\u7edf\u7684\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5\uff0c\u5927\u591a\u805a\u7126\u4e8e\u4ece\u540c\u6784\u6559\u5e08\u6a21\u578b\u5230\u5b66\u751f\u6a21\u578b\u7684\u84b8\u998f\uff0c\u800c\u5f02\u6784\u6559\u5e08\u6a21\u578b\u7684\u84b8\u998f\u7814\u7a76\u8f83\u5c11\u3002\u540c\u65f6\uff0c\u4e4b\u524d\u7ed3\u5408\u6613\u5230\u96be\u5b66\u4e60\u7684\u77e5\u8bc6\u84b8\u998f\u5de5\u4f5c\uff0c\u591a\u96c6\u4e2d\u5728\u5206\u7c7b\u9886\u57df\u6216\u4f9d\u8d56\u7279\u5b9a\u9886\u57df\u7279\u5f81\uff0c\u96be\u4ee5\u5e94\u7528\u5230\u6392\u5e8f\u95ee\u9898\u548c\u63a8\u8350\u7cfb\u7edf\u4e2d\u3002\u8fd9\u4e5f\u4e3a\u540e\u7eed\u7814\u7a76\u6307\u660e\u4e86\u65b9\u5411\uff0c\u8981\u627e\u5230\u9002\u5408\u538b\u7f29\u6392\u5e8f\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u8003\u8651\u5b66\u751f\u5b66\u4e60\u72b6\u6001\uff0c\u84b8\u998f\u51fa\u4ece\u6613\u5230\u96be\u7684\u6392\u5e8f\u77e5\u8bc6\u5e8f\u5217\u3002\n\n\u5728\u77e5\u8bc6\u84b8\u998f\u7684\u53d1\u5c55\u5386\u7a0b\u4e2d\uff0c\u65e9\u671f\u65b9\u6cd5\u63a2\u7d22\u4e86\u591a\u79cd\u84b8\u998f\u77e5\u8bc6\u6765\u5f15\u5bfc\u5b66\u751f\u7f51\u7edc\uff0c\u4ece\u7f51\u7edc\u672b\u7aef\u7684logits\u5230\u4e2d\u95f4\u5c42\u66f4\u4e30\u5bcc\u7684\u7a7a\u95f4\u4fe1\u606f\u7279\u5f81\uff0c\u518d\u5230\u6700\u8fd1\u7684\u7ed3\u6784\u77e5\u8bc6\u3002\u5e76\u4e14\uff0c\u65b0\u7684\u6846\u67b6\u4e5f\u4e0d\u65ad\u6d8c\u73b0\uff0c\u50cf\u4e92\u5b66\u6846\u67b6\u3001\u81ea\u84b8\u998f\u6846\u67b6\u7b49\uff0c\u8fd8\u6709\u5143\u5b66\u4e60\u65b9\u6cd5\u88ab\u7528\u4e8e\u8bbe\u8ba1\u65b0\u6846\u67b6\u3002\u4f46\u51e0\u4e4e\u6240\u6709\u5148\u524d\u5de5\u4f5c\u5728\u8bad\u7ec3\u65f6\u90fd\u6ca1\u6709\u8003\u8651\u67b6\u6784\u8bbe\u8ba1\uff0c\u82e5\u80fd\u5728\u8fd9\u65b9\u9762\u6539\u8fdb\uff0c\u6216\u8bb8\u80fd\u5b9e\u73b0\u66f4\u597d\u7684\u8d44\u6e90 - \u6027\u80fd\u6743\u8861\u3002\n\n\u5728\u6a21\u578b\u538b\u7f29\u7684\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u65b9\u9762\uff0c\u4e5f\u6709\u5f88\u591a\u7814\u7a76\u6210\u679c\u3002\u4e0d\u540c\u65b9\u6cd5\u901a\u8fc7\u5404\u79cd\u51c6\u5219\u6765\u786e\u5b9a\u6ee4\u6ce2\u5668\u7684\u91cd\u8981\u6027\uff0c\u6709\u7684\u76f4\u63a5\u79fb\u9664\u4e0d\u91cd\u8981\u7684\u6ee4\u6ce2\u5668\uff0c\u6709\u7684\u5728\u8bad\u7ec3\u65f6\u6dfb\u52a0\u7a00\u758f\u7ea6\u675f\u518d\u79fb\u9664\u7a00\u758f\u90e8\u5206\u3002\u8fd1\u5e74\u6765\uff0c\u4e00\u4e9b\u5de5\u4f5c\u5f00\u59cb\u5b66\u4e60\u526a\u679d\u7684\u7a00\u758f\u5206\u914d\uff0c\u4ee5\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\uff0c\u4f46\u5927\u591a\u6ca1\u6709\u989d\u5916\u64cd\u4f5c\u6765\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\u4e5f\u6709\u5de5\u4f5c\u5c1d\u8bd5\u5c06\u77e5\u8bc6\u84b8\u998f\u548c\u6a21\u578b\u538b\u7f29\u7ed3\u5408\uff0c\u4f46\u5728\u6846\u67b6\u5c42\u9762\u7684\u91cd\u65b0\u8bbe\u8ba1\u4e0d\u8db3\uff0c\u96be\u4ee5\u5b9e\u73b0\u6027\u80fd\u548c\u6a21\u578b\u590d\u6742\u5ea6\u7684\u6700\u4f18\u5e73\u8861\u3002\n\n\u6b64\u5916\uff0c\u5728\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u9886\u57df\uff0c\u4e3a\u4e86\u5c06\u5f3a\u5927\u7684\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u90e8\u7f72\u5230\u8d44\u6e90\u7a00\u7f3a\u573a\u666f\uff0c\u4eba\u4eec\u5c1d\u8bd5\u4e86\u591a\u79cd\u65b9\u6cd5\uff0c\u5982\u91cf\u5316\u3001\u526a\u679d\u3001\u6743\u91cd\u5171\u4eab\u7b49\u3002\u77e5\u8bc6\u84b8\u998f\u4e5f\u662f\u91cd\u8981\u7684\u7814\u7a76\u65b9\u5411\uff0c\u4e0d\u540c\u7814\u7a76\u8005\u63d0\u51fa\u4e86\u5404\u79cd\u76ee\u6807\u548c\u65b9\u6cd5\u6765\u5b9e\u73b0\u77e5\u8bc6\u8f6c\u79fb\u3002\u800c\u6211\u4eec\u63d0\u51fa\u7684\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\uff0c\u51c6\u5907\u4ece\u4e09\u4e2a\u8bed\u4e49\u7c92\u5ea6\uff08\u8bcd\u5143\u7ea7\u3001\u8de8\u5ea6\u7ea7\u548c\u6837\u672c\u7ea7\uff09\u63d0\u53d6\u7ed3\u6784\u5173\u7cfb\u4f5c\u4e3a\u77e5\u8bc6\uff0c\u5206\u5c42\u84b8\u998f\u7ed9\u5b66\u751f\u6a21\u578b\uff0c\u671f\u671b\u80fd\u4e3a\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u5e26\u6765\u65b0\u7684\u601d\u8def\u548c\u65b9\u6cd5\u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "8d5fe71e-8955-44c7-b28f-c3dc8a687d90:\u300c\u5206\u6790\u8fd1\u51e0\u5e74\u7814\u7a76\u9886\u57df\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u300d\n8d5fe71e-8955-44c7-b28f-c3dc8a687d90:\u300c\u8fd1\u51e0\u5e74\u6a21\u578b\u84b8\u998f\u76f8\u5173\u7814\u7a76\u9886\u57df\u56f4\u7ed5\u77e5\u8bc6\u4ece\u590d\u6742\u6559\u5e08\u6a21\u578b\u8f6c\u79fb\u5230\u7b80\u5355\u5b66\u751f\u6a21\u578b\u5c55\u5f00\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u4e2d\uff0c\u6709\u54ea\u4e9b\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u7684\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\u6765\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\uff1f \u300d\n8d5fe71e-8955-44c7-b28f-c3dc8a687d90:\u300cref_ids: 454846429944424370, chunk_ids: 5, Score: 0.7812, Text: # 2 RELATED WORK\nKnowledge Distillation. Knowledge distillation (KD) has been actively studied for model compression in various fields [ 5 ,11 ,17 ,37 ,48 ,55 ]. KD transfers the knowledge captured by a teacher model through large capacity into a lightweight student model, significantly lowering the inference cost while maintaining comparable performance. Pointing out that the knowledge from a single teacher model is insufficient to provide accurate supervision, many recent studies [ 8 ,28 ,42 ,45 ,50 ,51 ,54 ] employ multiple teacher models and show great effectiveness in further improving a student model. Notably, the state-of-the-art methods [ 8 ,45 ,51 ] exploit heterogeneous teacher models varying in configurations, architectures, loss functions, and many other factors to incorporate their complementary knowledge, which can provide more comprehensive guidance than a single view from a single or homogeneous teacher model. Knowledge Distillation for Ranking. KD has been also studied for ranking problems. Many studies [ 4 ,20 ,22 ,40 ,54 ] transfer pointwise importance on each user-item pair (or query-document pair). However, the point-wise approach cannot consider the relations of multiple items simultaneously, which leads to the limited ranking performance [ 5 ,15 ,41 ]. Recent methods [ 5 ,15 ,25 ,34 ,41 ,52 ] formulate the distillation process as a ranking matching task. They utilize the ranking orders from the teacher as supervision and train the student to preserve the teacher\u2019s permutation. By directly transferring the ranking knowledge, this approach has shown state-of-the-art performance in various ranking-oriented applications such as top$K$ recommendation [ 15 ,16 ,25 ,41 ], document retrieval [ 34 ,52 ], and person identification [ 5 ]. Further, the ranking matching approach can be flexibly applied to knowledge transfer between heterogeneous models having distinct output score distributions to which the point-wise approach cannot be directly applied [19].  \n\nEasy-to-hard Learning. Inspired by the learning process of humans, easy-to-hard learning has been extensively studied in various fields of machine learning [ 2 ,6 ,13 ,21 ,27 ,29 ,43 ,46 ]. It has been widely used when direct optimization of a non-convex objective function may converge to poor local minima and has been proven to play an important role in achieving a better generalization [ 2 ]. Curriculum learning [ 2 ,43 ] trains a model by gradually including data samples in ascending order of difficulty defined by prior knowledge. On the other hand, self-paced learning [21] makes the curriculum dynamically adjusted during the training, usually based on training loss [ 21 ] or performance on the validation set [ 6 ,49 ]. The easy-tohard learning has been applied to KD to improve the distillation efficacy in computer vision [ 14 ,39 ] and natural language processing [52 ,55 ]. [ 3 ,14 ,39 ] exploit the teacher\u2019s optimization route to form a curriculum for the student, [ 52 ] gradually includes an increasing number of fine-grained document pairs during the training.  \n\nRemarks. The existing KD methods for RS focus on distillation from a homogeneous teacher that has the same model type to the student model. Distillation from heterogeneous teachers, which have distinct architectures and learning objectives to the student model, has not been studied well. In this work, we show the necessity and difficulty of distilling the ensemble of heterogeneous teachers and apply the easy-to-hard learning to cope with the problem. Further, the prior KD works with the easy-to-hard learning focus on classification [ 14 ,31 ,39 ] or rely on domain-specific features [ 55 ], which makes them hard to apply to the ranking problem and recommender system. Our work provides a solution tailored to compress ranking models by distilling an easy-to-hard sequence of ranking knowledge considering the student\u2019s learning state.\n\n# 3 PRELIMINARIES\n\n# 3.1 Problem Formulation\nLet $\\\\mathbf{\\\\nabla}\\\\mathcal{U}$ and $\\\\boldsymbol{\\\\mathcal{I}}$ denote the user and item sets, respectively. Given implicit user-item interaction (e.g., click) history, a recommendation model $f:\\\\mathcal{U}\\\\times\\\\mathcal{I}\\\\rightarrow\\\\mathbb{R}$ learns the ranking score of each user-item pair. Based on the predicted scores, the recommender system provides a ranked list of top $\\\\cal{K}$ unobserved items for each user, called as top$K$ recommendation. Given a set of cumbersome teacher models $\\\\bar{\\\\mathcal{F}}=\\\\{f^{1},f^{2},...,f^{M}\\\\}$ , our goal is to effectively compress an ensemble of the teachers into a lightweight student model $f$ . The student model has a significantly reduced computational cost for inference, and thus it is more suitable for real-time services and resourceconstrained environments. We pursue a model-agnostic solution, which enables any kind of recommendation model can be flexibly used for both teacher and student, allowing service providers to use any preferred model according to their environments.  \n\nWe exploit heterogeneous teacher models with various architectures and loss functions. In this work, we choose six representative types of models extensively studied for RS: MF (Matrix Factorization) [ 36 ], ML (Metric Learning) [ 12 ], DNN (Deep Neural Network) [10 ], GNN (Graph Neural Network) [ 9 ], AE (AutoEncoder) [ 26 ], IAE (Item-based AE) [ 38 ]. A detailed analysis of the teacher models and their ensemble is provided in Appendix A.2.  \n\nNotations. Given a ranked list (i.e., permutation of items) $\\\\pi$ ,$\\\\pi_{k}$ denotes the $k$ -th item in $\\\\pi$ , and $r(\\\\pi,i)$ denotes the ranking of item \ud835\udc56in $\\\\pi$ where a lower value indicates a higher position, i.e., $r(\\\\pi,i)=0$ is the highest ranking. Note that $\\\\pi$ is defined for each user $u$ . For notational simplicity, we omit $u$ from $\\\\pi$ throughout the paper.\u300d\n8d5fe71e-8955-44c7-b28f-c3dc8a687d90:\u300cref_ids: 454845510461164774, chunk_ids: 2, Score: 0.7539, Text: # 2 RELATED WORK\n\n# 2.1 Knowledge distillation\nThe concept of knowledge distillation is introduced by Hinton et al. [5 ] based on a teacher-student framework. This method transfers knowledge from the trained teacher to the student network. Recently, it has been applied mainly to two areas: model compression [ 13 ] and knowledge transfer [ 14 ]. For model compression, a compact small student model is trained to mimic the pre-trained cumbersome teacher model.  \n\nMost knowledge distillation methods explore distilled knowledge in order to guide the student network, including instance feature, instance feature relationship and feature space transformation, etc. For instance feature, the related methods [ 5 ], [ 15 ] in the early time distill logits at the end of the network. The logits reflect the class distribution and contain more information than one-hot label. In this manner, the student network can be improved by learning more information. After that, features containing richer spatial information from intermediate layers [ 16 ], [ 17 ], [ 18 ] are extracted as the distilled knowledge. For example, FitNet [ 16 ]extracts the feature maps of the intermediate layers as well as the final output to teach the student network. Zagoruyko et al. [17 ]define Attention Transfer (AT) based on attention maps to improve the performance of the student network. More recently, structural knowledge [ 19 ], [ 20 ], [ 21 ], e.g., instance feature relationship and feature space transformation, has been presented, which represents more comprehensive information. For example, Liu et al. [19 ] propose the Instance Relationship Graph (IRG) to represent instance feature relationship and feature space transformation. It considers the geometry of the feature spaces and allows for dimensionagnostic transfer of knowledge. Yim et al. [21 ] present the Flow of Solution Procedure (FSP) to transfer the inference procedure of the teacher, which can be seen as a feature space transformation rather than the intermediate layer results.  \n\nThough the above methods have reached a milestone in knowledge distillation, all of them follow a classic single-teachersingle-student framework. Recently, some works have explored new frameworks for knowledge distillation. For instance, [ 22 ]and [ 23 ] propose a mutual learning framework where multiple peer networks learn from each other. The papers [ 24 ] and [ 25 ]present self-distillation frameworks that enable the network to distill from itself. Meta learning methods are adopted to design new frameworks. Jang et al. [26 ] make use of meta learning to determine which information should be transferred during knowledge transfer. Liu et al. [27 ] directly learn soft targets via a meta network for self-distillation. However, nearly all of the previous works perform optimization with a fixed student network. A better resource-performance trade-off can be achieved, if the architecture design is considered during training.\n\n# 2.2 Structured sparsity pruning\nIn model compression, structured sparsity pruning directly removes redundant neurons and channels rather than irregular weights. Thus, it is hardware-friendly and has been widely applied in recent years. Some works [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ] aim to exploit a criterion of the filter importance and prune the unimportant filters, while some other works [ 33 ], [ 34 ], [ 35 ], [ 36 ]devote to training the network with additional sparse constraints and removing the sparse part of the network. For example, Li et al. [28 ] consider that the parameters with small $L_{1}$ -norm are less important. He et al. [29 ] calculate the geometric median of the filters within the same layer and prune the filters near the geometric median. Afterwards, HRank [ 30 ] uses rank to assess the filter importance and pruned filters with low-rank feature maps. He et al. [31 ], [ 32 ] exploit a measure of the filter importance. The unimportant filters are pruned in a soft manner. In particular, the unimportant filters are just set to be zero but they may still be updated in the next training epoch. In contrast, some works [ 33 ], [34 ] impose sparse regularization to learn the importance of each channel. Huang et al. [35 ] present a scaling factor to scale the outputs of specific structures and add sparsity constraints on these factors, so that the structure corresponding to a zero-value scaling factor can be removed. ThiNet [ 36 ] regards filter pruning as an optimization problem, and prune each filter layer using statistical information from their next layer.  \n\nMore recently, some works [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ]learn the sparse allocation of pruning, to meet budget constraints. For example, Gordon et al. [37 ] propose a general technique, i.e. , MorphNet, for resource-constrained optimization of DNN architecture. But the width multiplier that uniformly expands all layer sizes does not consider the difference among layers so that the resource allocation may not be optimal. ECC [ 38 ] introduces an energy consumption model to optimize the DNN compression problem and update the pruned ratio, under an energy constraint. ADMM is leveraged to solve the gradient-based learning problem. Besides, some works [ 39 ], [ 40 ], [ 41 ], [ 42 ] automatically learn the pruned ratio of each DNN layer. For instance, AMC [ 39 ] uses reinforcement learning to find a proper sparsity ratio for each layer. MetaPruning [ 41 ] constructs a meta network to directly generate the weights of the compressed model, given the sparse allocated ratios. Ning et al. [42 ] present a differentiable pruning process to learn the sparse allocation. ADMM is also used for the budgeted pruning problem. Though these previous works use complex optimization processes to meet the compression budget, no extra operation is adopted to enhance the model performance.  \n\nRecent works [ 10 ], [ 11 ], [ 12 ] combine knowledge distillation and model compression to obtain a compact model with high accuracy. Li et al. [11 ] first compress a teacher network to obtain a student network, and then add a $1\\\\times1$ convolution layer at the end of each block to make the student mimic the teacher. After that, they merged the $1\\\\times1$ convolution layer into the previous layer. Bai et al. [12 ] combine cross distillation and network pruning by adding regularization to a loss function. However, these methods either treat knowledge distillation and model compression as two independent stages or simply combine the loss functions. Without a framework-level re-design, it is difficult to achieve an optimal trade-off between performance and model complexity.\u300d\n8d5fe71e-8955-44c7-b28f-c3dc8a687d90:\u300cref_ids: 454898870278686918, chunk_ids: 1, Score: 0.6289, Text: # 2 Related Work\nLanguage Model Compression. Pre-trained language models ( Devlin et al. ,2019 ;Clark et al. ,2020 ;Brown et al. ,2020 ) perform remarkably well on various applications but at the cost of high computation and memory usage. To deploy these powerful models into resource-scarce scenarios, various attempts have been made to compress the language models into small ones. Quantization methods ( Zafrir et al. ,2019 ;Shen et al. ,2020 ;Zhang et al. ,2020 ;Bai et al. ,2021 ) convert the model parameters to lower precision. Pruning approaches identify then remove unimportant individual weights or structures ( Michel et al. ,2019 ;Fan et al. ,2019 ;Gordon et al. ,2020 ;Hou et al. ,2020 ). Weight sharing techniques ( Dehghani et al. ,2018 ;Lan et al. ,2019 ) allow the model to reuse the transformer layer multiple times to reduce parameters.  \n\nKnowledge Distillation. Knowledge distillation ( Hinton et al. ,2015 ) is another major line of research to do model compression, which is the main concentration in this paper. Hinton et al. (2015 )first proposed to minimize the KL-divergence between the predicted distributions of the teacher and the student. Sanh et al. (2019 ); Sun et al. (2019 ); Liang et al. (2020 ) adopted this objective to teach the student on masked language modeling or text classification tasks. Romero et al. (2014 ) proposed to directly match the feature activations of the teacher and the student. Jiao et al. (2020 ) followed the idea and took the intermediate representations in each transformer layer of the teacher as one of the knowledge to be transferred. Tian et al. (2019 ) proposed a contrastive distillation framework where the teacher\u2019s representations were treated as positives to the corresponding student\u2019s representations. Sun et al. (2020 ); Fu et al. (2021 ) customized this idea to language model compression and proved its effectiveness. Researchers also attempted to use the mutual relations of representations as the knowledge to transfer. In the literature of image classification, Peng et al. (2019 ); Tung and Mori (2019 ); Park et al. (2019 ) pointed out that the relations of the image representations of the teacher should be preserved in the student\u2019s feature space, and adopted a series of geometric measurements to model the sample relations. For distilling transformer models, Park et al. (2021 ) enforced the relations across tokens and layers between the teacher and the student to be consistent. Jiao et al. (2020 ); Wang et al. (2020 ,2021 ) used the attention dependencies between tokens to teach the student. In this paper, we propose to transfer the multi-granularity knowledge to the student. Different from previous works that only considered a single granularity of representations, we jointly transfer the token-level, span-level and sample-level structural knowledge. And compared with Shao and Chen (2021 ) which considered the multi-granularity visual features in an image as the knowledge, our method works in a different modality, presents a different definition of granularity, and prepares the multi-granularity knowledge as the structural relations among representations.  \n\n  \nFigure 1: The overall framework of MGSKD.\n\n# 3 Method\nWe propose MultiGranularity Structural Knowledge Distillation, a novel framework to distill the knowledge from a large transformer language model to a small one. Different from previous works that transferred the knowledge derived from either token-level or sample-level outputs, we prepare the knowledge in three semantic granularities: token-level, span-level and sample-level. Given some granularity of representations of the teacher model, we form the knowledge as the structural relations, i.e., the pair-wise interactions and the triplet-wise geometric angles, between the representations. We then distill the well-organized structural knowledge to the student hierarchically across layers, where the token-level and the span-level knowledge are transferred to the bottom layers to provide more syntactic guidance while the sample-level knowledge is transferred to the upper layers to offer more help of semantic understanding. The framework of MGSKD is illustrated in Figure 1 .\n\n# 3.1 Multi-granularity Representation\nNatural languages have multiple granularities of conceptual units. In the context of pre-trained transformers ( Devlin et al. ,2019 ), the basic unit is the tokens produced by sub-word tokenizers ( Wu et al. ,2016 ;Radford et al. ,2019 ). Several consecutive tokens become a text span, and the sample is comprised of all the tokens it contains. Existing knowledge distillation approaches ( Jiao et al. ,2020 ;Wang et al. ,2020 ;Sun et al. ,2020 ;Fu et al. ,2021 ) focused on one granularity of representation, neglecting that texts are built upon language units from multiple granularities. Intuitively, incorporating multi-granularity representations in knowledge distillation may provide more guidance since the student can be taught how to compose the semantic concepts from small granularities to larger ones. Therefore, we propose to gather multi-granularity representations for knowledge distillation. We construct three granularities of representations: tokens, spans that hold complete meanings, and samples.  \n\nToken Representation. The first granularity is the sub-word token, which is the foundation of high-level granularity. Given an input text, a tokenizer such as WordPiece ( Wu et al. ,2016 ) splits it into $n$ tokens $x\\\\,=\\\\,[t_{1},t_{2},.\\\\ldots,t_{n}]$ . The tokens are converted to a sequence of continuous representations $\\\\pmb{E}=[e_{1},e_{2},\\\\allowbreak...,e_{n}]\\\\in\\\\mathbb{R}^{n\\\\times d}$ through the embedding layer. For the sake of clarity, we treat the embedding layer as the 0 -th layer and set $H^{0}\\\\;=\\\\;E$ . Then the token embeddings $H^{0}$ are passed to $L$ stacked transformer layers. The $l$ -th layer takes the output representations $H^{l-1}$ of the previous layer as its input, and returns the updated representations $H^{l}$ using multi-head attention (MHA) and position-wise feed-forward network (FFN). Herein, we obtain $L{+1}$ layers of token representations $\\\\{H^{l}\\\\}_{l=0}^{L}$ where $\\\\pmb{H}^{l}\\\\in\\\\mathbb{R}^{n\\\\times d}$ .  \n\nSpan Representation. The second granularity is the span, which is comprised of several consecutive tokens. Different from SpanBERT ( Joshi et al. ,2020 ) that randomly selects token spans whose start positions and lengths are sampled from some distributions for masked language modeling, we propose to extract spans that have complete meanings. Widely adopted sub-word tokenizers in pre-trained transformers split some of the English words into several sub-word tokens. We consider these whole words consisting of multiple sub-word tokens, and phrases, as meaningful spans. Sub-word tokens for whole words are easy to obtain using WordPiece tokenizer ( Wu et al. ,2016 ). While for phrase identification, we train a classifier-based English chunker on CoNLL-2000 corpus ( Tjong Kim Sang and Buchholz ,2000 ) following the instructions 1 . We then use the trained chunker to extract noun phrases (NP), verb phrases (VP), and prepositional phrases (PP). These identified phrases are tokenized by WordPiece tokenizer to obtain tokens. Herein, we can obtain $n_{s}$ token spans $x_{\\\\mathrm{span}}=[s_{1},s_{2},...\\\\,,s_{n_{s}}]$ ,where $s_{i}=[t_{j},t_{j+1},\\\\ldots,t_{j+n_{s_{i}}-1}]$ denotes the $i$ -th span that starts at the $j$ -th token and contains $n_{s_{i}}$ tokens. We then build span representations based on token representations using mean pooling:  \n\n$$\n\\\\begin{array}{r}{\\\\hat{h}_{i}^{l}=\\\\operatorname{Pool}(H_{j:j+n_{s_{i}}}^{l}),}\\\\end{array}\n$$  \n\nvarious relations to other elements, we propose that the knowledge is better specified as the structural relations of the representations in a semantic space, instead of the individual representations themselves. Therefore, instead of directly matching each hidden representation between the teacher and the student, we propose to extract structural relations from multi-granularity representations as the knowledge to teach the student. We first project the representations into multiple sub-spaces, then we extract two types of structural knowledge: pairwise interactions and triplet-wise geometric angles.  \n\nSample Representation. The third granularity is the input text sample itself. Based on token representations again, we use mean-pooling to aggregate all the token representations in a text sample to form sample representation:  \n\nwhere $\\\\hat{h}_{i}^{l}\\\\,\\\\in\\\\,\\\\mathbb{R}^{d}$ \u2208is the repr ion of the $i$ -th span in layer l. We obtain $L+1$ layers of span representations as $\\\\{\\\\hat{H}^{l}\\\\}_{l=0}^{L}$ }where $\\\\hat{H}^{l}\\\\in\\\\mathbb{R}^{n_{s}\\\\times{d}}$ \u2208.  \n\nHerein, we get $L+1$ layers of sample representations as $\\\\{\\\\tilde{h}^{l}\\\\}_{l=0}^{L}$ where $\\\\bar{\\\\tilde{h}}^{l}\\\\in\\\\mathbb{R}^{d}$ .  \n\n$$\n\\\\tilde{h}^{l}=\\\\mathrm{Pool}({\\\\cal H}^{l}),\n$$\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - \u5728\u8fd1\u51e0\u5e74\u6a21\u578b\u84b8\u998f\u76f8\u5173\u7814\u7a76\u9886\u57df\u56f4\u7ed5\u77e5\u8bc6\u4ece\u590d\u6742\u6559\u5e08\u6a21\u578b\u8f6c\u79fb\u5230\u7b80\u5355\u5b66\u751f\u6a21\u578b\u5c55\u5f00\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u4e2d\uff0c\u6709\u6548\u7684\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\u6709\u54ea\u4e9b\u6765\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\uff1f\n    - \u73b0\u6709\u7684\u9488\u5bf9\u63a8\u8350\u7cfb\u7edf\u7684\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5\u591a\u805a\u7126\u540c\u6784\u6559\u5e08\u6a21\u578b\u5230\u5b66\u751f\u6a21\u578b\u7684\u84b8\u998f\uff0c\u5982\u4f55\u5f00\u5c55\u5f02\u6784\u6559\u5e08\u6a21\u578b\u7684\u84b8\u998f\uff1f\n    - \u4e4b\u524d\u7ed3\u5408\u6613\u5230\u96be\u5b66\u4e60\u7684\u77e5\u8bc6\u84b8\u998f\u5de5\u4f5c\u591a\u96c6\u4e2d\u5728\u5206\u7c7b\u9886\u57df\u6216\u4f9d\u8d56\u7279\u5b9a\u9886\u57df\u7279\u5f81\uff0c\u600e\u6837\u627e\u5230\u9002\u5408\u538b\u7f29\u6392\u5e8f\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u8003\u8651\u5b66\u751f\u5b66\u4e60\u72b6\u6001\u84b8\u998f\u51fa\u4ece\u6613\u5230\u96be\u7684\u6392\u5e8f\u77e5\u8bc6\u5e8f\u5217\uff1f\n    - \u5728\u77e5\u8bc6\u84b8\u998f\u4e2d\uff0c\u5982\u4f55\u5728\u8bad\u7ec3\u65f6\u8003\u8651\u67b6\u6784\u8bbe\u8ba1\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u8d44\u6e90 - \u6027\u80fd\u6743\u8861\uff1f\n    - \u5728\u6a21\u578b\u538b\u7f29\u7684\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u4e2d\uff0c\u600e\u6837\u5728\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\u7684\u540c\u65f6\u63d0\u5347\u6a21\u578b\u6027\u80fd\uff1f\n    - \u5982\u4f55\u5c06\u5f3a\u5927\u7684\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u90e8\u7f72\u5230\u8d44\u6e90\u7a00\u7f3a\u573a\u666f\uff0c\u7279\u522b\u662f\u5728\u77e5\u8bc6\u84b8\u998f\u65b9\u9762\u6709\u54ea\u4e9b\u65b0\u65b9\u6cd5\uff1f\n - **\u76ee\u6807**\uff1a\n    - \u5206\u6790\u8fd1\u51e0\u5e74\u6a21\u578b\u84b8\u998f\u76f8\u5173\u7814\u7a76\u9886\u57df\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u3002\n    - \u63a2\u7d22\u6709\u6548\u7684\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\u3002\n    - \u63d0\u51fa\u9002\u5408\u538b\u7f29\u6392\u5e8f\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u89e3\u51b3\u5f02\u6784\u6559\u5e08\u6a21\u578b\u84b8\u998f\u95ee\u9898\u3002\n    - \u5728\u77e5\u8bc6\u84b8\u998f\u8bad\u7ec3\u65f6\u8003\u8651\u67b6\u6784\u8bbe\u8ba1\uff0c\u4f18\u5316\u8d44\u6e90 - \u6027\u80fd\u6743\u8861\u3002\n    - \u5728\u6a21\u578b\u538b\u7f29\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u4e2d\u5b9e\u73b0\u6027\u80fd\u63d0\u5347\u4e0e\u9884\u7b97\u7ea6\u675f\u7684\u5e73\u8861\u3002\n    - \u4e3a\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u63d0\u51fa\u65b0\u7684\u601d\u8def\u548c\u65b9\u6cd5\uff0c\u5982\u63d0\u51fa\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5**\uff1a\n    - \u65e9\u671f\uff1a\u84b8\u998f\u7f51\u7edc\u672b\u7aeflogits\uff0c\u5982\u76f8\u5173\u65b9\u6cd5[5, 15]\uff1b\u63d0\u53d6\u4e2d\u95f4\u5c42\u542b\u66f4\u4e30\u5bcc\u7a7a\u95f4\u4fe1\u606f\u7684\u7279\u5f81\uff0c\u5982FitNet[16]\u3001Attention Transfer (AT)[17]\u3002\n    - \u8fd1\u671f\uff1a\u63d0\u51fa\u7ed3\u6784\u77e5\u8bc6\uff0c\u5982Instance Relationship Graph (IRG)[19]\u3001Flow of Solution Procedure (FSP)[21]\uff1b\u65b0\u6846\u67b6\u5982\u4e92\u5b66\u6846\u67b6[22, 23]\u3001\u81ea\u84b8\u998f\u6846\u67b6[24, 25]\uff1b\u5143\u5b66\u4e60\u65b9\u6cd5\u7528\u4e8e\u8bbe\u8ba1\u6846\u67b6\uff0c\u5982Jang\u7b49[26]\u3001Liu\u7b49[27]\u3002\n    - \u9488\u5bf9\u6392\u5e8f\u95ee\u9898\uff1a\u5c06\u84b8\u998f\u8fc7\u7a0b\u6784\u5efa\u4e3a\u6392\u5e8f\u5339\u914d\u4efb\u52a1\uff0c\u76f4\u63a5\u8f6c\u79fb\u6392\u5e8f\u77e5\u8bc6\uff0c\u5982\u76f8\u5173\u7814\u7a76[5, 15, 25, 34, 41, 52]\u3002\n    - \u591a\u6559\u5e08\u6a21\u578b\uff1a\u91c7\u7528\u591a\u4e2a\u6559\u5e08\u6a21\u578b\uff0c\u7279\u522b\u662f\u5f02\u6784\u6559\u5e08\u6a21\u578b\uff0c\u878d\u5408\u4e92\u8865\u77e5\u8bc6\uff0c\u5982[8, 45, 51]\u3002\n - **\u6613\u5230\u96be\u5b66\u4e60\u65b9\u6cd5**\uff1a\u5728\u673a\u5668\u5b66\u4e60\u5404\u9886\u57df\u5e7f\u6cdb\u7814\u7a76\uff0c\u5e94\u7528\u4e8e\u77e5\u8bc6\u84b8\u998f\u63d0\u9ad8\u84b8\u998f\u6548\u7387\uff0c\u5982\u5728\u8ba1\u7b97\u673a\u89c6\u89c9[14, 39]\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406[52, 55]\u4e2d\uff0c[3, 14, 39]\u5229\u7528\u6559\u5e08\u4f18\u5316\u8def\u7ebf\u4e3a\u5b66\u751f\u5f62\u6210\u8bfe\u7a0b\uff0c[52]\u5728\u8bad\u7ec3\u4e2d\u9010\u6e10\u589e\u52a0\u7ec6\u7c92\u5ea6\u6587\u6863\u5bf9\u3002\n - **\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u65b9\u6cd5**\uff1a\n    - \u786e\u5b9a\u6ee4\u6ce2\u5668\u91cd\u8981\u6027\u51c6\u5219\uff1a\u5982\u57fa\u4e8e$L_1$ - norm[28]\u3001\u51e0\u4f55\u4e2d\u4f4d\u6570[29]\u3001rank[30]\u3001\u7279\u5b9a\u8861\u91cf\u6307\u6807[31, 32]\u3002\n    - \u8bad\u7ec3\u6dfb\u52a0\u7a00\u758f\u7ea6\u675f\uff1a\u5982Huang\u7b49[35]\u3001ThiNet[36]\u3002\n    - \u5b66\u4e60\u7a00\u758f\u5206\u914d\uff1a\u5982MorphNet[37]\u3001ECC[38]\u3001AMC[39]\u3001MetaPruning[41]\u3001Ning\u7b49[42]\u3002\n - **\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u65b9\u6cd5**\uff1a\u91cf\u5316\u65b9\u6cd5\uff08Zafrir\u7b49[2019]\u3001Shen\u7b49[2020]\u3001Zhang\u7b49[2020]\u3001Bai\u7b49[2021]\uff09\uff1b\u526a\u679d\u65b9\u6cd5\uff08Michel\u7b49[2019]\u3001Fan\u7b49[2019]\u3001Gordon\u7b49[2020]\u3001Hou\u7b49[2020]\uff09\uff1b\u6743\u91cd\u5171\u4eab\u6280\u672f\uff08Dehghani\u7b49[2018]\u3001Lan\u7b49[2019]\uff09\uff1b\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5\uff08Hinton\u7b49[2015]\u63d0\u51fa\u6700\u5c0f\u5316\u6559\u5e08\u548c\u5b66\u751f\u9884\u6d4b\u5206\u5e03\u7684KL - divergence\uff0cRomero\u7b49[2014]\u76f4\u63a5\u5339\u914d\u7279\u5f81\u6fc0\u6d3b\uff0cTian\u7b49[2019]\u63d0\u51fa\u5bf9\u6bd4\u84b8\u998f\u6846\u67b6\u7b49\uff09\u3002\n - **\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\uff08\u672c\u6587\u63d0\u51fa\uff09**\uff1a\u4ece\u8bcd\u5143\u7ea7\u3001\u8de8\u5ea6\u7ea7\u548c\u6837\u672c\u7ea7\u4e09\u4e2a\u8bed\u4e49\u7c92\u5ea6\u63d0\u53d6\u7ed3\u6784\u5173\u7cfb\uff08\u6210\u5bf9\u4ea4\u4e92\u548c\u4e09\u5143\u51e0\u4f55\u89d2\u5ea6\uff09\u4f5c\u4e3a\u77e5\u8bc6\uff0c\u5206\u5c42\u84b8\u998f\u7ed9\u5b66\u751f\u6a21\u578b\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\n    - \u5728\u63a8\u8350\u7cfb\u7edf\u77e5\u8bc6\u84b8\u998f\u7814\u7a76\u4e2d\uff0c\u7ed9\u5b9a\u7528\u6237\u548c\u9879\u76ee\u96c6\uff0c\u57fa\u4e8e\u9690\u5f0f\u7528\u6237 - \u9879\u76ee\u4ea4\u4e92\u5386\u53f2\u5b66\u4e60\u63a8\u8350\u6a21\u578b\uff0c\u76ee\u6807\u662f\u5c06\u591a\u4e2a\u6559\u5e08\u6a21\u578b\u538b\u7f29\u4e3a\u8f7b\u91cf\u7ea7\u5b66\u751f\u6a21\u578b\uff0c\u9009\u62e9\u516d\u79cd\u4ee3\u8868\u6027\u63a8\u8350\u6a21\u578b\u7c7b\u578b\u4f5c\u4e3a\u6559\u5e08\u6a21\u578b\uff08MF\u3001ML\u3001DNN\u3001GNN\u3001AE\u3001IAE\uff09\u3002\n    - \u5728\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u7814\u7a76\u4e2d\uff0c\u9488\u5bf9\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u63d0\u51fa\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\uff0c\u6784\u5efa\u8bcd\u5143\u3001\u8de8\u5ea6\u3001\u6837\u672c\u4e09\u79cd\u7c92\u5ea6\u8868\u793a\uff0c\u63d0\u53d6\u7ed3\u6784\u5173\u7cfb\u4f5c\u4e3a\u77e5\u8bc6\u8fdb\u884c\u5206\u5c42\u84b8\u998f\u3002\n - **\u7ed3\u679c**\uff1a\n    - \u77e5\u8bc6\u84b8\u998f\u65b9\u9762\uff0c\u591a\u4e2a\u6559\u5e08\u6a21\u578b\u7279\u522b\u662f\u5f02\u6784\u6559\u5e08\u6a21\u578b\u5728\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\u4e0a\u6709\u6548\uff1b\u6392\u5e8f\u5339\u914d\u65b9\u6cd5\u5728\u6392\u5e8f\u5e94\u7528\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u80fd\u5e94\u7528\u4e8e\u5f02\u6784\u6a21\u578b\u95f4\u77e5\u8bc6\u8f6c\u79fb\u3002\n    - \u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u65b9\u9762\uff0c\u5404\u79cd\u65b9\u6cd5\u5728\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\u4e0a\u6709\u6210\u679c\uff0c\u4f46\u5927\u591a\u672a\u6709\u6548\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\n    - \u8bed\u8a00\u6a21\u578b\u538b\u7f29\u65b9\u9762\uff0c\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u5404\u6709\u6210\u6548\uff0c\u672c\u6587\u63d0\u51fa\u7684\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\u671f\u671b\u4e3a\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u5e26\u6765\u65b0\u65b9\u6cd5\uff0c\u4f46\u672a\u63d0\u53ca\u5177\u4f53\u5b9e\u9a8c\u9a8c\u8bc1\u7ed3\u679c\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u73b0\u6709\u7684\u9488\u5bf9\u63a8\u8350\u7cfb\u7edf\u7684\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5\u5927\u591a\u805a\u7126\u4e8e\u4ece\u540c\u6784\u6559\u5e08\u6a21\u578b\u5230\u5b66\u751f\u6a21\u578b\u7684\u84b8\u998f\uff0c\u5f02\u6784\u6559\u5e08\u6a21\u578b\u7684\u84b8\u998f\u7814\u7a76\u4e0d\u8db3\u3002\n    - \u4e4b\u524d\u7ed3\u5408\u6613\u5230\u96be\u5b66\u4e60\u7684\u77e5\u8bc6\u84b8\u998f\u5de5\u4f5c\u591a\u96c6\u4e2d\u5728\u5206\u7c7b\u9886\u57df\u6216\u4f9d\u8d56\u7279\u5b9a\u9886\u57df\u7279\u5f81\uff0c\u96be\u4ee5\u5e94\u7528\u5230\u6392\u5e8f\u95ee\u9898\u548c\u63a8\u8350\u7cfb\u7edf\u3002\n    - \u51e0\u4e4e\u6240\u6709\u5148\u524d\u77e5\u8bc6\u84b8\u998f\u5de5\u4f5c\u5728\u8bad\u7ec3\u65f6\u6ca1\u6709\u8003\u8651\u67b6\u6784\u8bbe\u8ba1\uff0c\u96be\u4ee5\u5b9e\u73b0\u6700\u4f18\u7684\u8d44\u6e90 - \u6027\u80fd\u6743\u8861\u3002\n    - \u6a21\u578b\u538b\u7f29\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u4e2d\uff0c\u5927\u591a\u65b9\u6cd5\u5728\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\u65f6\u6ca1\u6709\u989d\u5916\u64cd\u4f5c\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u5f00\u5c55\u9488\u5bf9\u5f02\u6784\u6559\u5e08\u6a21\u578b\u7684\u84b8\u998f\u7814\u7a76\uff0c\u627e\u5230\u9002\u5408\u538b\u7f29\u6392\u5e8f\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u8003\u8651\u5b66\u751f\u5b66\u4e60\u72b6\u6001\u84b8\u998f\u51fa\u4ece\u6613\u5230\u96be\u7684\u6392\u5e8f\u77e5\u8bc6\u5e8f\u5217\u3002\n    - \u5728\u77e5\u8bc6\u84b8\u998f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8003\u8651\u67b6\u6784\u8bbe\u8ba1\uff0c\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u8d44\u6e90 - \u6027\u80fd\u6743\u8861\u3002\n    - \u5728\u6a21\u578b\u538b\u7f29\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\u4e2d\uff0c\u63a2\u7d22\u5728\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\u7684\u540c\u65f6\u63d0\u5347\u6a21\u578b\u6027\u80fd\u7684\u65b9\u6cd5\u3002\n    - \u8fdb\u4e00\u6b65\u9a8c\u8bc1\u548c\u4f18\u5316\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\u5728\u8bed\u8a00\u6a21\u578b\u538b\u7f29\u4e2d\u7684\u5e94\u7528 \u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u8fd1\u51e0\u5e74\u6a21\u578b\u84b8\u998f\u76f8\u5173\u7814\u7a76\u9886\u57df\u7684\u6280\u672f\u6846\u67b6\u4e0e\u65b9\u6cd5\u8bba\u5c55\u5f00\uff0c\u6d89\u53ca\u6709\u6548\u7684\u77e5\u8bc6\u8f6c\u79fb\u673a\u5236\u3001\u4e0d\u540c\u5b66\u4e60\u65b9\u6cd5\u4ee5\u53ca\u5f53\u524d\u7814\u7a76\u7684\u4e0d\u8db3\u7b49\u5185\u5bb9\uff0c\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u4e2d\u7684\u201c\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\u201d\u76f8\u5173\uff0c\u63a2\u8ba8\u5982\u4f55\u901a\u8fc7\u77e5\u8bc6\u84b8\u998f\u7b49\u65b9\u6cd5\u4f18\u5316\u6a21\u578b\uff0c\u63d0\u5347\u5b66\u751f\u6a21\u578b\u6027\u80fd\uff0c\u5177\u6709\u4e00\u5b9a\u7684\u53ef\u62d3\u5c55\u6027\uff0c\u4e5f\u4e3a\u540e\u7eed\u7814\u7a76\u63d0\u4f9b\u4e86\u53cd\u5411\u63a8\u7406\u7684\u65b9\u5411\u3002\u5177\u4f53\u603b\u7ed3\u5982\u4e0b\uff1a\n1. **\u77e5\u8bc6\u84b8\u998f\uff08Knowledge Distillation\uff09**\n    - **\u57fa\u672c\u6982\u5ff5\u4e0e\u5e94\u7528**\uff1a\u901a\u8fc7\u5e08\u751f\u6846\u67b6\u5c06\u6559\u5e08\u6a21\u578b\u77e5\u8bc6\u8f6c\u79fb\u5230\u5b66\u751f\u6a21\u578b\uff0c\u7528\u4e8e\u6a21\u578b\u538b\u7f29\u548c\u77e5\u8bc6\u8f6c\u79fb\u3002\n    - **\u63a2\u7d22\u7684\u77e5\u8bc6\u7c7b\u578b**\uff1a\u4ece\u65e9\u671f\u84b8\u998f\u7f51\u7edc\u672b\u7aeflogits\uff0c\u5230\u4e2d\u95f4\u5c42\u5bcc\u542b\u7a7a\u95f4\u4fe1\u606f\u7684\u7279\u5f81\uff0c\u518d\u5230\u7ed3\u6784\u77e5\u8bc6\uff08\u5982\u5b9e\u4f8b\u7279\u5f81\u5173\u7cfb\u548c\u7279\u5f81\u7a7a\u95f4\u53d8\u6362\uff09\u3002\n    - **\u65b0\u6846\u67b6\u63a2\u7d22**\uff1a\u5982\u76f8\u4e92\u5b66\u4e60\u6846\u67b6\u3001\u81ea\u84b8\u998f\u6846\u67b6\uff0c\u91c7\u7528\u5143\u5b66\u4e60\u65b9\u6cd5\u8bbe\u8ba1\u65b0\u6846\u67b6\uff0c\u4f46\u591a\u6570\u5148\u524d\u5de5\u4f5c\u5728\u56fa\u5b9a\u5b66\u751f\u7f51\u7edc\u4e0a\u8fdb\u884c\u4f18\u5316\u3002\n2. **\u7ed3\u6784\u5316\u7a00\u758f\u526a\u679d\uff08Structured sparsity pruning\uff09**\n    - **\u7279\u70b9\u4e0e\u5e94\u7528**\uff1a\u76f4\u63a5\u79fb\u9664\u5197\u4f59\u795e\u7ecf\u5143\u548c\u901a\u9053\uff0c\u786c\u4ef6\u53cb\u597d\uff0c\u8fd1\u5e74\u5e7f\u6cdb\u5e94\u7528\u3002\n    - **\u4e0d\u540c\u65b9\u6cd5**\uff1a\u4e00\u4e9b\u5de5\u4f5c\u5229\u7528\u6ee4\u6ce2\u5668\u91cd\u8981\u6027\u51c6\u5219\u526a\u679d\uff0c\u4e00\u4e9b\u5de5\u4f5c\u6dfb\u52a0\u7a00\u758f\u7ea6\u675f\u8bad\u7ec3\u7f51\u7edc\u540e\u79fb\u9664\u7a00\u758f\u90e8\u5206\uff0c\u8fd1\u5e74\u90e8\u5206\u5de5\u4f5c\u5b66\u4e60\u526a\u679d\u7684\u7a00\u758f\u5206\u914d\u4ee5\u6ee1\u8db3\u9884\u7b97\u7ea6\u675f\uff0c\u4f46\u5148\u524d\u5de5\u4f5c\u672a\u91c7\u7528\u989d\u5916\u64cd\u4f5c\u63d0\u5347\u6a21\u578b\u6027\u80fd\u3002\n    - **\u7ed3\u5408\u77e5\u8bc6\u84b8\u998f\u4e0e\u6a21\u578b\u538b\u7f29**\uff1a\u90e8\u5206\u5de5\u4f5c\u7ed3\u5408\u4e24\u8005\u83b7\u5f97\u7d27\u51d1\u9ad8\u7cbe\u5ea6\u6a21\u578b\uff0c\u4f46\u5b58\u5728\u5c06\u4e24\u8005\u89c6\u4e3a\u72ec\u7acb\u9636\u6bb5\u6216\u7b80\u5355\u5408\u5e76\u635f\u5931\u51fd\u6570\u7684\u95ee\u9898\uff0c\u7f3a\u4e4f\u6846\u67b6\u7ea7\u91cd\u65b0\u8bbe\u8ba1\u3002\n3. **\u8bed\u8a00\u6a21\u578b\u538b\u7f29\uff08Language Model Compression\uff09**\n    - **\u65b9\u6cd5**\uff1a\u91cf\u5316\u65b9\u6cd5\u964d\u4f4e\u6a21\u578b\u53c2\u6570\u7cbe\u5ea6\uff0c\u526a\u679d\u65b9\u6cd5\u79fb\u9664\u4e0d\u91cd\u8981\u7684\u6743\u91cd\u6216\u7ed3\u6784\uff0c\u6743\u91cd\u5171\u4eab\u6280\u672f\u51cf\u5c11\u53c2\u6570\u3002\n    - **\u77e5\u8bc6\u84b8\u998f\u5728\u5176\u4e2d\u7684\u7814\u7a76**\uff1a\u63d0\u51fa\u591a\u79cd\u76ee\u6807\u548c\u65b9\u6cd5\uff0c\u672c\u6587\u63d0\u51fa\u591a\u7c92\u5ea6\u7ed3\u6784\u77e5\u8bc6\u84b8\u998f\uff08MGSKD\uff09\u6846\u67b6\uff0c\u4ece\u4e09\u4e2a\u8bed\u4e49\u7c92\u5ea6\uff08\u8bcd\u5143\u7ea7\u3001\u8de8\u5ea6\u7ea7\u548c\u6837\u672c\u7ea7\uff09\u51c6\u5907\u77e5\u8bc6\uff0c\u4f5c\u4e3a\u8868\u793a\u4e4b\u95f4\u7684\u7ed3\u6784\u5173\u7cfb\u8fdb\u884c\u5206\u5c42\u84b8\u998f\u3002 \n4. **\u6a21\u578b\u84b8\u998f\u5728\u63a8\u8350\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528\uff08Knowledge Distillation for Ranking\uff09**\n    - **\u65e9\u671f\u65b9\u6cd5\u5c40\u9650**\uff1a\u8bb8\u591a\u7814\u7a76\u8f6c\u79fb\u7528\u6237-\u9879\u76ee\u5bf9\u7684\u9010\u70b9\u91cd\u8981\u6027\uff0c\u4f46\u65e0\u6cd5\u540c\u65f6\u8003\u8651\u591a\u4e2a\u9879\u76ee\u5173\u7cfb\uff0c\u6392\u540d\u6027\u80fd\u6709\u9650\u3002\n    - **\u8fd1\u671f\u65b9\u6cd5**\uff1a\u5c06\u84b8\u998f\u8fc7\u7a0b\u5236\u5b9a\u4e3a\u6392\u540d\u5339\u914d\u4efb\u52a1\uff0c\u5229\u7528\u6559\u5e08\u6392\u540d\u987a\u5e8f\u4f5c\u4e3a\u76d1\u7763\uff0c\u8bad\u7ec3\u5b66\u751f\u4fdd\u7559\u6559\u5e08\u6392\u5217\uff0c\u5728\u591a\u79cd\u6392\u540d\u5e94\u7528\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u4e14\u53ef\u7075\u6d3b\u5e94\u7528\u4e8e\u5f02\u6784\u6a21\u578b\u95f4\u77e5\u8bc6\u8f6c\u79fb\u3002 \n5. **\u7531\u6613\u5230\u96be\u5b66\u4e60\uff08Easy-to-hard Learning\uff09**\n    - **\u7075\u611f\u4e0e\u5e94\u7528**\uff1a\u53d7\u4eba\u7c7b\u5b66\u4e60\u8fc7\u7a0b\u542f\u53d1\uff0c\u5728\u673a\u5668\u5b66\u4e60\u5404\u9886\u57df\u5e7f\u6cdb\u7814\u7a76\uff0c\u7528\u4e8e\u907f\u514d\u975e\u51f8\u76ee\u6807\u51fd\u6570\u4f18\u5316\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff0c\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b\u3002\n    - **\u5728\u77e5\u8bc6\u84b8\u998f\u4e2d\u7684\u5e94\u7528**\uff1a\u8bfe\u7a0b\u5b66\u4e60\u6309\u96be\u5ea6\u987a\u5e8f\u7eb3\u5165\u6570\u636e\u6837\u672c\uff0c\u81ea\u5b9a\u6b65\u957f\u5b66\u4e60\u6839\u636e\u8bad\u7ec3\u635f\u5931\u6216\u9a8c\u8bc1\u96c6\u6027\u80fd\u52a8\u6001\u8c03\u6574\u8bfe\u7a0b\uff0c\u5df2\u5e94\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u77e5\u8bc6\u84b8\u998f\u4e2d\u3002 \n6. **\u7814\u7a76\u73b0\u72b6\u4e0e\u4e0d\u8db3**\n    - **\u73b0\u6709\u63a8\u8350\u7cfb\u7edf\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5\u5c40\u9650**\uff1a\u4e3b\u8981\u96c6\u4e2d\u5728\u540c\u6784\u6559\u5e08\u5230\u5b66\u751f\u6a21\u578b\u7684\u84b8\u998f\uff0c\u5f02\u6784\u6559\u5e08\u84b8\u998f\u7814\u7a76\u4e0d\u8db3\u3002\n    - **\u7ed3\u5408\u7531\u6613\u5230\u96be\u5b66\u4e60\u7684\u77e5\u8bc6\u84b8\u998f\u5de5\u4f5c\u5c40\u9650**\uff1a\u4e3b\u8981\u96c6\u4e2d\u5728\u5206\u7c7b\u6216\u4f9d\u8d56\u9886\u57df\u7279\u5b9a\u7279\u5f81\uff0c\u96be\u4ee5\u5e94\u7528\u4e8e\u6392\u540d\u95ee\u9898\u548c\u63a8\u8350\u7cfb\u7edf\u3002\u672c\u6587\u5de5\u4f5c\u63d0\u4f9b\u9488\u5bf9\u6392\u540d\u6a21\u578b\u538b\u7f29\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8003\u8651\u5b66\u751f\u5b66\u4e60\u72b6\u6001\u84b8\u998f\u7531\u6613\u5230\u96be\u7684\u6392\u540d\u77e5\u8bc6\u5e8f\u5217 \u3002  ", "dreams_personality_context": "\u8fd9\u6bb5\u5185\u5bb9\u5e76\u6ca1\u6709\u76f4\u63a5\u4f53\u73b0\u4eba\u7269\u6027\u683c\u76f8\u5173\u4fe1\u606f\u3002\n\n\u4ece\u7814\u7a76\u6b65\u9aa4\u89d2\u5ea6\u6765\u770b\uff0c\u5728\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u4e0e\u9884\u671f\u7ed3\u679c\u56e0\u679c\u6027\u3001\u53ef\u62d3\u5c55\u6027\u53ca\u53cd\u5411\u63a8\u7406\u6f5c\u529b\u65b9\u9762\uff0c\u8fd9\u4e9b\u7814\u7a76\u5448\u73b0\u51fa\u4e0d\u65ad\u63a2\u7d22\u65b0\u65b9\u6cd5\u3001\u65b0\u6846\u67b6\uff0c\u6316\u6398\u77e5\u8bc6\u8f6c\u79fb\u548c\u6a21\u578b\u4f18\u5316\u6f5c\u529b\u7684\u7279\u70b9\uff0c\u53cd\u6620\u51fa\u7814\u7a76\u8005\u5177\u6709\u52c7\u4e8e\u521b\u65b0\u3001\u79ef\u6781\u63a2\u7d22\u672a\u77e5\u3001\u8ffd\u6c42\u4e25\u8c28\u79d1\u5b66\u7684\u6001\u5ea6\u503e\u5411\uff0c\u4f46\u8fd9\u5e76\u975e\u76f4\u63a5\u7b49\u540c\u4e8e\u4eba\u7269\u6027\u683c\u63cf\u8ff0\u3002\u6240\u4ee5\u4ec5\u6839\u636e\u7ed9\u5b9a\u4fe1\u606f\uff0c\u65e0\u6cd5\u603b\u7ed3\u51fa\u4eba\u7269\u6027\u683c\u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["0e29307e-b399-4da7-a98c-2b2e81a661e5"], "metadata": {}}}, "analysis_store/metadata": {"0e29307e-b399-4da7-a98c-2b2e81a661e5": {"analysis_hash": "", "ref_analysis_id": ""}}}