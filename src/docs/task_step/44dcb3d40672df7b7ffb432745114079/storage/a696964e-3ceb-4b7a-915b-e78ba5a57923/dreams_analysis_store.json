{"analysis_store/data": {"98fb7caa-0848-45de-a6af-81bbde972c84": {"__data__": {"id_": "98fb7caa-0848-45de-a6af-81bbde972c84", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u7684\u63a5\u8fd1\u5ea6\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3001\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u9886\u57df\u591a\u5143**\uff1a\u6d89\u53ca\u793e\u4ea4\u5a92\u4f53\u3001\u7535\u89c6\u7535\u5f71\u3001\u793e\u4f1a\u5b66\u7b49\u591a\u4e2a\u9886\u57df\u4e2d\u4e0e\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u76f8\u5173\u7684\u7814\u7a76\u3002\n2. **\u5f3a\u8c03\u7406\u8bba\u5e94\u7528\u4e0e\u4ea4\u53c9**\uff1a\u6ce8\u91cd\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u4e0d\u540c\u5a92\u4ecb\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\uff0c\u4ee5\u53ca\u8be5\u7406\u8bba\u4e0e\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u7814\u7a76\u3002\n3. **\u5173\u6ce8\u5173\u8054\u5173\u7cfb**\uff1a\u7a81\u51fa\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u7231\u60c5\u8868\u73b0\uff0c\u4ee5\u53ca\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u3001\u8bed\u4e49\u4fe1\u606f\u7b49\u65b9\u9762\u7684\u7d27\u5bc6\u8054\u7cfb \u3002  ", "scene_monologue_context": "\u4ece\u8fd9\u6bb5\u5bf9\u8bdd\u4e2d\uff0c\u672a\u660e\u786e\u63d0\u53ca\u6765\u8bbf\u8005\u4eca\u5929\u5177\u4f53\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\u6a21\u578b\u84b8\u998f\u6240\u9700\u8bbe\u8ba1\u7684\u590d\u6742\u673a\u5236\uff0c\u4ee5\u53ca\u591a\u7bc7\u5173\u4e8e\u6a21\u578b\u878d\u5408\u3001\u77e5\u8bc6\u84b8\u998f\u3001\u8054\u90a6\u5b66\u4e60\u7b49\u76f8\u5173\u5b66\u672f\u6587\u732e\u7684\u5185\u5bb9\u5c55\u5f00\u3002 \n\n\u5047\u8bbe\u6765\u8bbf\u8005\u662f\u4e00\u4f4d\u4e13\u6ce8\u4e8e\u6a21\u578b\u7814\u7a76\u7684\u5b66\u8005\uff0c\u57fa\u4e8e\u5bf9\u8bdd\u5185\u5bb9\uff0c\u7f16\u5199\u7684\u72ec\u767d\u4fe1\u606f\u5982\u4e0b\uff1a \n\n### \u7b2c\u4e00\u4eba\u79f0\u72ec\u767d\u4fe1\u606f \n\u4eca\u5929\uff0c\u6211\u4e00\u5934\u624e\u8fdb\u4e86\u8ba1\u7b97\u6a21\u578b\u7684\u7814\u7a76\u6d77\u6d0b\u91cc\u3002\u4e00\u76f4\u5728\u6df1\u5165\u63a2\u8ba8\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u548c\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\uff0c\u8fd9\u53ef\u5173\u7cfb\u5230\u6a21\u578b\u80fd\u5426\u5728\u5404\u79cd\u590d\u6742\u73af\u5883\u4e2d\u7a33\u5b9a\u53d1\u6325\u4f5c\u7528\u3002 \n\n\u5c24\u5176\u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u8fd9\u4e2a\u524d\u6cbf\u9886\u57df\uff0c\u4e3a\u4e86\u8ba9\u6a21\u578b\u84b8\u998f\u6709\u6548\u878d\u5408\u4e0d\u540c\u6a21\u6001\u77e5\u8bc6\uff0c\u6211\u7ede\u5c3d\u8111\u6c41\u601d\u8003\u53ef\u80fd\u9700\u8981\u8bbe\u8ba1\u7684\u590d\u6742\u673a\u5236\u3002 \n\n\u9605\u8bfb\u4e86\u5927\u91cf\u76f8\u5173\u6587\u732e\uff0c\u50cf\u90a3\u7bc7\u5173\u4e8e\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u7684\u8bba\u6587\uff0c\u63d0\u51fa\u4e86CreamFL\u8fd9\u4e2a\u65b0\u9896\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u8868\u793a\u5c42\u7684\u96c6\u6210\u77e5\u8bc6\u8f6c\u79fb\uff0c\u80fd\u8ba9\u5f02\u6784\u5ba2\u6237\u7aef\u7684\u5355\u6a21\u6001\u548c\u591a\u6a21\u6001\u6570\u636e\u5171\u540c\u5b66\u4e60\u66f4\u5927\u7684\u5168\u5c40\u6a21\u578b\uff0c\u8fd8\u8bbe\u8ba1\u4e86\u72ec\u7279\u7684\u7b56\u7565\u6765\u89e3\u51b3\u6a21\u6001\u5dee\u8ddd\u548c\u4efb\u52a1\u5dee\u8ddd\u5e26\u6765\u7684\u6a21\u578b\u6f02\u79fb\u95ee\u9898\uff0c\u771f\u7684\u8ba9\u6211\u6df1\u53d7\u542f\u53d1\u3002 \n\n\u8fd8\u6709\u5173\u4e8e\u6a21\u578b\u878d\u5408\u548c\u77e5\u8bc6\u84b8\u998f\u7684\u6587\u732e\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5404\u79cd\u6a21\u578b\u878d\u5408\u65b9\u6cd5\uff0c\u4ee5\u53ca\u77e5\u8bc6\u84b8\u998f\u5728\u4e0d\u540c\u9886\u57df\u7684\u5e94\u7528\u548c\u4e0e\u4f20\u7edf\u65b9\u6cd5\u7684\u533a\u522b\u3002 \n\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4e0d\u65ad\u601d\u8003\u8fd9\u4e9b\u7406\u8bba\u548c\u65b9\u6cd5\u5982\u4f55\u80fd\u4e3a\u6211\u7684\u7814\u7a76\u5e26\u6765\u65b0\u7684\u7a81\u7834\uff0c\u5982\u4f55\u5c06\u5b83\u4eec\u5e94\u7528\u5230\u5b9e\u9645\u95ee\u9898\u4e2d\uff0c\u611f\u89c9\u81ea\u5df1\u5728\u77e5\u8bc6\u7684\u9053\u8def\u4e0a\u53c8\u8fc8\u8fdb\u4e86\u4e00\u6b65\uff0c\u4f46\u4e5f\u6df1\u77e5\u524d\u65b9\u8fd8\u6709\u66f4\u591a\u7684\u96be\u9898\u7b49\u5f85\u6211\u53bb\u653b\u514b \u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "a696964e-3ceb-4b7a-915b-e78ba5a57923:\u300c\u63a2\u8ba8\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u300d\na696964e-3ceb-4b7a-915b-e78ba5a57923:\u300c\u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\uff0c\u4e3a\u4e86\u8ba9\u6a21\u578b\u84b8\u998f\u80fd\u6709\u6548\u878d\u5408\u4e0d\u540c\u6a21\u6001\u77e5\u8bc6\uff0c\u53ef\u80fd\u9700\u8981\u8bbe\u8ba1\u54ea\u4e9b\u590d\u6742\u673a\u5236\uff1f  \u300d\na696964e-3ceb-4b7a-915b-e78ba5a57923:\u300cref_ids: 454848340878587076, chunk_ids: 0, Score: 0.5117, Text: # MULTIMODAL FEDERATED LEARNING VIA CON -TRASTIVE REPRESENTATION ENSEMBLE\nQiying $\\\\mathbf{Y_{u}}^{1,4}$ , Yang ${\\\\bf L i u^{1,4*}}$ \u2217, Yimu Wang 2 , Ke $\\\\mathbf{X}\\\\mathbf{u}^{3}$ , Jingjing ${\\\\mathrm{Li}}{\\\\bf u}^{1*}$  \n\n1 Institute for AI Industry Research, Tsinghua University   \n2 University of Waterloo 3 Carnegie Mellon University   \n4 Shanghai Artificial Intelligence Laboratory   \n, {liuy03,jjliu }@air.tsinghua.edu.cn\n\n# A BSTRACT\nWith the increasing amount of multimedia data on modern mobile systems and IoT infrastructures, harnessing these rich multimodal data without breaching user privacy becomes a critical issue. Federated learning (FL) serves as a privacyconscious alternative to centralized machine learning. However, existing FL methods extended to multimodal data all rely on model aggregation on single modality level, which restrains the server and clients to have identical model architecture for each modality. This limits the global model in terms of both model complexity and data capacity, let alone task diversity. In this work, we propose Contrastive Representation Ensemble and Aggregation for Multimodal FL (CreamFL) , a multimodal federated learning framework that enables training larger server models from clients with heterogeneous model architectures and data modalities, while only communicating knowledge on public dataset. To achieve better multimodal representation fusion, we design a global-local cross-modal ensemble strategy to aggregate client representations. To mitigate local model drift caused by two unprecedented heterogeneous factors stemming from multimodal discrepancy ( modality $g a p$ and task gap ), we further propose inter-modal and intra-modal contrasts to regularize local training, which complements information of the absent modality for uni-modal clients and regularizes local clients to head towards global consensus. Thorough evaluations and ablation studies on image-text retrieval and VQA tasks showcase the superiority of CreamFL over state-of-the-art FL methods.\n\n# 1 I NTRODUCTION\nFederated Learning (FL) (Yang et al., 2019; Li et al., 2020; Kairouz et al., 2021; Zhao et al., 2018), a decentralized training paradigm that allows multiple parties to collaboratively train models without compromising privacy, has emerged as an alternative to centralized machine learning. Most existing FL methods only consider scenarios where the private data from clients belong to the same modality (e.g. , image or text). However, with the fast development of mobile technology and IoT infrastructures (Brunete et al., 2021) that harness data from different modalities ( e.g. sensory, visual, audio) with privacy constraints, there is an increasing need for advanced FL algorithms to allow the training of larger and capable model that can absorb heterogeneous private data (across modalities) at edge and simultaneously handle diverse multimodal tasks (Gan et al., 2022; Chen et al., 2020b).  \n\nIn the past, there has been some early attempts at applying FL to multimodal tasks (Xiong et al., 2022; Zhao et al., 2022; Liu et al., 2020), which all adopt the FedAvg (McMahan et al., 2017) framework by using homogeneous models for each modality. In practice, however, edge devices may have limited computational and memory resources, restraining the capacity of the global model to smaller and lighter scales. Moreover, naive aggregation of modality-dependent models is inadequate in addressing the model drift (Karimireddy et al., 2020) problem between clients.  \n\nRecently, a few algorithms (Cho et al., 2022; Cheng et al., 2021) have been proposed to enable larger server model training. For example, FedET (Cho et al., 2022) proposes an ensemble Knowledge Distillation (KD) based framework to enable a large model at server and relatively small yet deployable models on edge devices. However, they transfer and ensemble knowledge from a bag of client teachers through logit , which is difficult to extend to multimodal setting. Most multimodal tasks (e.g., image/video captioning (Vinyals et al., 2015)) typically operate on fused cross-modality representation level, whereas existing strategies for aggregating logits are no longer applicable.  \n\n  \nFigure 1: Illustration of multimodal FL. A large model at server supports multimodal tasks with public data, and heterogeneous clients at edge handle uni- and multi-modal tasks with private data.  \n\nIn this paper, we design a novel KD-based multimodal federated learning framework, CreamFL (Contrastive Representation Ensemble and Aggregation for Multimodal $F L$ ), which simultaneously leverages uni- and multi-modal data across heterogeneous clients to learn a larger global model, through representation-level ensemble knowledge transfer. The global model learns from clients via communicating private knowledge on public dataset from diverse client networks without revealing private models and data. CreamFL transmits low-dimensional representations of public data between server and clients, which are usually contextual and applicable to more complex tasks than logits. To effectively aggregate representations transmitted from heterogeneous clients, we propose a global-local cross-modal contrastive aggregation strategy, to 1) filter out drifting outliers by contrasting local representations to global ones; 2) pick out outstanding candidates that better match their paired partners, by contrasting to representations from another modality.  \n\nMoreover, FL with multimodal data brings about two new types of model gap: modality gap and task gap . Uni-modal clients trained under a single modality ( e.g. image) have never seen data from other modalities ( e.g. , text) in the training procedure, therefore lacking the capability of recognizing another modality. We call this mutual incompatibility between clients the \u2018modality gap\u2019. Task gap refers to the fact that different clients may be trained for diverse tasks, e.g. , uni-modal clients for image classification task and multimodal clients for image-text retrieval task. Both gaps cause unprecedented model drift (Karimireddy et al., 2020) problems. To tackle this, we introduce two novel contrastive objectives to regularize local training. An inter-modal contrastive objective is designed to mitigate the modality gap, by performing cross-modality contrasts using public data in the local training phase, which complements for the information of the absent modality in unimodal clients. To bridge the task gap, an intra-modal contrastive objective is proposed to contrast local representations to their corresponding global ones in each modality, regularizing models to head towards the global consensus (Li & Wang, 2019).  \n\nIn summary, 1) CreamFL is the first KD-based multimodal FL framework to support heterogeneous modality and model architectures between server and clients, while only communicating private knowledge on public dataset without revealing private models and data. Experiments show that CreamFL outperforms other FL systems in multimodal setting in terms of both model performance and communication cost; 2) CreamFL ensembles representations instead of logits for knowledge transfer between clients and server, with a novel global-local cross-modal aggregation strategy for better representation learning and inter/intra-modal contrastive objectives to address model drift; 3) Our framework enables larger model training at server that absorbs modality-diverse knowledge from resource-constrained clients, which is required for complex cross-modal tasks.\u300d\na696964e-3ceb-4b7a-915b-e78ba5a57923:\u300cref_ids: 454845793061599624, chunk_ids: 15, Score: 0.4414, Text: # 2 RELATED WORK\nModel Fusion The integration of capabilities from diverse models has been a long-standing objective, with existing approaches mainly falling into two categories. Firstly, the traditional technique of model ensemble combines the outputs of multiple models to enhance overall system performance (Littlestone & Warmuth, 1994; Sagi & Rokach, 2018). Note that this technique doesn\u2019t involve the explicit merging of multiple models into a new one. Common methods for model ensemble typically employ weighted averaging (Littlestone & Warmuth, 1994) or majority voting (Monteith et al., 2011) to consolidate predictions from various models. Recently, Jiang et al. (2023) introduced an ensemble framework designed to leverage the diverse strengths of multiple open-source LLMs. This framework first employs a pairwise comparison method to detect subtle distinctions among candidate outputs. Then, it combines the top-ranked candidates to produce an enhanced output, capitalizing on their strengths while mitigating their weaknesses.  \n\nSecondly, weight merging presents another approach that facilitates model fusion at the parameter level. Gupta et al. (2020) and Wortsman et al. (2022) merged weights from models with identical structures, obtained through different strategies or configurations, to achieve improved overall performance. Similarly, Cha et al. (2021), Rame et al. (2022), and Arpit et al. (2022) explored weighted averaging of models derived from different configurations to enhance out-of-distribution generalization. Furthermore, Jin et al. (2022) merged models designed for specific domains or tasks to create a generalist capable of addressing all domains or tasks. Going beyond parameter merging of entire models, Wang et al. (2022b), Huang et al. (2023), and Zhang et al. (2023) applied linear mathematical operations to adapter parameters to achieve superior generalization performance.  \n\nIn a nutshell, while model ensemble requires the parallel deployment of multiple models, weight merging is generally limited to models with identical architectures. In contrast, the approach proposed in this paper supports the fusion of multiple LLMs with diverse architectures by explicitly transferring their knowledge and capabilities to a target LLM.  \n\nKnowledge Distillation Knowledge distillation (Hinton et al., 2015), initially proposed for model compression, involves training a student model under the guidance of one or more teacher models. In the NLP community, knowledge distillation has been widely applied to text classification tasks. These applications include training the student model to replicate the teacher\u2019s output distribution (Sanh et al., 2019; Turc et al., 2019), as well as features (Sun et al., 2019; Jiao et al., 2020) and relations (Wang et al., 2020) derived from intermediate layers of the teacher model. In the realm of text generation, the conventional approach focuses on minimizing the KL divergence between the student and teacher generation distributions. This is achieved by using the teacher\u2019s probability distributions at each time step as supervision (Khanuja et al., 2021; Gu et al., 2023; Agarwal et al., 2023) or by directly training on the teacher\u2019s generated texts (Peng et al., 2023; Xu et al., 2023).  \n\nWhile our method shares a framework similar to multi-teacher knowledge distillation, there are two significant distinctions. First, in traditional knowledge distillation, the student models are typically constrained to be smaller in size than the teachers. In our scenario, however, there are no limitations on the size of the target model. Second, traditional knowledge distillation often results in the student models lagging behind the teachers in performance after distillation. In contrast, we anticipate that after the fusion, the target model will surpass any of the source models in performance.\n\n# 3 KNOWLEDGE FUSION OF LLM S\nThe primary objective of LLMs fusion is to externalize the collective knowledge embedded within multiple source LLMs and integrate their capabilities into a target LLM. Given $K$ source LLMs $\\\\{\\\\mathcal{M}_{j}^{s}\\\\}_{j=1}^{K}$ with varying architectures, each having undergone individual pre-training or fine-tuning on distinct datasets, the key idea behind our approach is to initially stimulate LLMs to manifest their inherent knowledge by challenging them to predict the next token. The probabilistic distributions of these predictions are thoroughly assessed, and the most accurate predictions are utilized to continually train the target LLM the following sections, we start with a brief introduction to the preliminaries, followed by a detailed ${\\\\mathcal{M}}^{t}$ on a corpus $\\\\mathcal{C}$ using the causal language modeling objective. In explanation of our LLMs fusion framework. Finally, we delve into the implementation details.\n\n# 3.1 PRELIMINARIES\nLet $t$ denote a text sequence of len th $N$ sampled from the corpus $\\\\mathcal{C}$ and $t_{<i}\\\\,=\\\\,(t_{1},t_{2},.\\\\,.\\\\,.\\\\,,t_{i-1})$ denote the sequence preceding the i th token. The causal language modeling (CLM) objective for training a language model parameterized by $\\\\theta$ is defined as minimizing the negative log-likelihood:  \n\n$$\n\\\\mathcal{L}_{\\\\mathrm{CLM}}=-\\\\mathbb{E}_{t\\\\sim\\\\mathcal{C}}\\\\left[\\\\sum_{i}\\\\log p_{\\\\theta}(t_{i}|t_{<i})\\\\right],\n$$  \n\nwhere $p_{\\\\theta}(t_{i}|t_{<i})$ is the model\u2019s predicted probability for token $t_{i}$ given the preceding tokens.  \n\nThe above objective decomposes sequence likelihood into token-level cross-entropy losses, comparing each token\u2019s predicted distribution to its one-hot representation. To provide a more generalized perspective, we reframe this token-level view into a sequential distribution format. Specifically, for the text sequence $t$ , we aggregate token-level predictions and create a probabilistic distribution matrix, $\\\\mathbf{P}_{t}^{\\\\theta}\\\\,\\\\in\\\\,\\\\mathbb{R}^{N\\\\times V}$ \u2208, where the $i$ -th ro represents the distribution predicted by the model for the i th token over the vocabulary of size V. The CLM objective can then be interpreted as reducing the discrepancy between $\\\\mathbf{P}_{t}^{\\\\theta}$ and the one-hot label matrix, $\\\\mathbf{O}_{t}\\\\,\\\\in\\\\,\\\\{0,1\\\\}^{N\\\\times V}$ , where each row is a one-hot representation of the corresponding gold token. Formally, the CLM objective is transformed into the following representation:  \n\n$$\n\\\\mathcal{L}_{\\\\mathrm{CLM}}=-\\\\mathbb{E}_{t\\\\sim\\\\mathcal{C}}\\\\left[\\\\mathbb{D}(\\\\mathbf{P}_{t}^{\\\\theta},\\\\mathbf{O}_{t})\\\\right],\n$$  \n\nwhere $\\\\mathbb{D}(\\\\cdot,\\\\cdot)$ represents the discrepancy function between two matrices, and it is equivalent to Eq.   \n1 when implemented as the KL divergence.\u300d\na696964e-3ceb-4b7a-915b-e78ba5a57923:\u300cref_ids: 455038130636200316, chunk_ids: 0, Score: 0.4121, Text: # 2 Related Work\nOur work is closely related to MHPFL with complete model heterogeneity. These methods support flexible model heterogeneity, and can be divided into three categories: 1) knowledge distillation, 2) mutual learning, and 3) model mixup.  \n\nKnowledge Distillation-based MHPFL . Most knowledge distillation-based MHPFL methods rely on a public dataset (e.g., FedMD [Li and Wang, 2019], FedDF [Lin and others, 2020], FCCL [Huang and others, 2022b], DS-FL [Itahara and others, 2023], CFD [Sattler and others, 2022], FedHeNN [Makhija and others, 2022], Cronus [Chang and others, 2021], FSFL [Huang and others, 2022a], FedAUX [Sattler and others, 2021], FedKT [Li and others, 2021], Fed-ET [Cho and others, 2022], FedKEMF [Yu and others, 2022], FedGEMS [Cheng and others, 2021], KT-pFL [Zhang and others, 2021]) and allow the server to aggregate the logits or representations of heterogeneous local models on a public dataset to integrate knowledge from different clients. However, the public dataset is not always available. In addition, models only perform well when the public dataset follows a similar distribution to local data. Knowledge distillation-based MHPFL methods not requiring a public dataset are starting to emerge. FedGen [Zhu and others, 2021b] and FedZKT [Zhang and others, 2022] introduce zero-shot knowledge distillation into FL to train a generator for generating local representations or public shared datasets. However, time-consuming iterative training for the generator incurs high computational costs. In FD [Jeong and others, 2018], HFD [Ahn and others, 2019; Ahn and others, 2020], FedProto [Tan and others, 2022b], FedGKT [He and others, 2020], each client uploads the (class-average) logits or representations of local data samples to the server for aggregation, the aggregated global logits or representations for each class are sent to clients. Each client calculates the distillation loss between the global logits/representation and each local data sample logits/representation belonging to the same class for training the local model. This incurs high computational costs for clients. Besides, uploading the logits/representations might compromise privacy.  \n\nMutual Learning-based MHPFL .FML [Shen and others, 2020] and FedKD [Wu and others, 2022] enable each client to train a large heterogeneous model and a small homogeneous model in a mutual learning manner. The large model is always trained locally and the small model is uploaded to the server for aggregation. Although they implement information interaction through the small homogeneous models, training the homogeneous model increases local computational costs for clients, and transmitting the homogeneous models incurs high communication costs.  \n\nModel Mixup-based MHPFL . These methods split each local model into a feature extractor and a classifier. In FedRep [Collins and others, 2021], FedPer [Arivazhagan and others, 2019], FedMatch [Chen and others, 2021], FedBABU [Oh and others, 2022] and FedAlt/FedSim [Pillutla and others, 2022], the feature extractor is homogeneous and used for aggregation by the FL server to enhance generalization. The classifier can be heterogeneous. Since the feature extractor has more parameters than the classifier, these methods can only support model heterogeneity to a low degree. In contrast, LG-FedAvg [Liang and others, 2020], FedClassAvg [Jang and others, 2022] and CHFL [Liu and others, 2022] use heterogeneous feature extractors and homogeneous classifiers (i.e., executing the same classification task). The local classifiers are uploaded to the FL server for aggregation to generate the global classifier. To acquire global knowledge, LG-FedAvg directly replaces each client\u2019s local classifier with the global classifier. Each client in $\\\\mathrm{CHFL}$ or FedClassAvg calculates the regularization term or distillation loss between the local and global classifiers. Although these methods support a higher degree of model heterogeneity, they ignore the semantic similarity of classifier parameters belonging to the same class, thus achieving limited performance improvement. Our FedSSA sets out to address the aforementioned limitations.\n\n# 3 Preliminaries\n\n# 3.1 Notations and Objective of Typical FL\nA typical FL system involves a central FL server and $N$ decentralized FL clients. In each round, the server selects a $C$ fraction of clients at random. The selected client set is denoted as $\\\\mathcal{K}$ ,$|{\\\\mathcal{K}}|\\\\,=\\\\,C\\\\cdot N\\\\,=\\\\,K$ . Th server then broadcasts the global model $f(\\\\omega)~(f(\\\\cdot)$ \u00b7and \u03c9denote the model structure and the model parameters) to the selected clients. A client $k$ trains the received $f(\\\\omega)$ on its local dataset $D_{k}$ to produce a local model $f(\\\\omega_{k})$ through gradient descent $\\\\omega_{k}\\\\leftarrow\\\\omega\\\\!-\\\\!\\\\eta\\\\nabla\\\\ell(f(\\\\mathbf{x}_{i};\\\\omega),y_{i})$ .$\\\\ell(f(\\\\pmb{x}_{i};\\\\omega),y_{i})$ eglobal model $f(\\\\omega)$ on the sample ($(x_{i},y_{i})\\\\,\\\\in\\\\,D_{k}$ \u2208.$D_{k}\\\\sim P_{k}$ \u223cindicates that $D_{k}$ obeys distribution $P_{k}$ (i.e., local data from different clients are non-IID). Then, client $k$ uploads its local model parameters $\\\\omega_{k}$ to the server. The server aggregates the received local models to update the global model, $\\\\begin{array}{r}{\\\\bar{\\\\omega}=\\\\sum_{k=0}^{K-1}\\\\frac{n_{k}}{n}\\\\omega_{k}}\\\\end{array}$ . That is, the objective of typical $\\\\mathrm{FL}$ is to minimize the average loss of the global model $f(\\\\omega)$ on data from all clients:  \n\n$$\n\\\\operatorname*{min}_{\\\\omega\\\\in\\\\mathbb{R}^{d}}\\\\sum_{k=0}^{K-1}\\\\frac{n_{k}}{n}\\\\mathcal{L}_{k}(D_{k};f(\\\\omega)),\n$$  \n\nwhere $\\\\omega$ are $d$ -dimensional real numbers. $n_{k}\\\\,=\\\\,|D_{k}|$ is the $k$ $\\\\begin{array}{r}{n=\\\\sum_{k=0}^{N-1}n_{k}}\\\\end{array}$ .  \n$\\\\begin{array}{r}{\\\\mathcal{L}_{k}(D_{k};f(\\\\omega))=\\\\frac{1}{|D_{k}|}\\\\sum_{(\\\\pmb{x}_{i},y_{i})\\\\in D_{k}}\\\\ell(f(\\\\pmb{x}_{i};\\\\omega),y_{i})}\\\\end{array}$ Pis the loss ||\u2208  \nof the global model $f(\\\\omega)$ on $D_{k}$ .\n\n# 3.2 Problem Definition\nThe problem we aim to solve in this work belongs to the category of MHPFL for supervised classification tasks. Each FL client $k$ owns local models $f_{k}(\\\\omega_{k})$ with a model structure $f_{k}(\\\\cdot)$ and parameters $\\\\omega_{k}$ . They can be heterogeneous for different clients. We assume all clients execute the same classification task and each client\u2019s local model $f_{k}(\\\\omega_{k})$ consists of a heterogeneous feature extractor $\\\\mathcal{F}_{k}(\\\\varphi_{k})$ and a homogeneous class cation header $\\\\mathcal{\\\\mathrm{H}}(\\\\theta_{k})$ , i.e., $f_{k}(\\\\omega_{k})=\\\\mathcal{F}_{k}(\\\\varphi_{k})\\\\circ\\\\mathcal{H}(\\\\theta_{k})$ and parameters of the feature extractor. It maps data with inputs as \u25e6de $\\\\mathcal{F}_{k}(D_{k};\\\\varphi_{k})$ el splicin , where $\\\\bar{\\\\mathcal{F}}_{k}(\\\\cdot),\\\\varphi_{k}$ \u00b7denote the ature extractor takes $D_{k}$ from cture the input space to the feature space. The classification header takes input as $\\\\mathcal{H}(\\\\mathcal{F}_{k}(D_{k};\\\\varphi_{k});\\\\theta_{k})$ , where $\\\\mathcal{\\\\mathrm{H}}(\\\\cdot),\\\\theta_{k}$ denote the structure and parameters of the classification header. It involves the last two linear layers of the model which maps the features $\\\\mathcal{F}_{k}(D_{k};\\\\varphi_{k})$ extracted by $\\\\mathcal{F}_{k}(\\\\cdot)$ to the output space.  \n\n  \nFigure 1: The FedSSA framework.  \n\nOur objective is to minimize the sum of losses of all clients\u2019 heterogeneous local models:  \n\n$$\n\\\\operatorname*{min}_{\\\\omega_{0},\\\\ldots,\\\\omega_{K-1}}\\\\sum_{k=0}^{K-1}\\\\mathcal{L}_{k}(D_{k};f_{k}(\\\\omega_{k}))=\\\\sum_{k=0}^{K-1}\\\\mathcal{L}_{k}(D_{k};\\\\mathcal{F}_{k}(\\\\varphi_{k})\\\\circ\\\\mathcal{H}(\\\\theta_{k})),\n$$  \n\nwhere local models $\\\\omega_{0},\\\\ldots,\\\\omega_{K-1}\\\\in\\\\mathbb{R}^{d_{0},\\\\ldots,d_{K-1}}$ .\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - \u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6570\u636e\u96c6\u4e0e\u5e94\u7528\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u5982\u4f55\uff1f\n    - \u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\uff0c\u4e3a\u4f7f\u6a21\u578b\u84b8\u998f\u6709\u6548\u878d\u5408\u4e0d\u540c\u6a21\u6001\u77e5\u8bc6\uff0c\u9700\u8bbe\u8ba1\u54ea\u4e9b\u590d\u6742\u673a\u5236\uff1f\n    - \u73b0\u6709\u8054\u90a6\u5b66\u4e60\u65b9\u6cd5\u6269\u5c55\u5230\u591a\u6a21\u6001\u6570\u636e\u65f6\u5b58\u5728\u54ea\u4e9b\u5c40\u9650\uff0c\u5982\u4f55\u89e3\u51b3\uff1f\n - **\u76ee\u6807**\uff1a\n    - \u63a2\u7a76\u8ba1\u7b97\u6a21\u578b\u5728\u4e0d\u540c\u6761\u4ef6\u4e0b\u7684\u8868\u73b0\uff0c\u63d0\u5347\u5176\u9002\u7528\u6027\u4e0e\u6cdb\u5316\u80fd\u529b\u3002\n    - \u8bbe\u8ba1\u51fa\u9002\u7528\u4e8e\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\u6a21\u578b\u84b8\u998f\u7684\u590d\u6742\u673a\u5236\u3002\n    - \u63d0\u51fa\u65b0\u7684\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u6846\u67b6\uff0c\u89e3\u51b3\u73b0\u6709\u65b9\u6cd5\u5728\u591a\u6a21\u6001\u6570\u636e\u5904\u7406\u65f6\u7684\u5c40\u9650\uff0c\u5982\u652f\u6301\u5f02\u6784\u6a21\u578b\u67b6\u6784\u548c\u6570\u636e\u6a21\u6001\uff0c\u89e3\u51b3\u6a21\u578b\u6f02\u79fb\u95ee\u9898\u7b49\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u6846\u67b6CreamFL**\uff1a\n    - \u57fa\u4e8e\u77e5\u8bc6\u84b8\u998f\uff08KD\uff09\uff0c\u901a\u8fc7\u8868\u793a\u5c42\u7684\u96c6\u6210\u77e5\u8bc6\u8f6c\u79fb\uff0c\u5229\u7528\u5f02\u6784\u5ba2\u6237\u7aef\u7684\u5355\u6a21\u6001\u548c\u591a\u6a21\u6001\u6570\u636e\u5b66\u4e60\u66f4\u5927\u7684\u5168\u5c40\u6a21\u578b\u3002\n    - \u63d0\u51fa\u5168\u5c40 - \u5c40\u90e8\u8de8\u6a21\u6001\u5bf9\u6bd4\u805a\u5408\u7b56\u7565\uff0c\u7528\u4e8e\u805a\u5408\u6765\u81ea\u5f02\u6784\u5ba2\u6237\u7aef\u7684\u8868\u793a\uff0c\u8fc7\u6ee4\u6f02\u79fb\u79bb\u7fa4\u503c\uff0c\u6311\u9009\u5339\u914d\u66f4\u597d\u7684\u5019\u9009\u8868\u793a\u3002\n    - \u5f15\u5165\u6a21\u6001\u95f4\u548c\u6a21\u6001\u5185\u5bf9\u6bd4\u76ee\u6807\u6765\u6b63\u5219\u5316\u5c40\u90e8\u8bad\u7ec3\uff0c\u7f13\u89e3\u6a21\u6001\u5dee\u8ddd\u548c\u4efb\u52a1\u5dee\u8ddd\u5bfc\u81f4\u7684\u6a21\u578b\u6f02\u79fb\u95ee\u9898\u3002\n - **\u6a21\u578b\u878d\u5408\u65b9\u6cd5**\uff1a\n    - \u4f20\u7edf\u6a21\u578b\u96c6\u6210\uff1a\u7ed3\u5408\u591a\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u5e38\u7528\u52a0\u6743\u5e73\u5747\u6216\u591a\u6570\u6295\u7968\u7b49\u65b9\u6cd5\uff0c\u4e0d\u6d89\u53ca\u6a21\u578b\u5408\u5e76\u3002\n    - \u6743\u91cd\u5408\u5e76\uff1a\u5728\u53c2\u6570\u5c42\u9762\u4fc3\u8fdb\u6a21\u578b\u878d\u5408\uff0c\u9002\u7528\u4e8e\u7ed3\u6784\u76f8\u540c\u7684\u6a21\u578b\uff0c\u901a\u8fc7\u4e0d\u540c\u7b56\u7565\u6216\u914d\u7f6e\u83b7\u53d6\u6a21\u578b\u6743\u91cd\u8fdb\u884c\u5408\u5e76\u3002\n - **\u77e5\u8bc6\u84b8\u998f\u65b9\u6cd5**\uff1a\n    - \u6700\u521d\u7528\u4e8e\u6a21\u578b\u538b\u7f29\uff0c\u5728NLP\u793e\u533a\u5e7f\u6cdb\u5e94\u7528\u4e8e\u6587\u672c\u5206\u7c7b\u3001\u751f\u6210\u7b49\u4efb\u52a1\uff0c\u8bad\u7ec3\u5b66\u751f\u6a21\u578b\u6a21\u4eff\u6559\u5e08\u6a21\u578b\u7684\u8f93\u51fa\u5206\u5e03\u3001\u7279\u5f81\u548c\u5173\u7cfb\u7b49\u3002\n    - \u672c\u6587\u65b9\u6cd5\u4e0e\u4f20\u7edf\u591a\u6559\u5e08\u77e5\u8bc6\u84b8\u998f\u6846\u67b6\u7c7b\u4f3c\uff0c\u4f46\u65e0\u5b66\u751f\u6a21\u578b\u5927\u5c0f\u9650\u5236\uff0c\u4e14\u671f\u671b\u878d\u5408\u540e\u76ee\u6807\u6a21\u578b\u6027\u80fd\u8d85\u8d8a\u6e90\u6a21\u578b\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\n    - \u5728\u56fe\u50cf - \u6587\u672c\u68c0\u7d22\u548c\u89c6\u89c9\u95ee\u7b54\uff08VQA\uff09\u4efb\u52a1\u4e0a\u5bf9CreamFL\u8fdb\u884c\u8bc4\u4f30\u548c\u6d88\u878d\u7814\u7a76\u3002\n    - \u5bf9\u6bd4CreamFL\u4e0e\u73b0\u6709\u6700\u5148\u8fdb\u7684\u8054\u90a6\u5b66\u4e60\u65b9\u6cd5\u3002\n - **\u7ed3\u679c**\uff1a\n    - \u5b9e\u9a8c\u8868\u660eCreamFL\u5728\u591a\u6a21\u6001\u8bbe\u7f6e\u4e0b\uff0c\u5728\u6a21\u578b\u6027\u80fd\u548c\u901a\u4fe1\u6210\u672c\u65b9\u9762\u5747\u4f18\u4e8e\u5176\u4ed6\u8054\u90a6\u5b66\u4e60\u7cfb\u7edf\u3002\n    - \u8bc1\u660e\u4e86\u6240\u63d0\u51fa\u7684\u5168\u5c40 - \u5c40\u90e8\u8de8\u6a21\u6001\u805a\u5408\u7b56\u7565\u548c\u6a21\u6001\u95f4/\u5185\u5bf9\u6bd4\u76ee\u6807\u5bf9\u89e3\u51b3\u6a21\u578b\u6f02\u79fb\u95ee\u9898\u3001\u63d0\u5347\u6a21\u578b\u6027\u80fd\u7684\u6709\u6548\u6027\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u6587\u732e\u4e2d\u672a\u660e\u786e\u63d0\u53ca\u5f53\u524d\u7814\u7a76\u7684\u5c40\u9650\u6027\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u8fdb\u4e00\u6b65\u63a2\u7d22\u5982\u4f55\u66f4\u597d\u5730\u878d\u5408\u591a\u6a21\u6001\u6570\u636e\uff0c\u63d0\u5347\u6a21\u578b\u5728\u590d\u6742\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u3002\n    - \u7814\u7a76\u5982\u4f55\u5728\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u96c6\u548c\u5e94\u7528\u573a\u666f\u4e2d\u9a8c\u8bc1\u6240\u63d0\u51fa\u65b9\u6cd5\u7684\u6709\u6548\u6027\u548c\u6cdb\u5316\u80fd\u529b\u3002\n    - \u9488\u5bf9\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u5176\u4ed6\u95ee\u9898\uff0c\u5982\u5b89\u5168\u6027\u3001\u9690\u79c1\u6027\u7b49\uff0c\u5f00\u5c55\u6df1\u5165\u7814\u7a76 \u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u8ba1\u7b97\u6a21\u578b\u5728\u591a\u9886\u57df\u3001\u591a\u6a21\u6001\u6570\u636e\u573a\u666f\u4e0b\u7684\u9002\u7528\u6027\u3001\u6a21\u578b\u84b8\u998f\u673a\u5236\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u6846\u67b6CreamFL\u548c\u6a21\u578b\u878d\u5408\u76f8\u5173\u7814\u7a76\u7b49\u8ba1\u7b97\u673a\u79d1\u5b66\u5185\u5bb9\u5c55\u5f00\uff0c\u4e0e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u6709\u4e00\u5b9a\u5173\u8054\uff0c\u53ef\u4ece\u4e0d\u540c\u7814\u7a76\u70b9\u5bf9\u5e94\u76f8\u5173\u6b65\u9aa4\u8fdb\u884c\u603b\u7ed3\uff1a\n1. **\u7814\u7a76\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f**\uff1a\u5728\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u573a\u666f\u4e0b\uff0c\u6d89\u53ca\u5230\u670d\u52a1\u5668\u4e0e\u5ba2\u6237\u7aef\u4e4b\u95f4\u901a\u8fc7\u4f20\u8f93\u4f4e\u7ef4\u8868\u793a\uff08\u5982\u516c\u5171\u6570\u636e\u7684\u4f4e\u7ef4\u8868\u793a\uff09\u8fdb\u884c\u77e5\u8bc6\u901a\u4fe1 \uff0c\u8fd9\u5176\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u51c6\u786e\u4f20\u9012\u548c\u7406\u89e3\u5341\u5206\u5173\u952e\u3002\u4f8b\u5982CreamFL\u6846\u67b6\u901a\u8fc7\u5728\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4e4b\u95f4\u4f20\u8f93\u516c\u5171\u6570\u636e\u7684\u4f4e\u7ef4\u8868\u793a\u6765\u5b66\u4e60\u66f4\u5927\u7684\u5168\u5c40\u6a21\u578b\uff0c\u8fd9\u4e9b\u8868\u793a\u901a\u5e38\u5177\u6709\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u9002\u7528\u4e8e\u6bd4logits\u66f4\u590d\u6742\u7684\u4efb\u52a1\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u6d89\u53ca\u5230\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0e\u901a\u4fe1\u5a92\u4ecb\u4e2d\u8bed\u4e49\u4fe1\u606f\u7684\u7814\u7a76\uff0c\u5982\u4f55\u786e\u4fdd\u8fd9\u4e9b\u8bed\u4e49\u4fe1\u606f\u5728\u4f20\u8f93\u548c\u5904\u7406\u8fc7\u7a0b\u4e2d\u7684\u51c6\u786e\u6027\u548c\u6709\u6548\u6027\uff0c\u662f\u9700\u8981\u5173\u6ce8\u7684\u95ee\u9898\u3002 \n2. **\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027**\uff1a\u5728\u6a21\u578b\u878d\u5408\u548c\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\uff0c\u5b58\u5728\u8bb8\u591a\u4e0d\u786e\u5b9a\u56e0\u7d20\u548c\u96be\u4ee5\u5b8c\u5168\u9884\u6d4b\u7684\u60c5\u51b5\u3002\u4f8b\u5982\u5728\u591a\u6a21\u6001\u6570\u636e\u7684\u8054\u90a6\u5b66\u4e60\u4e2d\uff0c\u65b0\u51fa\u73b0\u7684\u6a21\u6001\u5dee\u8ddd\u548c\u4efb\u52a1\u5dee\u8ddd\u5bfc\u81f4\u6a21\u578b\u6f02\u79fb\u95ee\u9898\uff0c\u8fd9\u662f\u975e\u7406\u6027\u8868\u73b0\u7684\u4e00\u79cd\u4f53\u73b0\u3002\u4e3a\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u8bbe\u8ba1\u7684\u5404\u79cd\u4f18\u5316\u6280\u672f\uff0c\u5982CreamFL\u4e2d\u63d0\u51fa\u7684\u8de8\u6a21\u6001\u5bf9\u6bd4\u805a\u5408\u7b56\u7565\u548c\u5bf9\u6bd4\u76ee\u6807\u6765\u6b63\u5219\u5316\u5c40\u90e8\u8bad\u7ec3\uff0c\u867d\u7136\u662f\u6709\u9488\u5bf9\u6027\u7684\u8bbe\u8ba1\uff0c\u4f46\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u80fd\u4f1a\u53d7\u5230\u5404\u79cd\u5076\u7136\u56e0\u7d20\u5f71\u54cd\uff0c\u5982\u4e0d\u540c\u6570\u636e\u96c6\u7684\u7279\u70b9\u3001\u6a21\u578b\u67b6\u6784\u7684\u5dee\u5f02\u7b49\uff0c\u8fd9\u4e9b\u90fd\u9700\u8981\u5728\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\u65f6\u8fdb\u884c\u8003\u8651\u3002 \n3. **\u7814\u7a76\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb**\uff1a\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u6846\u67b6CreamFL\u4e2d\uff0c\u901a\u8fc7\u5f15\u5165\u8de8\u6a21\u6001\u548c\u6a21\u6001\u5185\u5bf9\u6bd4\u76ee\u6807\u6765\u6b63\u5219\u5316\u5c40\u90e8\u8bad\u7ec3\uff0c\u8fd9\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u53cd\u9988\u673a\u5236\u3002\u901a\u8fc7\u8fd9\u79cd\u53cd\u9988\u673a\u5236\uff0c\u6a21\u578b\u80fd\u591f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u8c03\u6574\uff0c\u4ee5\u9002\u5e94\u591a\u6a21\u6001\u6570\u636e\u548c\u4e0d\u540c\u4efb\u52a1\u7684\u9700\u6c42\uff0c\u4ece\u800c\u66f4\u597d\u5730\u5e94\u7528\u4e8e\u5b9e\u9645\u7684\u56fe\u50cf - \u6587\u672c\u68c0\u7d22\u548cVQA\u7b49\u4efb\u52a1\u4e2d\uff0c\u4f53\u73b0\u4e86\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u4e2d\u7684\u53cd\u9988\u673a\u5236\u4e0e\u5b9e\u9645\u5e94\u7528\u7684\u8f6c\u5316\u5173\u7cfb\u3002\u540c\u65f6\uff0c\u5728\u6a21\u578b\u878d\u5408\u7814\u7a76\u4e2d\uff0c\u901a\u8fc7\u523a\u6fc0\u6e90\u8bed\u8a00\u6a21\u578b\u9884\u6d4b\u4e0b\u4e00\u4e2a\u6807\u8bb0\uff0c\u5229\u7528\u5176\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\u6765\u8bad\u7ec3\u76ee\u6807\u8bed\u8a00\u6a21\u578b\uff0c\u4e5f\u662f\u4e00\u79cd\u53cd\u9988\u673a\u5236\u5728\u5b9e\u9645\u6a21\u578b\u878d\u5408\u5e94\u7528\u4e2d\u7684\u4f53\u73b0\u3002 \n4. **\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b**\uff1a\u5728\u591a\u6a21\u6001\u8054\u90a6\u5b66\u4e60\u4e2d\uff0c\u4e0d\u540c\u7684\u7b97\u6cd5\u8bbe\u8ba1\uff08\u5982CreamFL\u6846\u67b6\u7684\u8bbe\u8ba1\uff09\u548c\u6570\u636e\u7ed3\u6784\uff08\u5982\u4e0d\u540c\u6a21\u6001\u7684\u6570\u636e\uff09\u6709\u5176\u56fa\u5b9a\u5f62\u5f0f\uff0c\u8fd9\u4e9b\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u6700\u7ec8\u6a21\u578b\u5728\u591a\u6a21\u6001\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u63d0\u5347\u8fd9\u4e00\u9884\u671f\u7ed3\u679c\u5b58\u5728\u56e0\u679c\u5173\u7cfb\u3002\u4f8b\u5982CreamFL\u91c7\u7528\u57fa\u4e8e\u8868\u793a\u7ea7\u96c6\u6210\u77e5\u8bc6\u8f6c\u79fb\u7684\u65b9\u5f0f\uff0c\u8bbe\u8ba1\u7279\u5b9a\u7684\u5168\u5c40 - \u5c40\u90e8\u8de8\u6a21\u6001\u5bf9\u6bd4\u805a\u5408\u7b56\u7565\u7b49\uff0c\u6700\u7ec8\u5b9e\u73b0\u4e86\u5728\u591a\u6a21\u6001\u8bbe\u7f6e\u4e0b\u6a21\u578b\u6027\u80fd\u548c\u901a\u4fe1\u6210\u672c\u65b9\u9762\u4f18\u4e8e\u5176\u4ed6\u8054\u90a6\u5b66\u4e60\u7cfb\u7edf\u7684\u7ed3\u679c\u3002\u540c\u65f6\uff0c\u8fd9\u4e9b\u7814\u7a76\u4e5f\u5728\u63a2\u7d22\u53ef\u62d3\u5c55\u6027\uff0c\u5982CreamFL\u662f\u5426\u80fd\u5e94\u7528\u4e8e\u66f4\u591a\u4e0d\u540c\u7684\u591a\u6a21\u6001\u4efb\u52a1\u573a\u666f\uff0c\u4ee5\u53ca\u662f\u5426\u5b58\u5728\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\uff0c\u4f8b\u5982\u4ece\u6700\u7ec8\u7684\u6027\u80fd\u7ed3\u679c\u53cd\u5411\u63a8\u7406\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u4e2d\u54ea\u4e9b\u90e8\u5206\u5bf9\u6027\u80fd\u63d0\u5347\u8d77\u5230\u5173\u952e\u4f5c\u7528\uff0c\u4ee5\u4fbf\u8fdb\u4e00\u6b65\u4f18\u5316\u548c\u6539\u8fdb\u3002\u5728\u6a21\u578b\u878d\u5408\u7814\u7a76\u4e2d\uff0c\u4ece\u6e90\u8bed\u8a00\u6a21\u578b\u7684\u9884\u6d4b\u5230\u76ee\u6807\u8bed\u8a00\u6a21\u578b\u7684\u8bad\u7ec3\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4e5f\u6d89\u53ca\u5230\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7684\u76ee\u6807\u8bed\u8a00\u6a21\u578b\u6027\u80fd\u63d0\u5347\u7ed3\u679c\u4e4b\u95f4\u7684\u56e0\u679c\u5173\u7cfb\u63a2\u8ba8\uff0c\u4ee5\u53ca\u5bf9\u5176\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u6f5c\u529b\u7684\u7814\u7a76 \u3002  ", "dreams_personality_context": "\u8fd9\u6bb5\u5185\u5bb9\u5e76\u6ca1\u6709\u76f4\u63a5\u4f53\u73b0\u4eba\u7269\u6027\u683c\u76f8\u5173\u4fe1\u606f\u3002\n\n\u6574\u4e2a\u6587\u672c\u56f4\u7ed5\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u7684\u591a\u4e2a\u65b9\u9762\u5c55\u5f00\u9610\u8ff0\uff0c\u91cd\u70b9\u5728\u4e8e\u5404\u9879\u7814\u7a76\u5185\u5bb9\u4e0e\u7ed9\u5b9a\u7814\u7a76\u6b65\u9aa4\u7684\u5173\u8054\u5206\u6790\uff0c\u672a\u6d89\u53ca\u5230\u80fd\u63a8\u65ad\u4eba\u7269\u6027\u683c\u7684\u63cf\u8ff0\uff0c\u5982\u4eba\u7269\u7684\u884c\u4e3a\u4e60\u60ef\u3001\u60c5\u611f\u6001\u5ea6\u3001\u601d\u7ef4\u65b9\u5f0f\u7b49\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u65e0\u6cd5\u603b\u7ed3\u51fa\u4eba\u7269\u6027\u683c\u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["98fb7caa-0848-45de-a6af-81bbde972c84"], "metadata": {}}}, "analysis_store/metadata": {"98fb7caa-0848-45de-a6af-81bbde972c84": {"analysis_hash": "", "ref_analysis_id": ""}}}