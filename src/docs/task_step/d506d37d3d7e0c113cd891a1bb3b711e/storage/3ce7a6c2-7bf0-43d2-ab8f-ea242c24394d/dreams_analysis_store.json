{"analysis_store/data": {"bfd0b9ed-bade-414c-84f7-7fd76ef59da1": {"__data__": {"id_": "bfd0b9ed-bade-414c-84f7-7fd76ef59da1", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u4e0e\u5a92\u4f53\u4e2d\u7684\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u4e86\u89e3\u5362\u66fc\u7406\u8bba\u5982\u4f55\u63a5\u8fd1\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3002\n3. **\u5176\u4ed6**\uff1a\u8003\u8651\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u7684\u9760\u8fd1\u5ea6\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u5e94\u7528\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\uff08\u5305\u62ec\u60c5\u611f\u56e0\u7d20\u3001\u4ea4\u53c9\u70b9\u7b49\uff09\u4ee5\u53ca\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u4e4b\u95f4\u7684\u7d27\u5bc6\u8054\u7cfb\u3002\n3. **\u6ce8\u91cd\u8003\u91cf**\uff1a\u91cd\u89c6\u5bf9\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7814\u7a76\u9760\u8fd1\u7a0b\u5ea6\u7684\u601d\u8003 \u3002  ", "scene_monologue_context": "\u4eca\u5929\u6211\u5728\u7814\u7a76\u9886\u57df\u6295\u5165\u4e86\u5927\u91cf\u7cbe\u529b\uff0c\u4e3b\u8981\u56f4\u7ed5\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u548c\u6570\u636e\u4f9d\u8d56\u3001\u589e\u5f3a\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u80fd\u529b\u7b49\u65b0\u7814\u7a76\u95ee\u9898\u5c55\u5f00\u3002\n\n\u6211\u5148\u662f\u6df1\u5165\u8bc4\u4f30\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u672a\u6765\u7814\u7a76\u65b9\u5411\u4e0e\u6311\u6218\uff0c\u8bd5\u56fe\u4ece\u6539\u8fdb\u6a21\u578b\u67b6\u6784\u3001\u4f18\u5316\u8bad\u7ec3\u7b97\u6cd5\u3001\u63a2\u7d22\u65b0\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u7b49\u7814\u7a76\u5207\u5165\u70b9\u51fa\u53d1\uff0c\u5bfb\u627e\u5df2\u7ecf\u53d6\u5f97\u4e00\u5b9a\u8fdb\u5c55\u7684\u5177\u4f53\u6280\u672f\u6216\u65b9\u6cd5\u5b9e\u4f8b\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u63a5\u89e6\u5230\u4e86\u8bb8\u591a\u76f8\u5173\u8d44\u6599\u3002\n\n\u6bd4\u5982\u5728\u6570\u636e\u589e\u5f3a\u65b9\u9762\uff0c\u4e86\u89e3\u5230Data Augmentation methods\u901a\u8fc7\u6269\u5c55\u548c\u591a\u6837\u5316\u8bad\u7ec3\u6570\u636e\u6765\u63d0\u9ad8DNNs\u6027\u80fd\uff0c\u50cf\u663e\u5f0f\u589e\u5f3a\u867d\u80fd\u5c06\u589e\u5f3a\u6570\u636e\u7eb3\u5165\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f46\u4f1a\u964d\u4f4e\u8bad\u7ec3\u6548\u7387\uff1b\u800cWang\u7b49\u4eba\u57282019\u5e74\u5f15\u5165\u7684\u9690\u5f0f\u8bed\u4e49\u6570\u636e\u589e\u5f3a\u65b9\u6cd5ISDA\uff0c\u5728\u6837\u672c\u7684\u8bed\u4e49\u7a7a\u95f4\u5185\u8f6c\u6362\u6df1\u5ea6\u7279\u5f81\uff0c\u540e\u7eed\u5728\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e2d\u4e5f\u6709\u76f8\u5173\u7814\u7a76\u6269\u5c55\u4e86\u8be5\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u5728\u5904\u7406\u8d85\u8d8a\u7c7b\u522b\u5c42\u9762\u7684\u6570\u636e\u504f\u5dee\u65f6\u4ecd\u5b58\u5728\u63d0\u5347\u7a7a\u95f4\u3002\u8fd8\u6709Adversarial and Anti - Adversarial Perturbations\u901a\u8fc7\u5206\u522b\u5411\u51b3\u7b56\u8fb9\u754c\u9760\u8fd1\u548c\u8fdc\u79bb\u7684\u65b9\u5411\u53d8\u6362\u6837\u672c\uff0c\u6539\u53d8\u6837\u672c\u5b66\u4e60\u96be\u5ea6\uff0c\u7814\u7a76\u8bc1\u5b9e\u8bad\u7ec3\u4e2d\u7eb3\u5165\u5bf9\u6297\u548c\u53cd\u5bf9\u6297\u6837\u672c\u6709\u52a9\u4e8e\u6a21\u578b\u5728\u9c81\u68d2\u6027\u548c\u6cdb\u5316\u6027\u4e4b\u95f4\u53d6\u5f97\u66f4\u597d\u5e73\u8861\uff0c\u4f46\u73b0\u6709\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\uff0c\u4e14\u5728\u8f93\u5165\u7a7a\u95f4\u751f\u6210\u5bf9\u6297\u6270\u52a8\u8017\u65f6\u3002\u4e0e\u4e4b\u4e0d\u540c\u7684\u662f\uff0c\u6709\u4e00\u79cd\u65b0\u65b9\u6cd5\u4ece\u5bf9\u6297\u548c\u53cd\u5bf9\u6297\u6270\u52a8\u5206\u5e03\u4e2d\u968f\u673a\u9009\u62e9\u6270\u52a8\u5411\u91cf\uff0c\u5728\u6df1\u5ea6\u7279\u5f81\u7a7a\u95f4\u751f\u6210\u6270\u52a8\uff0c\u63d0\u9ad8\u4e86\u6548\u7387\u5e76\u786e\u4fdd\u4e86\u8de8\u6570\u636e\u7c7b\u578b\u7684\u901a\u7528\u6027\u3002\n\n\u5728\u7279\u5f81\u52a0\u6743\u548cTransformer\u76f8\u5173\u5185\u5bb9\u91cc\uff0c\u6211\u77e5\u9053\u4e86Feature weighting\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u4e0d\u540c\u65b9\u6cd5\u5404\u6709\u4f18\u52a3\uff0c\u800c\u6b64\u6b21\u7814\u7a76\u805a\u7126\u4e8e\u901a\u8fc7\u53cd\u9988\u5b9e\u73b0\u9002\u5e94\u6027\u6743\u91cd\u5206\u914d\u548c\u6539\u8fdb\u3002Transformer\u67b6\u6784\u81ea2017\u5e74\u88ab\u5f15\u5165\u540e\uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u4f17\u591a\u9886\u57df\u5f15\u53d1\u53d8\u9769\uff0c\u57fa\u4e8e\u5b83\u4ea7\u751f\u4e86\u8bb8\u591a\u7a81\u7834\u6027\u6210\u679c\uff0c\u5982BERT\u3001GPT - 2\u3001GPT - 3\u7b49\u6a21\u578b\u3002\u540c\u65f6\uff0c\u8fd8\u4e86\u89e3\u5230\u4e00\u79cd\u9488\u5bf9\u8868\u683c\u6570\u636e\u7684TFWT\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7\u8bbe\u8ba1\u57fa\u4e8eTransformer\u7684\u7279\u5f81\u52a0\u6743\u7ba1\u9053\u548c\u5fae\u8c03\u7b56\u7565\uff0c\u7531\u7279\u5f81\u5bf9\u9f50\u3001\u7279\u5f81\u52a0\u6743\u548c\u5fae\u8c03\u4e09\u4e2a\u7ec4\u4ef6\u6784\u6210\uff0c\u65e8\u5728\u901a\u8fc7\u6709\u6548\u7ed3\u5408\u6ce8\u610f\u529b\u673a\u5236\u6355\u6349\u7279\u5f81\u95f4\u5173\u7cfb\u548c\u76f8\u4e92\u4f5c\u7528\uff0c\u4ee5\u63d0\u9ad8\u4e0b\u6e38\u4efb\u52a1\u6027\u80fd\u3002\n\n\u6b64\u5916\uff0c\u5728\u8fdb\u4e00\u6b65\u8ba8\u8bba\u90e8\u5206\uff0c\u603b\u7ed3\u7684\u4e00\u4e9b\u5b9e\u8bc1\u89c2\u5bdf\u4e5f\u7ed9\u6211\u5e26\u6765\u542f\u53d1\u3002\u4f8b\u5982CLIP\u7ed3\u5408\u56db\u4e2a\u8bad\u7ec3\u6280\u5de7\u80fd\u5728\u4e3b\u8bba\u6587\u88681\u7684Rank - 1\u4e2d\u5e26\u6765\u7ea64%\u7684\u63d0\u5347\uff0c\u5bf9\u591a\u79cd\u6570\u636e\u589e\u5f3a\u548c\u635f\u5931\u51fd\u6570\u7684\u7814\u7a76\u4e3a\u672a\u6765\u5de5\u4f5c\u63d0\u4f9b\u4e86\u9009\u62e9\u6709\u6548\u65b9\u6cd5\u6539\u8fdb\u6a21\u578b\u6027\u80fd\u7684\u6307\u5bfc\uff0c\u5bf9\u6a21\u578b\u5185\u90e8\u5c5e\u6027\u548c\u529f\u80fd\u7684\u9996\u6b21\u63a2\u7d22\u4e3a\u6a21\u578b\u538b\u7f29\u7814\u7a76\u63d0\u4f9b\u65b9\u5411\uff0c\u800c\u5bf9\u57fa\u4e8eCLIP\u7684\u5c11\u6837\u672cTBPS\u7684\u521d\u6b65\u7814\u7a76\u4e5f\u4e3a\u8be5\u9886\u57df\u672a\u6765\u7814\u7a76\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u89c2\u5bdf\u65b9\u5411\u3002\u4eca\u5929\u7684\u5b66\u4e60\u548c\u7814\u7a76\u8ba9\u6211\u5bf9\u8be5\u9886\u57df\u6709\u4e86\u66f4\u6df1\u5165\u7684\u8ba4\u8bc6\uff0c\u4e5f\u4e3a\u540e\u7eed\u5de5\u4f5c\u6307\u660e\u4e86\u65b9\u5411 \u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "3ce7a6c2-7bf0-43d2-ab8f-ea242c24394d:\u300c\u8bc4\u4f30\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u672a\u6765\u7814\u7a76\u65b9\u5411\u4e0e\u6311\u6218\u300d\n3ce7a6c2-7bf0-43d2-ab8f-ea242c24394d:\u300c\u5728\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u548c\u6570\u636e\u4f9d\u8d56\u3001\u589e\u5f3a\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u80fd\u529b\u8fd9\u4e9b\u65b0\u7814\u7a76\u95ee\u9898\u4e0b\uff0c\u4ece\u6539\u8fdb\u6a21\u578b\u67b6\u6784\u3001\u4f18\u5316\u8bad\u7ec3\u7b97\u6cd5\u3001\u63a2\u7d22\u65b0\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u7b49\u7814\u7a76\u5207\u5165\u70b9\u51fa\u53d1\uff0c\u6709\u54ea\u4e9b\u5df2\u7ecf\u53d6\u5f97\u4e00\u5b9a\u8fdb\u5c55\u7684\u5177\u4f53\u6280\u672f\u6216\u65b9\u6cd5\u5b9e\u4f8b\uff1f  \u300d\n3ce7a6c2-7bf0-43d2-ab8f-ea242c24394d:\u300cref_ids: 454847062641060886, chunk_ids: 6, Score: 0.4121, Text: # 2 Related Work\nData Augmentation methods have showcased their capacity to improve DNNs\u2019 performance by expanding and diversifying training data [Maharana et al. , 2022]. Explicit augmentation directly incorporates augmented data into the training process, albeit at the expense of reduced training efficiency [Cubuk et al. , 2020; Taylor and Nitschke, 2018; Xu and Zhao, 2023]. Recently, Wang et al. [2019] introduced an implicit semantic data augmentation approach, named ISDA, which transforms the deep features of samples within the semantic space of DNNs and boils down to the optimization of a robust loss. Subsequent studies [Li et al. , 2021; Chen et al. , 2022] in image classification tasks have extended this approach. However, these methods still struggle with effectively improving model performance when dealing with data biases that go beyond the category level.  \n\nAdversarial and Anti-Adversarial Perturbations transform samples in directions that respectively move towards and away from the decision boundary, thereby modifying samples\u2019 learning difficulty [Lee et al. , 2023; Zhou et al. ,2023]. Consequently, models allocate varying levels of attention to samples subjected to their perturbations. Research has confirmed that incorporating adversarial and anti-adversarial samples during training assists models in achieving a better tradeoff between robustness and generalization [Zhou et al. ,2023; Zhu et al. , 2021]. However, existing adversarial training methods primarily focus on two specific types of perturbations that maximize and minimize losses [Xu et al. , 2021; Zhou et al. , 2023], posing limitations. Moreover, generating adversarial perturbations within the input space is timeconsuming [Madry et al. , 2018]. Different from prior studies, our approach randomly selects perturbation vectors from both adversarial and anti-adversarial perturbation distributions, enabling the generation of multiple distinct adversarial and antiadversarial samples. Furthermore, the perturbations are generated within the deep feature space, enhancing efficiency and ensuring universality across various data types.\n\n# 3 Implicit Adversarial Data Augmentation\nWe initially introduce a sample-wise adversarial data augmentation strategy to facilitate model training across various learning scenarios. By considering infinite augmentations, we then derive a surrogate loss for our augmentation strategy.\n\n# 3.1 Adversarial Data Augmentation\nConsider training a de $\\\\mathcal{F}$ weights $\\\\Phi$ on a training set, denoted as D$\\\\pmb{\\\\mathcal{D}}^{t r}=\\\\{(\\\\pmb{x}_{i},y_{i})\\\\}_{i=1}^{N}$ {, where Nrefers to the number of training resents the label of sample $\\\\pmb{x}_{i}$ . The deep feature (before logit) ples, and $\\\\bar{y_{i}}\\\\in\\\\{1,\\\\cdots,\\\\mathcal{C}\\\\}$ \u2208{ \u00b7 \u00b7 \u00b7 C} rep$\\\\mathcal{F}$ $\\\\pmb{x}_{i}$ is represented as a $\\\\mathcal{H}$ -dimensional vector $\\\\pmb{h}_{i}=\\\\mathcal{F}_{\\\\pmb{\\\\Phi}}(\\\\pmb{x}_{i})\\\\in\\\\mathbb{R}^{\\\\mathcal{H}}$ F\u2208.  \n\nOur augmentation strategy enhances samples within the deep feature space of DNNs. The perturbation vectors for the deep feature of each sample are randomly extracted from either its adversarial or anti-adversarial perturbation distributions. These distributions are modeled as multivariate normal distributions, $\\\\mathcal{N}(\\\\pmb{\\\\delta}_{i},\\\\pmb{\\\\Sigma}_{y_{i}})$ , where $\\\\delta_{i}$ refers to the sample perturbation, and $\\\\pmb{\\\\Sigma}_{y_{i}}$ represents the class-specific covariance matrix estimated from the features of all training samples in class $y_{i}$ . As samples undergo augmentation within the deep feature space, perturbations should also be generated within this space, facilitating semantic alterations for training samples. Consequently, the perturbation vector $\\\\delta_{i}$ for sample $\\\\pmb{x}_{i}$ is calculated as $\\\\epsilon_{i}{\\\\cdot}\\\\dot{s}i g n(\\\\dot{\\\\nabla}_{h_{i}}\\\\ell_{i}^{C E})$ , wh $s i g n(\\\\nabla_{h_{i}}\\\\ell_{i}^{C\\\\bar{E}})$ signifies the gradient sign of the CE loss $\\\\ell_{i}^{C E}$ with respect to $h_{i}$ .The parameter $\\\\epsilon_{i}$ plays a pivotal role in determining the perturbation strategy applied to $\\\\pmb{x}_{i}$ , encompassing both the perturbation direction and bound. Its positive or negative sign signifies adversarial or anti-adversarial perturbations, respecturbation bound. In practical applications, the value of tively. Furthermore, the absolute value $|\\\\epsilon_{i}|$ governs the \u03f5$\\\\epsilon_{i}$ eris dynamically computed through a perturbation network based on the training characteristics of $\\\\pmb{x}_{i}$ , which will be elaborated in Section 4. Additionally, the class-specific covariance matrix $\\\\pmb{\\\\Sigma}_{y_{i}}$ within this distribution aids in preserving the covariance structure of each class. Its value is estimated in real-time by aggregating statistics from all mini-batches, as detailed in Section I of the Appendix. Regarding the augmentation strength quantified by the number of augmented instances $\\\\mathcal{M}_{i}$ and for $\\\\pi_{y_{i}}$ $\\\\pmb{x}_{i}$ represents the proportion of class , we define $\\\\mathcal{M}_{i}$ as $\\\\mathcal{M}/\\\\pi_{y_{i}}$ , wher $y_{i}$ $\\\\mathcal{M}$ in the training is a constant data. Accordingly, a smaller proportion results in a larger number of augmented instances, ensuring class balance.  \n\n  \nFigure 2: The overview of our method pipeline. We initiate with a sample-wise adversarial data augmentation strategy (Box 1), enriching the deep features of samples using perturbation vectors extracted from their adversarial and anti-adversarial perturbation distributions. Subsequently, by considering an infinite number of augmented instances, we derive a novel robust loss, termed IADA (Box 2). Regularization analysis reveals the efficacy of IADA in improving model generalization, robustness, and inter-class fairness. To facilitate optimization with IADA, we then establish a meta-learning-based framework called Meta-IADA (Box 3). Within it, a perturbation network is tasked with generating perturbation strategies for samples (denoted as $\\\\epsilon_{x}$ ) in the IADA loss, leveraging a set of ( $K\\\\!=\\\\!15)$ ) training characteristics as inputs.  \n\nTo compute the augmented features $\\\\tilde{\\\\pmb{h}}_{i}$ from $h_{i}$ , we transform $h_{i}$ along random directions sampled from $\\\\mathcal{N}(\\\\pmb{\\\\delta}_{i},\\\\pmb{\\\\Sigma}_{y_{i}})$ .This transform ion yields $\\\\tilde{\\\\pmb{h}}_{i}\\\\sim\\\\mathcal{N}(\\\\pmb{h}_{i}+\\\\pmb{\\\\delta}_{i},\\\\alpha\\\\pmb{\\\\Sigma}_{y_{i}})$ , where the parameter \u03b1controls the extent of dispersion for augmented samples. In summary, our adversarial data augmentation strategy offers the following advantages:  \n\n\u2022 Instead of augmenting samples within the original data space, our approach enhances them within their adversarial and anti-adversarial perturbation distributions. This method effectively adjusts the learning difficulty distribution of training samples, fostering improved generalization and robustness in DNNs. \u2022 Our sample-wise augmentation distribution customizes the mean vector based on the unique training characteristics of each sample. This personalized strategy significantly enhances models\u2019 ability to address data biases, encompassing those beyond the category level.\u300d\n3ce7a6c2-7bf0-43d2-ab8f-ea242c24394d:\u300cref_ids: 454846731731167836, chunk_ids: 9, Score: 0.3418, Text: # 2 Related Work\n\n# 2.1 Feature Weighting\nFeature weighting, vital for enhancing machine learning, includes several approaches [Chen and Guo, 2015; Chen and Hao, 2017b; Chowdhury et al. , 2023; Wang et al. , 2004; Yeung and Wang, 2002]. [Liu et al. , 2004], [Druck et al. ,2008], and [Raghavan et al. , 2006] explored feedback integration, model constraints, and active learning enhancement. [Wang et al. , 2013] proposed an active SVM method for image retrieval. Techniques like weighted bootstrapping [Barbe and Bertail, 1995], chi-squared tests, TabTransformer [Huang et al. , 2020], and cost-sensitive learning adjust weights through feature changes. These methods have limitations like overfitting or ignoring interactions. Our study focuses on adaptable weight distribution and improvement through feedback.\n\n# 2.2 Transformer\nThe Transformer architecture, introduced by [Vaswani et al. ,2017], has revolutionized many fields including natural language processing. Instead of relying on recurrence like its predecessors, it utilizes self-attention mechanisms to capture dependencies regardless of their distance in the input data. This innovation has led to several breakthroughs in various tasks. For instance, BERT model [Devlin et al. , 2018; Clark et al. , 2019], built upon the Transformer, set new records in multiple NLP benchmarks. Later, [Radford et al. ,2019] extended these ideas with GPT-2 and GPT-3 [Brown et al. , 2020], demonstrating impressive language generation capabilities. Concurrently, [Raffel et al. , 2020] proposed a unified text-to-text framework for NLP transfer learning, achieving state-of-the-art results across multiple tasks.\n\n# 3 Methodology\n\n# 3.1 Problem Formulation\n$\\\\{\\\\mathbf{F},\\\\mathbf{y}\\\\}$ {}nsider the problem be a dataset with $K$ ting of classif Nsamples tion. Let ${\\\\mathcal{D}}=$ define the feature matrix $\\\\textbf{F}=\\\\{\\\\mathbf{f}_{k}\\\\}_{k=1}^{K}$ {}.We use f${\\\\bf f}_{k}\\\\;\\\\;=\\\\;\\\\;$ $\\\\{f_{k}^{1},\\\\ldots,f_{k}^{i},\\\\ldots,f_{k}^{N}\\\\}^{\\\\top}$ }to denote the $k$ -th feature, $f_{k}^{i}$ is the value of i -th sample on the k-th feature. $\\\\textbf{y}=$ $[\\\\stackrel{\\\\cdot\\\\cdot}{y_{1}},\\\\dotsc,y_{N}]^{\\\\top}$ is the label vector. Without loss of generality, we assume the first $M$ features to be discrete, and the remaining $K-M$ features to be co  \n\nIn defining a weighting matrix W$\\\\textbf{W}\\\\in\\\\ \\\\mathbb{R}^{N\\\\times K}$ \u2208, each of whose elements corresponds to the elements of the feature matrix $\\\\mathbf{F}$ .This weighting matrix $\\\\mathbf{W}$ is applied elementwisely $\\\\mathbf{F}$ to produce a weighted matrix $\\\\bar{\\\\mathbf{F}_{r e w}}=\\\\mathbf{W}\\\\odot\\\\mathbf{F}.$ ,problem, we aim to find an optimized where \u2299denotes the Hadamard prod WIn the , so that $\\\\mathbf{F}_{r e w}$ can ting improve the downstream tasks\u2019 performance when substituting the original feature matrix $\\\\mathbf{F}$ in predicting y.\n\n# 3.2 Framework\nWe propose TFWT , a Tabular Feature Weighting with Transformer method for tabular data. We aim to improve downstream tasks\u2019 performance by effectively incorporating the attention mechanism to capture the relations and interactions between features. To achieve this goal, we design a Transformer-based feature weighting pipeline with a finetuning strategy. As Figure 2 shows, our method consists of three components: In the Feature Alignment , we align different types of original features so that they are in the same space. In the Feature Weighting , we encode the feature matrix to get its embedding via Transformer encoders, and then decode the embedding into feature weights. In the Fine-Tuning ,we design a reinforcement learning strategy to fine-tune the feature weights based on feedback from downstream tasks.\n\n# 3.3 Feature Alignment\nTo effectively extract tabular data\u2019s features while maintaining a streamlined computation, we convert both discrete and continuous features into numerical vectors.  \n\nDiscrete Feature Alignment. We first encode the discrete features into numerical values. The encoded numerical values are then passed to a dense embedding layer, transforming them into vectors for subsequent processes. For each discrete feature $\\\\mathbf{f}_{k}$ $(k=1,\\\\ldots,M)$ , the encoded vector is:  \n\n$$\n\\\\begin{array}{r}{\\\\mathbf{v}_{k}=\\\\mathrm{Dense}(\\\\mathbf{f}_{k}).}\\\\end{array}\n$$  \n\nContinuous Feature Alignment. We normalize all the continuous features with mean of 0 and variance of 1. We then design a linear layer to align their length with discrete features. For each continuous feature $\\\\mathbf{f}_{k}$ $(k=M+1,\\\\ldots,K)$ ,the encoded vector is:  \n\n$$\n\\\\mathbf{u}_{k}=\\\\mathrm{Linear}\\\\left(\\\\frac{\\\\mathbf{f}_{k}-\\\\mu_{k}}{\\\\sigma_{k}}\\\\right),\n$$  \n\nwhere $\\\\mu_{k}$ and $\\\\sigma_{k}$ are the mean and standard deviation of the $k$ -th feature, respectively. Then the aligned feature matrix $\\\\mathbf{F^{\\\\prime}}$ is formed by concatenating these vectors:  \n\n$$\n\\\\mathbf{F}^{\\\\prime}=[\\\\mathbf{v}_{1},\\\\ldots,\\\\mathbf{v}_{M},\\\\mathbf{u}_{M+1},\\\\ldots,\\\\mathbf{u}_{K}].\n$$\n\n# 3.4 Feature Weighting\nGiven aligned feature matrix $\\\\mathbf{F^{\\\\prime}}$ , we aim to explore the relationships between features and assign proper feature weights. Data Encoding. To enhance the model\u2019s understanding and extract latent patterns and relations from the data, we put $\\\\mathbf{F^{\\\\prime}}$ into the encoders with a multi-head self-attention mechanism. This mechanism processes the embedded feature matrix $\\\\mathbf{F^{\\\\prime}}$ by projecting it into query (Q), key (K), and value (V) spaces.  \n\nThe encoder then applies the self-attention mechanism to capture varying feature relations in the feature matrix and assigns distinct attention weights to them. Assuming $d_{k}$ is the dimensionality of the key vectors, the attention mechanism is formulated as:  \n\n$$\n\\\\mathrm{Attention}(Q,K,V)=\\\\mathrm{softmax}\\\\left(\\\\frac{Q K^{T}}{\\\\sqrt{d_{k}}}\\\\right)V,\n$$  \n\nr$Q=W_{Q}\\\\cdot\\\\mathbf{F^{\\\\prime}}$ ,$K=W_{K}\\\\cdot\\\\mathbf{F}^{\\\\prime}$ , and $V=W_{V}\\\\cdot\\\\mathbf{F}^{\\\\prime},W_{\\\\mathbb{G}}$ ,$W_{K}$ ,$W_{V}$ are parameter matrices.  \n\nIn our method, we adopt the multi-head attention mechanism, where the results of each head are concatenated and linearly transformed. Assuming $W^{O}$ is an output projection matrix and $\\\\mathbf{Z}$ is the feature representation:  \n\n$$\n\\\\mathrm{{head}}_{i}=\\\\mathrm{{Attention}}(Q W_{i}^{Q},K W_{i}^{K},V W_{i}^{V}),\n$$  \n\n$$\n\\\\mathrm{MultiHead}(Q,K,V)=\\\\mathrm{Concat}(\\\\mathrm{head}_{1},...,\\\\mathrm{head}_{h})W^{O},\n$$  \n\n$$\n\\\\mathbf{Z}=\\\\operatorname{ResNet}(\\\\mathbf{MultiHead}(Q,K,V)),\n$$  \n\nwhere $W_{i}^{Q},\\\\;W_{i}^{K}$ , and $W_{i}^{V}$ are weights for query, key, and value. Through this process, we obtain the feature representation $\\\\mathbf{Z}$ that captures feature relationships. Specifically, $\\\\mathbf{Z}$ is obtained by passing the input feature matrix through multiple layers of the encoder, where each layer applies self-attention and residual connection-enhanced feedforward networks.  \n\nWeight Decoding. In this process, we aim to decode a weighting matrix Wfrom the embedding $\\\\mathbf{Z}$ . This decoding process iteratively updates Wuntil the downstream task\u2019s performance is satisfied. We initialize the Wby setting all its elements as 1. This is to ensure all features receive equal importance at the beginning. In each decoding layer, we do cross-attention on $\\\\mathbf{W}$ and $\\\\mathbf{Z}$ by:  \n\n$$\n\\\\mathrm{CrossAtention}(Q_{W},K_{Z},V_{Z})=\\\\mathrm{softmax}\\\\left(\\\\frac{Q_{W}K_{Z}^{T}}{\\\\sqrt{d_{z}}}\\\\right)V_{Z},\n$$  \n\nr$Q_{w}\\\\,=\\\\,W_{Q}\\\\cdot\\\\mathbf{W}$ ,$K_{Z}\\\\,=\\\\,K_{K}\\\\cdot\\\\mathbf{Z}$ , and $V=W_{V}\\\\cdot\\\\mathbf{Z}$ ,$W_{Q}$ ,$W_{K}$ ,$W_{V}$ are parameter matrices.  \n\nBy adopting a cross-attention mechanism, we generate a contextual representation that captures various relationships and dependencies in the feature matrix. After several weight decoding layers, we get an updated weighting matrix $\\\\mathbf{W}$ :  \n\n$$\n{\\\\bf W}={\\\\bf R e s N e t}(\\\\mathrm{CrossAttention}(Q_{W},K_{Z},V_{Z})).\n$$  \n\n  \nFigure 2: The framework consists of three components. In the alignment we convert discrete ( $f_{1}$ to $f_{M},$ ) and continuous $(f_{M+1}$ to $f_{K})$ )features into uniform-length vectors. In the weighting we initialize and reassign weights according to feature relationships. The fine-tuning process employs reinforcement learning to refine the weighting model.  \n\nWe finally use the the weighting matrix Wto derive a weighted feature matrix $\\\\mathbf{F}_{\\\\mathrm{rew}}$ by its Hadamard product with the original feature matrix $\\\\mathbf{F}$ :$\\\\mathbf{\\\\bar{F}}_{\\\\mathrm{rew}}\\\\;=\\\\;\\\\mathbf{W}\\\\odot\\\\bar{\\\\mathbf{F}}$ . With this weighted feature matrix, we reorganize the feature space and make features optimized for the downstream task. $\\\\mathbf{F}_{\\\\mathrm{rew}}$ is then used to substitute $\\\\mathbf{F}$ in the downstream tasks.\u300d\n3ce7a6c2-7bf0-43d2-ab8f-ea242c24394d:\u300cref_ids: 454849433600195034, chunk_ids: 1, Score: 0.3242, Text: # CFurther Discussions\nWe summarize some empirical observations as follows.  \n\n1) The CLIP with four training tricks yields about $4\\\\%$ improvement at Rank-1 in Table 1 of the main paper. It can inspire future works in which the model performance could be boosted by applying these training tricks.  \n\n2) Data augmentation and loss function are common technologies used in various methods. The investigation of more than 20 data augmentations and about 10 loss functions on performance in Tables 2-5 of the main paper provides valuable guidance on future works. Researchers can select proper and effective augmentations and losses into the model for improving performance.   \n3) We explore the internal properties and functionalities of the model for the first time. These results can light future works on model compression, so as to develop a more lightweight and effective TBPS method.   \n4) There are very little research on few-shot TBPS, while this paper makes a preliminary study on CLIP-based fewshot TBPS, providing valuable observation for future research direction.\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - \u5982\u4f55\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u548c\u6570\u636e\u4f9d\u8d56\u3001\u589e\u5f3a\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u80fd\u529b\uff1f\n    - \u73b0\u6709\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u5728\u5904\u7406\u8d85\u8d8a\u7c7b\u522b\u5c42\u9762\u7684\u6570\u636e\u504f\u5dee\u65f6\u5b58\u5728\u54ea\u4e9b\u4e0d\u8db3\uff1f\n    - \u4e0d\u540c\u7279\u5f81\u52a0\u6743\u65b9\u6cd5\u7684\u5c40\u9650\u6027\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u901a\u8fc7\u53cd\u9988\u5b9e\u73b0\u9002\u5e94\u6027\u6743\u91cd\u5206\u914d\u548c\u6539\u8fdb\uff1f\n    - \u5982\u4f55\u5229\u7528Transformer\u67b6\u6784\u6709\u6548\u6355\u6349\u8868\u683c\u6570\u636e\u7279\u5f81\u95f4\u7684\u5173\u7cfb\u548c\u76f8\u4e92\u4f5c\u7528\uff0c\u4ee5\u63d0\u9ad8\u4e0b\u6e38\u4efb\u52a1\u6027\u80fd\uff1f\n - **\u76ee\u6807**\uff1a\n    - \u8bc4\u4f30\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\u672a\u6765\u7814\u7a76\u65b9\u5411\u4e0e\u6311\u6218\u3002\n    - \u4ece\u6539\u8fdb\u6a21\u578b\u67b6\u6784\u3001\u4f18\u5316\u8bad\u7ec3\u7b97\u6cd5\u3001\u63a2\u7d22\u65b0\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u7b49\u5207\u5165\u70b9\uff0c\u5bfb\u627e\u5df2\u53d6\u5f97\u8fdb\u5c55\u7684\u5177\u4f53\u6280\u672f\u6216\u65b9\u6cd5\u5b9e\u4f8b\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u6570\u636e\u589e\u5f3a\u65b9\u6cd5**\uff1a\n    - **\u663e\u5f0f\u589e\u5f3a**\uff1a\u76f4\u63a5\u5c06\u589e\u5f3a\u6570\u636e\u7eb3\u5165\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f46\u964d\u4f4e\u8bad\u7ec3\u6548\u7387\u3002\n    - **\u9690\u5f0f\u8bed\u4e49\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff08ISDA\uff09**\uff1a\u5728\u6837\u672c\u7684\u8bed\u4e49\u7a7a\u95f4\u5185\u8f6c\u6362\u6df1\u5ea6\u7279\u5f81\uff0c\u540e\u7eed\u5728\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e2d\u6709\u76f8\u5173\u6269\u5c55\uff0c\u4f46\u5904\u7406\u8d85\u8d8a\u7c7b\u522b\u5c42\u9762\u7684\u6570\u636e\u504f\u5dee\u80fd\u529b\u6709\u9650\u3002\n    - **\u65b0\u65b9\u6cd5**\uff1a\u4ece\u5bf9\u6297\u548c\u53cd\u5bf9\u6297\u6270\u52a8\u5206\u5e03\u4e2d\u968f\u673a\u9009\u62e9\u6270\u52a8\u5411\u91cf\uff0c\u5728\u6df1\u5ea6\u7279\u5f81\u7a7a\u95f4\u751f\u6210\u6270\u52a8\uff0c\u63d0\u9ad8\u6548\u7387\u5e76\u786e\u4fdd\u8de8\u6570\u636e\u7c7b\u578b\u901a\u7528\u6027\u3002\n - **\u7279\u5f81\u52a0\u6743\u65b9\u6cd5**\uff1aFeature weighting\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5982\u53cd\u9988\u96c6\u6210\u3001\u6a21\u578b\u7ea6\u675f\u3001\u4e3b\u52a8\u5b66\u4e60\u589e\u5f3a\u3001\u52a0\u6743 bootstrapping\u3001chi - squared \u6d4b\u8bd5\u3001TabTransformer\u3001\u6210\u672c\u654f\u611f\u5b66\u4e60\u7b49\uff0c\u4f46\u5404\u6709\u5c40\u9650\u6027\uff0c\u6b64\u6b21\u7814\u7a76\u805a\u7126\u901a\u8fc7\u53cd\u9988\u5b9e\u73b0\u9002\u5e94\u6027\u6743\u91cd\u5206\u914d\u548c\u6539\u8fdb\u3002\n - **Transformer\u76f8\u5173\u65b9\u6cd5**\uff1a\n    - **Transformer\u67b6\u6784**\uff1a\u81ea2017\u5e74\u5f15\u5165\u540e\u5728\u591a\u9886\u57df\u5f15\u53d1\u53d8\u9769\uff0c\u57fa\u4e8e\u6b64\u4ea7\u751f\u4e86BERT\u3001GPT - 2\u3001GPT - 3\u7b49\u6a21\u578b\u3002\n    - **TFWT\u65b9\u6cd5**\uff1a\u9488\u5bf9\u8868\u683c\u6570\u636e\uff0c\u8bbe\u8ba1\u57fa\u4e8eTransformer\u7684\u7279\u5f81\u52a0\u6743\u7ba1\u9053\u548c\u5fae\u8c03\u7b56\u7565\uff0c\u7531\u7279\u5f81\u5bf9\u9f50\uff08\u5c06\u79bb\u6563\u548c\u8fde\u7eed\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u503c\u5411\u91cf\uff09\u3001\u7279\u5f81\u52a0\u6743\uff08\u901a\u8fc7Transformer\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u83b7\u53d6\u7279\u5f81\u6743\u91cd\uff09\u548c\u5fae\u8c03\uff08\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\uff09\u4e09\u4e2a\u7ec4\u4ef6\u6784\u6210\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u6570\u636e\u589e\u5f3a\u5b9e\u9a8c**\uff1a\u73b0\u6709\u7814\u7a76\u5bf9\u6bd4\u4e86\u663e\u5f0f\u589e\u5f3a\u548c\u9690\u5f0f\u589e\u5f3a\u65b9\u6cd5\u5728\u63d0\u5347DNNs\u6027\u80fd\u65b9\u9762\u7684\u6548\u679c\uff0c\u663e\u5f0f\u589e\u5f3a\u867d\u80fd\u7eb3\u5165\u6570\u636e\u4f46\u6548\u7387\u4f4e\uff0cISDA\u5728\u5904\u7406\u7279\u5b9a\u6570\u636e\u504f\u5dee\u65f6\u6709\u5c40\u9650\uff1b\u65b0\u7684\u5bf9\u6297\u548c\u53cd\u5bf9\u6297\u6270\u52a8\u65b9\u6cd5\u901a\u8fc7\u5b9e\u9a8c\u8bc1\u5b9e\u80fd\u4f7f\u6a21\u578b\u5728\u9c81\u68d2\u6027\u548c\u6cdb\u5316\u6027\u4e4b\u95f4\u53d6\u5f97\u66f4\u597d\u5e73\u8861\uff0c\u4f46\u73b0\u6709\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\u4e14\u751f\u6210\u6270\u52a8\u8017\u65f6\u3002\n - **\u7279\u5f81\u52a0\u6743\u548cTransformer\u5b9e\u9a8c**\uff1a\u672a\u660e\u786e\u63d0\u53ca\u5177\u4f53\u5b9e\u9a8c\u8bbe\u8ba1\uff0c\u4f46\u6307\u51fa\u4e0d\u540c\u7279\u5f81\u52a0\u6743\u65b9\u6cd5\u6709\u5404\u81ea\u5c40\u9650\u6027\uff0cTFWT\u65b9\u6cd5\u65e8\u5728\u901a\u8fc7\u7ed3\u5408\u6ce8\u610f\u529b\u673a\u5236\u6355\u6349\u7279\u5f81\u5173\u7cfb\u6765\u63d0\u9ad8\u4e0b\u6e38\u4efb\u52a1\u6027\u80fd\uff0c\u4e0d\u8fc7\u4e5f\u672a\u7ed9\u51fa\u5177\u4f53\u5b9e\u9a8c\u9a8c\u8bc1\u7ed3\u679c\u3002\n - **\u5176\u4ed6\u5b9e\u9a8c**\uff1aCLIP\u7ed3\u5408\u56db\u4e2a\u8bad\u7ec3\u6280\u5de7\u80fd\u5728\u4e3b\u8bba\u6587\u88681\u7684Rank - 1\u4e2d\u5e26\u6765\u7ea64%\u7684\u63d0\u5347\uff1b\u5bf9\u591a\u79cd\u6570\u636e\u589e\u5f3a\u548c\u635f\u5931\u51fd\u6570\u7684\u7814\u7a76\u4e3a\u672a\u6765\u9009\u62e9\u6709\u6548\u65b9\u6cd5\u6539\u8fdb\u6a21\u578b\u6027\u80fd\u63d0\u4f9b\u6307\u5bfc\uff1b\u5bf9\u6a21\u578b\u5185\u90e8\u5c5e\u6027\u548c\u529f\u80fd\u7684\u63a2\u7d22\u4e3a\u6a21\u578b\u538b\u7f29\u7814\u7a76\u63d0\u4f9b\u65b9\u5411\uff1b\u5bf9\u57fa\u4e8eCLIP\u7684\u5c11\u6837\u672cTBPS\u7684\u521d\u6b65\u7814\u7a76\u4e3a\u8be5\u9886\u57df\u63d0\u4f9b\u6709\u4ef7\u503c\u89c2\u5bdf\u65b9\u5411\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u73b0\u6709\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u5728\u5904\u7406\u8d85\u8d8a\u7c7b\u522b\u5c42\u9762\u7684\u6570\u636e\u504f\u5dee\u65f6\u6548\u679c\u4e0d\u4f73\u3002\n    - \u73b0\u6709\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\u4e3b\u8981\u5173\u6ce8\u7279\u5b9a\u7c7b\u578b\u6270\u52a8\uff0c\u5b58\u5728\u5c40\u9650\u6027\uff0c\u4e14\u5728\u8f93\u5165\u7a7a\u95f4\u751f\u6210\u5bf9\u6297\u6270\u52a8\u8017\u65f6\u3002\n    - \u4e0d\u540c\u7279\u5f81\u52a0\u6743\u65b9\u6cd5\u5b58\u5728\u8fc7\u62df\u5408\u6216\u5ffd\u7565\u76f8\u4e92\u4f5c\u7528\u7b49\u95ee\u9898\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u7ee7\u7eed\u63a2\u7d22\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u548c\u6570\u636e\u4f9d\u8d56\u3001\u589e\u5f3a\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u80fd\u529b\u7684\u65b9\u6cd5\u3002\n    - \u7814\u7a76\u66f4\u6709\u6548\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u4ee5\u5904\u7406\u590d\u6742\u7684\u6570\u636e\u504f\u5dee\u95ee\u9898\u3002\n    - \u6539\u8fdb\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\uff0c\u514b\u670d\u73b0\u6709\u5c40\u9650\u6027\uff0c\u63d0\u9ad8\u751f\u6210\u6270\u52a8\u7684\u6548\u7387\u3002\n    - \u6df1\u5165\u7814\u7a76\u901a\u8fc7\u53cd\u9988\u5b9e\u73b0\u9002\u5e94\u6027\u6743\u91cd\u5206\u914d\u548c\u6539\u8fdb\u7684\u7279\u5f81\u52a0\u6743\u65b9\u6cd5\u3002\n    - \u57fa\u4e8e\u5bf9\u6a21\u578b\u5185\u90e8\u5c5e\u6027\u548c\u529f\u80fd\u7684\u63a2\u7d22\uff0c\u5f00\u5c55\u6a21\u578b\u538b\u7f29\u7814\u7a76\uff0c\u5f00\u53d1\u66f4\u8f7b\u91cf\u7ea7\u4e14\u6709\u6548\u7684\u65b9\u6cd5\u3002\n    - \u8fdb\u4e00\u6b65\u7814\u7a76\u57fa\u4e8eCLIP\u7684\u5c11\u6837\u672cTBPS \u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u4e2d\u7684\u6a21\u578b\u76f8\u5173\u95ee\u9898\u3001\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u7279\u5f81\u52a0\u6743\u4e0eTransformer\u5e94\u7528\u4ee5\u53ca\u7814\u7a76\u7684\u7ecf\u9a8c\u603b\u7ed3\u4e0e\u672a\u6765\u65b9\u5411\u5c55\u5f00\uff0c\u4e0e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u76f8\u5173\u6b65\u9aa4\u6709\u4e00\u5b9a\u7684\u5173\u8054\uff0c\u6d89\u53ca\u5230\u7b97\u6cd5\u4f18\u5316\u3001\u6a21\u578b\u673a\u5236\u4ee5\u53ca\u7814\u7a76\u65b9\u5411\u63a2\u7d22\u7b49\u65b9\u9762\u3002\u4ee5\u4e0b\u662f\u6309\u7167\u4e0d\u540c\u4e3b\u9898\u8fdb\u884c\u7684\u603b\u7ed3\uff1a\n1. **\u7814\u7a76\u65b9\u5411\u4e0e\u6311\u6218\u8bc4\u4f30**\uff1a\u63a2\u8ba8\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u548c\u6570\u636e\u4f9d\u8d56\u3001\u589e\u5f3a\u591a\u6a21\u6001\u6570\u636e\u878d\u5408\u80fd\u529b\u7b49\u65b0\u7814\u7a76\u95ee\u9898\u4e0b\uff0c\u4ece\u6539\u8fdb\u6a21\u578b\u67b6\u6784\u3001\u4f18\u5316\u8bad\u7ec3\u7b97\u6cd5\u3001\u63a2\u7d22\u65b0\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u7b49\u5207\u5165\u70b9\u51fa\u53d1\uff0c\u6709\u54ea\u4e9b\u5df2\u53d6\u5f97\u8fdb\u5c55\u7684\u5177\u4f53\u6280\u672f\u6216\u65b9\u6cd5\u5b9e\u4f8b\u3002\n2. **\u6570\u636e\u589e\u5f3a\u65b9\u6cd5**\n    - **\u663e\u5f0f\u4e0e\u9690\u5f0f\u6570\u636e\u589e\u5f3a**\uff1a\u663e\u5f0f\u6570\u636e\u589e\u5f3a\u5c06\u589e\u5f3a\u6570\u636e\u76f4\u63a5\u7eb3\u5165\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u4f46\u8bad\u7ec3\u6548\u7387\u964d\u4f4e\uff1b\u9690\u5f0f\u8bed\u4e49\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff08\u5982ISDA\uff09\u5728\u8bed\u4e49\u7a7a\u95f4\u4e2d\u8f6c\u6362\u6837\u672c\u6df1\u5ea6\u7279\u5f81\uff0c\u4f46\u5904\u7406\u7c7b\u522b\u5c42\u9762\u4ee5\u5916\u7684\u6570\u636e\u504f\u5dee\u65f6\u4ecd\u6709\u56f0\u96be\u3002\n    - **\u5bf9\u6297\u4e0e\u53cd\u5bf9\u6297\u6270\u52a8**\uff1a\u901a\u8fc7\u5411\u51b3\u7b56\u8fb9\u754c\u79fb\u52a8\u548c\u8fdc\u79bb\u51b3\u7b56\u8fb9\u754c\u7684\u65b9\u5411\u53d8\u6362\u6837\u672c\uff0c\u8c03\u6574\u6837\u672c\u5b66\u4e60\u96be\u5ea6\uff0c\u5e2e\u52a9\u6a21\u578b\u5728\u9c81\u68d2\u6027\u548c\u6cdb\u5316\u6027\u4e4b\u95f4\u53d6\u5f97\u66f4\u597d\u5e73\u8861\uff0c\u4f46\u73b0\u6709\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\uff0c\u4e14\u5728\u8f93\u5165\u7a7a\u95f4\u751f\u6210\u5bf9\u6297\u6270\u52a8\u8017\u65f6\u3002\u65b0\u65b9\u6cd5\u5728\u6df1\u5ea6\u7279\u5f81\u7a7a\u95f4\u751f\u6210\u6270\u52a8\uff0c\u63d0\u9ad8\u6548\u7387\u5e76\u786e\u4fdd\u901a\u7528\u6027\u3002\n3. **\u7279\u5f81\u52a0\u6743\u4e0eTransformer\u5e94\u7528**\n    - **\u7279\u5f81\u52a0\u6743\u65b9\u6cd5**\uff1a\u7279\u5f81\u52a0\u6743\u5bf9\u63d0\u5347\u673a\u5668\u5b66\u4e60\u6027\u80fd\u5f88\u91cd\u8981\uff0c\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u4f46\u5b58\u5728\u8fc7\u62df\u5408\u6216\u5ffd\u7565\u7279\u5f81\u4ea4\u4e92\u7b49\u95ee\u9898\uff0c\u65b0\u7814\u7a76\u805a\u7126\u4e8e\u901a\u8fc7\u53cd\u9988\u5b9e\u73b0\u81ea\u9002\u5e94\u6743\u91cd\u5206\u914d\u548c\u6539\u8fdb\u3002\n    - **Transformer\u67b6\u6784**\uff1aTransformer\u67b6\u6784\u5229\u7528\u81ea\u6ce8\u610f\u529b\u673a\u5236\u6355\u83b7\u8f93\u5165\u6570\u636e\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5728\u591a\u4e2a\u9886\u57df\u5e26\u6765\u7a81\u7834\uff0c\u5982BERT\u3001GPT - 2\u3001GPT - 3\u7b49\u6a21\u578b\u3002\n    - **TFWT\u65b9\u6cd5**\uff1a\u63d0\u51fa\u7528\u4e8e\u8868\u683c\u6570\u636e\u7684TFWT\u65b9\u6cd5\uff0c\u901a\u8fc7\u7ed3\u5408\u6ce8\u610f\u529b\u673a\u5236\u6355\u83b7\u7279\u5f81\u95f4\u5173\u7cfb\u548c\u4ea4\u4e92\uff0c\u63d0\u9ad8\u4e0b\u6e38\u4efb\u52a1\u6027\u80fd\u3002\u8be5\u65b9\u6cd5\u5305\u62ec\u7279\u5f81\u5bf9\u9f50\uff08\u5c06\u79bb\u6563\u548c\u8fde\u7eed\u7279\u5f81\u8f6c\u6362\u4e3a\u6570\u503c\u5411\u91cf\uff09\u3001\u7279\u5f81\u52a0\u6743\uff08\u901a\u8fc7Transformer\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u83b7\u53d6\u7279\u5f81\u6743\u91cd\uff09\u548c\u5fae\u8c03\uff08\u57fa\u4e8e\u4e0b\u6e38\u4efb\u52a1\u53cd\u9988\u7684\u5f3a\u5316\u5b66\u4e60\u7b56\u7565\u5fae\u8c03\u7279\u5f81\u6743\u91cd\uff09\u4e09\u4e2a\u7ec4\u4ef6\u3002\n4. **\u7814\u7a76\u7684\u7ecf\u9a8c\u603b\u7ed3\u4e0e\u672a\u6765\u65b9\u5411**\n    - **\u8bad\u7ec3\u6280\u5de7\u7684\u4f5c\u7528**\uff1aCLIP\u7ed3\u5408\u56db\u4e2a\u8bad\u7ec3\u6280\u5de7\u53ef\u4f7fRank - 1\u6027\u80fd\u63d0\u5347\u7ea64%\uff0c\u4e3a\u672a\u6765\u901a\u8fc7\u5e94\u7528\u8bad\u7ec3\u6280\u5de7\u63d0\u5347\u6a21\u578b\u6027\u80fd\u63d0\u4f9b\u601d\u8def\u3002\n    - **\u6570\u636e\u589e\u5f3a\u548c\u635f\u5931\u51fd\u6570\u7684\u7814\u7a76**\uff1a\u5bf920\u591a\u79cd\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u548c\u7ea610\u79cd\u635f\u5931\u51fd\u6570\u7684\u6027\u80fd\u7814\u7a76\u4e3a\u672a\u6765\u9009\u62e9\u5408\u9002\u6709\u6548\u7684\u65b9\u6cd5\u6539\u8fdb\u6a21\u578b\u6027\u80fd\u63d0\u4f9b\u6307\u5bfc\u3002\n    - **\u6a21\u578b\u5185\u90e8\u7279\u6027\u7684\u63a2\u7d22**\uff1a\u9996\u6b21\u63a2\u7d22\u6a21\u578b\u5185\u90e8\u7279\u6027\u548c\u529f\u80fd\uff0c\u4e3a\u672a\u6765\u6a21\u578b\u538b\u7f29\u7814\u7a76\u63d0\u4f9b\u542f\u793a\uff0c\u4ee5\u5f00\u53d1\u66f4\u8f7b\u91cf\u7ea7\u4e14\u6709\u6548\u7684TBPS\u65b9\u6cd5\u3002\n    - **\u5c11\u6837\u672cTBPS\u7684\u7814\u7a76**\uff1a\u76ee\u524d\u5173\u4e8e\u5c11\u6837\u672cTBPS\u7684\u7814\u7a76\u8f83\u5c11\uff0c\u672c\u6587\u5bf9\u57fa\u4e8eCLIP\u7684\u5c11\u6837\u672cTBPS\u8fdb\u884c\u4e86\u521d\u6b65\u7814\u7a76\uff0c\u4e3a\u672a\u6765\u7814\u7a76\u65b9\u5411\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u89c2\u5bdf\u3002  ", "dreams_personality_context": "\u4ece\u8fd9\u6bb5\u5185\u5bb9\u96be\u4ee5\u76f4\u63a5\u603b\u7ed3\u51fa\u4eba\u7269\u6027\u683c\u3002\u4f46\u5982\u679c\u4e00\u5b9a\u8981\u5206\u6790\uff0c\u53ef\u80fd\u4f53\u73b0\u51fa\u4ee5\u4e0b\u6027\u683c\u7279\u70b9\uff1a\n1. **\u5177\u6709\u63a2\u7d22\u7cbe\u795e**\uff1a\u79ef\u6781\u5173\u6ce8\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\u65b0\u7684\u7814\u7a76\u95ee\u9898\uff0c\u5982\u63d0\u5347\u6a21\u578b\u53ef\u89e3\u91ca\u6027\u3001\u89e3\u51b3\u6a21\u578b\u504f\u5dee\u7b49\uff0c\u4e0d\u65ad\u63a2\u7d22\u65b0\u7684\u7814\u7a76\u65b9\u5411\u548c\u5207\u5165\u70b9\uff0c\u5c55\u73b0\u51fa\u5bf9\u672a\u77e5\u9886\u57df\u7684\u5f3a\u70c8\u597d\u5947\u5fc3\u548c\u52c7\u4e8e\u63a2\u7d22\u7684\u7cbe\u795e\u3002\n2. **\u4e25\u8c28\u7ec6\u81f4**\uff1a\u5728\u7814\u7a76\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u7279\u5f81\u52a0\u6743\u7b49\u5185\u5bb9\u65f6\uff0c\u5bf9\u5404\u79cd\u65b9\u6cd5\u7684\u4f18\u7f3a\u70b9\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\uff0c\u5982\u663e\u5f0f\u4e0e\u9690\u5f0f\u6570\u636e\u589e\u5f3a\u7684\u4e0d\u540c\u6548\u679c\u3001\u73b0\u6709\u7279\u5f81\u52a0\u6743\u65b9\u6cd5\u5b58\u5728\u7684\u8fc7\u62df\u5408\u7b49\u95ee\u9898\uff0c\u4f53\u73b0\u51fa\u4e25\u8c28\u7ec6\u81f4\u7684\u6cbb\u5b66\u6001\u5ea6\u3002\n3. **\u521b\u65b0\u8fdb\u53d6**\uff1a\u9762\u5bf9\u73b0\u6709\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u5982\u5bf9\u6297\u8bad\u7ec3\u65b9\u6cd5\u7684\u4e0d\u8db3\uff0c\u79ef\u6781\u63d0\u51fa\u65b0\u7684\u65b9\u6cd5\u548c\u601d\u8def\uff0c\u50cf\u5728\u6df1\u5ea6\u7279\u5f81\u7a7a\u95f4\u751f\u6210\u6270\u52a8\u3001\u63d0\u51faTFWT\u65b9\u6cd5\u7b49\uff0c\u5c55\u73b0\u51fa\u521b\u65b0\u8fdb\u53d6\u7684\u6027\u683c\u7279\u8d28\uff0c\u4e0d\u6ee1\u8db3\u4e8e\u73b0\u72b6\uff0c\u52aa\u529b\u63a8\u52a8\u7814\u7a76\u5411\u524d\u53d1\u5c55\u3002\n4. **\u5584\u4e8e\u603b\u7ed3\u5f52\u7eb3**\uff1a\u5bf9\u7814\u7a76\u8fc7\u7a0b\u4e2d\u7684\u7ecf\u9a8c\u8fdb\u884c\u603b\u7ed3\uff0c\u5982CLIP\u7ed3\u5408\u8bad\u7ec3\u6280\u5de7\u63d0\u5347\u6027\u80fd\u3001\u5bf9\u591a\u79cd\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u548c\u635f\u5931\u51fd\u6570\u7684\u6027\u80fd\u7814\u7a76\u7b49\uff0c\u4e3a\u672a\u6765\u7814\u7a76\u63d0\u4f9b\u6307\u5bfc\uff0c\u53cd\u6620\u51fa\u5584\u4e8e\u603b\u7ed3\u5f52\u7eb3\u3001\u4ece\u5b9e\u8df5\u4e2d\u6c72\u53d6\u7ecf\u9a8c\u7684\u6027\u683c\u7279\u70b9 \u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["bfd0b9ed-bade-414c-84f7-7fd76ef59da1"], "metadata": {}}}, "analysis_store/metadata": {"bfd0b9ed-bade-414c-84f7-7fd76ef59da1": {"analysis_hash": "", "ref_analysis_id": ""}}}