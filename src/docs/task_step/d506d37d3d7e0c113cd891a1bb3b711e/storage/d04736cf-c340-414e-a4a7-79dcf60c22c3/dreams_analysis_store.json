{"analysis_store/data": {"12c1fd96-fa01-41ad-8a70-aad9607ee8d4": {"__data__": {"id_": "12c1fd96-fa01-41ad-8a70-aad9607ee8d4", "metadata": {}, "relationships": {}, "hash": "", "story_scenario_context": "### \u7b2c\u4e00\u6b65\uff1a\u63d0\u53d6\u5173\u952e\u4fe1\u606f\n1. **\u7814\u7a76\u65b9\u5411\u76f8\u5173**\uff1a\u793e\u4ea4\u5a92\u4f53\u4e2d\u7684\u7231\u60c5\u8868\u73b0\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u5728\u7535\u89c6\u7535\u5f71\u4e2d\u7684\u5e94\u7528\u3001\u6df1\u5165\u7814\u7a76\u5362\u66fc\u7406\u8bba\u53ca\u5176\u5728\u793e\u4f1a\u5b66\u7814\u7a76\u4e2d\u7684\u6f5c\u5728\u5e94\u7528\u3001\u63a2\u8ba8\u5362\u66fc\u7406\u8bba\u548c\u793e\u4f1a\u5b66\u7684\u4ea4\u53c9\u70b9\u3002\n2. **\u5173\u8054\u5173\u7cfb\u76f8\u5173**\uff1a\u7814\u7a76\u4e0e\u793e\u4f1a\u5b66\u7814\u7a76\u60c5\u611f\u56e0\u7d20\u5bc6\u5207\u76f8\u5173\u3001\u8ba8\u8bba\u4e0e\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u6709\u5173\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u5bc6\u5207\u76f8\u8054\u3001\u5362\u66fc\u7406\u8bba\u4e0e\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u7684\u63a5\u8fd1\u5ea6\u3001\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4f1a\u5b66\u89c2\u70b9\u76f8\u4ea4\u3001\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u4e0e\u5362\u66fc\u7406\u8bba\u5b58\u5728\u91cd\u53e0\u3002\n\n### \u7b2c\u4e8c\u6b65\uff1a\u603b\u7ed3\u7a81\u51fa\u7279\u70b9\n1. **\u7814\u7a76\u5efa\u8bae\u591a\u5143**\uff1a\u6db5\u76d6\u793e\u4ea4\u5a92\u4f53\u7231\u60c5\u8868\u73b0\u3001\u5f71\u89c6\u5e94\u7528\u4ee5\u53ca\u7406\u8bba\u6df1\u5165\u7814\u7a76\u7b49\u591a\u4e2a\u65b9\u5411\u3002\n2. **\u5f3a\u8c03\u5173\u8054**\uff1a\u7a81\u51fa\u5362\u66fc\u7231\u60c5\u8bed\u4e49\u5b66\u4e0e\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9\u3001\u793e\u4f1a\u5b66\u7814\u7a76\u4e4b\u95f4\u7684\u7d27\u5bc6\u8054\u7cfb\uff0c\u4ee5\u53ca\u7814\u7a76\u4e0e\u60c5\u611f\u56e0\u7d20\u3001\u5a92\u4f53\u8bed\u4e49\u4fe1\u606f\u7684\u76f8\u5173\u6027\u3002 ", "scene_monologue_context": "\u4eca\u5929\u6211\u4e3b\u8981\u5728\u7814\u7a76\u7b97\u6cd5\u76f8\u5173\u7684\u5185\u5bb9\u3002\u5148\u662f\u6df1\u5165\u5206\u6790\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\uff0c\u601d\u8003\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\uff0c\u90a3\u4e9b\u56e0\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\u9650\u5236\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u7684\u7b97\u6cd5\uff0c\u80fd\u4e0d\u80fd\u901a\u8fc7\u91c7\u7528\u6b63\u5219\u5316\u6280\u672f\u3001\u5bf9\u6297\u8bad\u7ec3\u7b49\u7a33\u5b9a\u6027\u4f18\u5316\u65b9\u6cd5\uff0c\u6765\u63d0\u5347\u5728\u5927\u89c4\u6a21\u6570\u636e\u73af\u5883\u4e0b\u7684\u7a33\u5b9a\u6027\u548c\u9002\u5e94\u6027\u3002  \n\n\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u6211\u9605\u8bfb\u4e86\u5927\u91cf\u6587\u732e\u8d44\u6599\uff0c\u50cf\u5173\u4e8eBatchNorm\u5c42\u5728\u56fe\u50cf\u5206\u7c7b\u5668\u4e2d\u4f5c\u7528\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\u5728\u534f\u540c\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\u3002\u4ece\u76f8\u5173\u7814\u7a76\u91cc\u4e86\u89e3\u5230\uff0c\u4e00\u4e9b\u65b9\u6cd5\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u6027\u80fd\u4e0b\u964d\u7684\u95ee\u9898\uff0c\u6bd4\u5982Xie\u7b49\u4eba\u57282019\u5e74\u7684\u7814\u7a76\u8868\u660e\uff0c\u4f18\u5316\u534f\u540c\u8bad\u7ec3\u635f\u5931\u5728\u67d0\u4e9b\u6761\u4ef6\u4e0b\u5bf9\u5e72\u51c0\u56fe\u50cf\u7684\u6548\u679c\u4e0d\u5982\u7b80\u5355\u7684\u5e38\u89c4\u8bad\u7ec3\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u5bf9\u5404\u79cd\u6a21\u578b\u67b6\u6784\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5e72\u51c0\u51c6\u786e\u7387\u548c\u9c81\u68d2\u51c6\u786e\u7387\u7684\u5206\u6790\uff0c\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u73b0\u8c61\uff0c\u4f8b\u5982\u4f7f\u7528\u5355\u7ec4\u6279\u7edf\u8ba1\u4f46\u9488\u5bf9\u5e72\u51c0\u548c\u5bf9\u6297\u56fe\u50cf\u8bbe\u7f6e\u7279\u5b9a\u7684\u5c3a\u5ea6\u548c\u504f\u79fb\u53c2\u6570\uff0c\u4e5f\u80fd\u53d6\u5f97\u4e0e\u4f7f\u7528\u4e24\u7ec4\u6279\u7edf\u8ba1\u7c7b\u4f3c\u7684\u5206\u7c7b\u6548\u679c\u3002  \n\n\u53e6\u5916\uff0c\u6211\u8fd8\u5173\u6ce8\u5230\u5c06\u5bf9\u6297\u8bad\u7ec3\u4e0e\u9002\u914d\u5668\u7ed3\u5408\u7684\u7814\u7a76\uff0c\u8fd9\u91cc\u628a\u6a21\u578b\u53c2\u6570\u5206\u89e3\u4e3a\u4e0d\u540c\u57df\u5171\u4eab\u7684\u53c2\u6570\u548c\u7279\u5b9a\u57df\u7684\u53c2\u6570\uff0c\u5e76\u57fa\u4e8e\u6b64\u4f18\u5316\u635f\u5931\u51fd\u6570\u3002\u800c\u4e14\u8fd8\u63a2\u8ba8\u4e86\u6a21\u578b\u878d\u5408\u7684\u6982\u5ff5\uff0c\u63d0\u51fa\u4e86\u5bf9\u6297\u6a21\u578b\u878d\u5408\u7684\u5047\u8bbe\uff0c\u8ba4\u4e3a\u901a\u8fc7\u9002\u914d\u5668\u8bad\u7ec3\u53ef\u80fd\u5b9e\u73b0\u6a21\u578b\u878d\u5408\uff0c\u4e0d\u8fc7\u540e\u7eed\u7684\u8bc4\u4f30\u663e\u793a\uff0c\u5728\u72ec\u7acb\u7684\u5e38\u89c4\u6a21\u578b\u548c\u9c81\u68d2\u6a21\u578b\u4e4b\u95f4\u8fdb\u884c\u6a21\u578b\u878d\u5408\u662f\u5931\u8d25\u7684\u3002  \n\n\u5728\u5b9e\u9a8c\u65b9\u9762\uff0c\u6211\u53c2\u4e0e\u4e86\u5bf9\u7b97\u6cd5\u6027\u80fd\u8bc4\u4f30\u7684\u5b9e\u9a8c\u3002\u4e3a\u4e86\u516c\u5e73\u5730\u5c06\u6211\u4eec\u7684\u65b9\u6cd5\u4e0e\u57fa\u7ebf\u65b9\u6cd5\u8fdb\u884c\u6bd4\u8f83\uff0c\u5728\u7ed9\u5b9a\u6570\u636e\u96c6\u4e0a\u5bf9\u6240\u6709\u65b9\u6cd5\u4f7f\u7528\u76f8\u540c\u7684\u8d85\u53c2\u6570\u96c6\u3002\u5728GLUE\u57fa\u51c6\u6d4b\u8bd5\u548cLong Range Arena\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u89c2\u5bdf\u5230\u968f\u7740\u52a0\u901f\u6bd4\u589e\u52a0\u6216\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\uff0c\u6211\u4eec\u7684Coreset-select-opt\u65b9\u6cd5\u4e0e\u7ade\u4e89\u5bf9\u624b\u4e4b\u95f4\u7684\u5dee\u8ddd\u9010\u6e10\u589e\u5927\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8868\u73b0\u51fa\u660e\u663e\u4f18\u52bf\u3002  \n\n\u540c\u65f6\uff0c\u6211\u8fd8\u53c2\u4e0e\u4e86\u5173\u4e8e\u653b\u51fb\u9632\u5fa1\u6a21\u578b\u7684\u5b9e\u9a8c\u3002\u5728\u7279\u5b9a\u7684\u786c\u4ef6\u73af\u5883\u4e0b\uff0c\u4f7f\u7528SecML\u5e93\u5bf9\u56db\u79cd\u88ab\u62a5\u9053\u4e3a\u5931\u8d25\u7684\u9632\u5fa1\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\u5b9e\u9a8c\u3002\u9488\u5bf9\u4e0d\u540c\u7684\u9632\u5fa1\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u653b\u51fb\u8d85\u53c2\u6570\uff0c\u6536\u96c6\u7c7b\u4f3c\u7ed3\u679c\u3002\u901a\u8fc7\u5b9e\u9a8c\u53d1\u73b0\uff0c\u6211\u4eec\u63d0\u51fa\u7684\u6307\u6807\u4e0e\u9632\u5fa1\u7684\u5b89\u5168\u8bc4\u4f30\u6545\u969c\u5b58\u5728\u76f8\u5173\u6027\uff0c\u8f83\u9ad8\u7684\u9c81\u68d2\u51c6\u786e\u7387\u5f80\u5f80\u4e0e\u68c0\u6d4b\u5230\u7684\u6545\u969c\u76f8\u5173\u8054\u3002\u5e76\u4e14\u5229\u7528\u8fd9\u4e9b\u6307\u6807\u6539\u8fdb\u5b89\u5168\u8bc4\u4f30\u8d28\u91cf\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5982\u6309\u7167\u539f\u9632\u5fa1\u4f5c\u8005\u7684\u653b\u51fb\u7b56\u7565\u6d4b\u8bd5\u9632\u5fa1\u3001\u9009\u62e9\u5931\u8d25\u6848\u4f8b\u5e76\u68c0\u67e5\u6307\u6807\u53cd\u9988\u3001\u5e94\u7528\u6307\u6807\u5efa\u8bae\u7684\u8865\u6551\u63aa\u65bd\u7b49\uff0c\u6210\u529f\u964d\u4f4e\u4e86\u76ee\u6807\u6a21\u578b\u7684\u9c81\u68d2\u51c6\u786e\u7387\u548c\u6307\u6807\u503c\u3002  ", "user_id": "\u6b64\u6765\u8bbf\u8005", "scene_content": "\u89d2\u8272    \u5185\u5bb9    \u5206\u955c\n", "story_board_summary_context": "d04736cf-c340-414e-a4a7-79dcf60c22c3:\u300c\u5206\u6790\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u300d\nd04736cf-c340-414e-a4a7-79dcf60c22c3:\u300c\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\uff0c\u90a3\u4e9b\u9762\u4e34\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\u9650\u5236\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u7684\u7b97\u6cd5\uff0c\u662f\u5426\u53ef\u4ee5\u501f\u9274\u91c7\u7528\u6b63\u5219\u5316\u6280\u672f\u3001\u5bf9\u6297\u8bad\u7ec3\u7b49\u7a33\u5b9a\u6027\u4f18\u5316\u65b9\u6cd5\u6765\u63d0\u5347\u5728\u5927\u89c4\u6a21\u6570\u636e\u73af\u5883\u4e0b\u7684\u7a33\u5b9a\u6027\u548c\u9002\u5e94\u6027\uff1f \u300d\nd04736cf-c340-414e-a4a7-79dcf60c22c3:\u300cref_ids: 454848769189392150, chunk_ids: 4, Score: 0.1855, Text: # 3.2 SEPARATING BATCH STATISTICS IS NOT NECESSARY\nBatchNorm is a widely used normalization layer shown to improve performance and training stability of image classifiers ( Ioffe & Szegedy ,2015 ). We recall that a BatchNorm layer, given a batch as input, first normalizes it by subtracting the mean and dividing by the standard deviation computed over the entire batch, then it applies an affine transformation, with learnable scale and offset parameters. During training, it accumulates these so-called batch statistics to use during test time, so that the output of the classifier for each image is independent of the other images in the batch. The batch statistics can be seen an approximation of the statistics over the image distribution.  \n\nXie et al. (2019a ) show that optimizing the co-training loss in Eq. 1 can yield worse results on clean images than simple nominal training. This is especially the case when the network has a low capacity or the attack (i.e., the inner maximization) is too strong (such as using a large perturbation radius $\\\\epsilon$ ). To solve this issue, they propose AdvProp, which consists in using distinct BatchNorm layers for clean and adversarial images. They argue that \u201cmaintaining one set of [BatchNorm] statistics results in incorrect statistics estimation\u201d , which could be the reason for the performance degradation. We note that using two sets of BatchNorm layers for the clean and adversarial samples as in AdvProp creates two sets of batch statistics but also two sets of learnable scale and offset parameters. In the following we investigate whether having separate batch statistics is a necessary condition for successful co-training.  \n\n  \nFigure 2: Dual parameters are enough. We report the clean (solid lines) and robust accuracy (dashed lines) over training steps of R ES NET -50 trained on I MAGE NET with the co-training loss of Eq. 1 $(\\\\epsilon=4/255)$ : for models with dual layers. Clean accuracy refers to the clean mode and the robust accuracy to the robust mode .Left panel. We compare models with different normalization layers with no domain-specific parameters (Shared BatchNorm, Shared LayerNorm, Shared GroupNorm) to Dual BatchNorm as proposed by Xie et al. (2019a ): regardless of the type of normalization, the robustness of classifiers without dual layers drops to (almost) zero at the end of training. Right panel. We use domain-specific normalization layers (Dual BatchNorm, Dual LayerNorm, Dual GroupNorm) and a model with BatchNorm with shared batch statistics but domain-specific scale and offset (DualParams BatchNorm): all models achieve high clean and robust accuracy.  \n\nFigure 2 shows the clean and robust accuracy of various model architectures as training progresses. The left panel demonstrates that, if we share both batch statistics and scales/offsets (Shared BatchNorm, orange curves), the robust accuracy (orange dashed line) quickly drops, far from the one obtained by AdvProp (Dual BatchNorm, blue curve) which is above $34\\\\%$ . However, if we use a single set of batch statistics but specific scales and offsets for clean and adversarial images, we can observe on the right panel of Figure 2 that the robust accuracy (DualParams BatchNorm, orange dashed line) matches the one (blue dashed line) obtained by AdvProp. This demonstrates that it is possible to achieve nominal and robust classification results similar to those of AdvProp without separate batch statistics.  \n\nFurthermore, there exist normalization layers such as LayerNorm ( Ba et al. ,2016 ) or GroupNorm (Wu & He ,2018 ) which do not use batch statistics, as their normalization step is done per sample and not per batch. Hence, according to the hypothesis of Xie et al. (2019a ), these types of normalization layer should not suffer from performance degradation. Nevertheless, the left panel of Figure 2 shows that their robust accuracy (green and red dashed lines) does not match the robust accuracy of AdvProp (Dual BatchNorm), and is unstable over training steps. However, by making the scales and offsets of LayerNorm and GroupNorm specific to clean and adversarial images, their robust accuracy matches that obtained with dual BatchNorm layers, as shown in the right panel of Figure 2 . This suggests that a key element to make the co-training loss of Eq. 1 work for various normalization layers is to have trainable parameters which are specific to the clean and adversarial images.\n\n# 3.3 REVISITING ADAPTERS WITH ADVERSARIAL TRAINING\nThe last observation strongly relates this setting to the adapters literature where a single backbone architecture has some parameters, called adapters, which are specific to different domains while the rest of the parameters are shared among tasks. In our case, the clean images form one domain and the adversarial images constitute another domain. In this work, we go beyond having separate normalization layers for the clean and adversarial images and investigate other types of adapters.  \n\nFormally, the model parameters $\\\\pmb{\\\\theta}$ can be decomposed into parameters $\\\\psi$ which are shared among domains and parameters $\\\\phi$ which are specific to a domain. We call $\\\\phi_{\\\\mathrm{clean}}$ the parameters used when training on clean images and $\\\\phi_{\\\\mathrm{adv}}$ the parameters used when training on adversarial images. For example, in Section 3.2 , when we used dual LayerNorm layers, the scales and offsets of these normalization layers are contained in $\\\\phi_{\\\\mathrm{clean}}$ and $\\\\phi_{\\\\mathrm{adv}}$ whereas the rest of the model parameters are in $\\\\psi$ . Based on Eq. 1 , we optimize the following loss:  \n\n$$\n\\\\alpha L(f(\\\\pmb{x};\\\\psi\\\\cup\\\\phi_{\\\\mathrm{clean}}),y)+(1-\\\\alpha)\\\\operatorname*{max}_{\\\\pmb{\\\\delta\\\\in\\\\mathbb{S}}}L(f(\\\\pmb{x}+\\\\pmb{\\\\delta};\\\\psi\\\\cup\\\\phi_{\\\\mathrm{adv}}),y).\n$$  \n\nFinally, we introduce some notation for models with a s at inference time: we call $f(\\\\cdot;\\\\psi\\\\cup\\\\phi_{\\\\mathrm{clean}})$ the clean mode for prediction as we use the adapters $\\\\phi_{\\\\mathrm{clean}}$ trained on the clean data. Conversely, we call $f(\\\\cdot;\\\\psi\\\\cup\\\\phi_{\\\\mathrm{adv}})$ the robust mode when using the adapters $\\\\phi_{\\\\mathrm{adv}}$ trained on the perturbed data.  \n\nWortsman et al. (2022 ) propose model soups , which consist in averaging the weights of multiple models fine-tuned from the same pre-trained model. The resulting weight averaged model can benefit from the original models without incurring any extra compute and memory cost at inference time. Currently, in our setting the user would have to know at test time if the network should be in clean or robust mode . A model soup , by its ability to merge models, is a way to bypass this issue. We formulate the hypothesis that training with adapters enables model soups . With this in mind, we observe that training with adapters means that most of the model parameters are already shared, so model souping would simply consist in linearly interpolating the weights of the adapters for the two modes. We call adversarial model soups , the model soups with a model co-trained on clean and adversarial samples. We get the following parametrized model:  \n\n$$\nf(\\\\cdot;\\\\psi\\\\cup(\\\\beta\\\\phi_{\\\\mathrm{clean}}+(1-\\\\beta)\\\\phi_{\\\\mathrm{adv}}))\n$$  \n\nwhere $\\\\beta$ is the weighting factor when averaging the adapters. If $\\\\beta=1$ , the model soup boils down to the clean mode and conversely $\\\\beta=0$ corresponds to the robust mode . In Section 5.2 , we assess this hypothesis and show that forming model soups between independent nominal and robust models fails.\u300d\nd04736cf-c340-414e-a4a7-79dcf60c22c3:\u300cref_ids: 454895453635358570, chunk_ids: 6, Score: 0.1680, Text: # 6.2 Implementation\nTo fairly evaluate our method against the baselines, we use the same set of hyperparameters for all the methods, for a given dataset. For details, see Appendix D. The code for Pyramid-BERT is made available as a supplementary material with the submission. The training and inference jobs are run separately on a NVIDIA Tesla V 100 GPU machine and a Intel Xeon Platinum 8000 series CPU machine respectively. All the accuracy and speedup scores are averaged over 20 trials.\n\n# 6.3 Results on GLUE benchmarks\nWe first examine the trade-off between accuracy and speedup. The accuracy results for $3X$ and $1.5X$ speedup are summarized in Table 1 and 2 respectively. The results for $3.5X$ and $2X$ speedup are given in the Table 11 and 13 in Appendix E.We observe that as the speedup increases the gap between our Coreset-select-opt and its competitors becomes large, where for $3X$ speedup, Coreset-select-opt outperforms the second best method Attention-select by $1\\\\%$ accuracy in average and beats the standard baselines by $2\\\\%$ or more. The Average-pool performs the worst in average across the GLUE benchmarks, specially on the COLA dataset. For detailed justification, see Appendix E. To better understand the performance of Coreset-select-opt with different values of $m$ ,an ablation study is shown in Section 7 . For mild speedup of $1.5X$ , we note that all methods (except Average-pool ) suffer only a small loss in accuracy and our method suffers no loss. A similar situation occurs when viewing the tradeoff between space complexity and accuracy, where we provide results for a memory reduction of $70\\\\%$ and $30\\\\%$ in the Tables 3 and 16 (in $\\\\S\\\\mathrm{~E~}$ ).\n\n# 6.4 Results on Long Range Arena\nWe show results on the following three datasets of LRA benchmark: (1) byte-level text classification using real-world data (IMDB), (2) Pathfinder task (long range spatial dependency problem), and (3) image classification on sequences of pixels converted from CIFAR-10.  \n\n<html><body><table><tr><td>Dataset</td><td>1st-I</td><td>1st</td><td>Rand</td><td>Pool</td><td>Att</td><td>CS-k-1</td><td>CS-opt</td><td>BERTBase</td></tr><tr><td>STS-B</td><td>86.4</td><td>86.4</td><td>86.8</td><td>81.6</td><td>87.0</td><td>87.0</td><td>87.0</td><td>87.9</td></tr><tr><td>MRPC</td><td>81.4</td><td>80.9</td><td>83.2</td><td>83.9</td><td>84.6</td><td>86.2</td><td>86.9</td><td>87.3</td></tr><tr><td>SST-2</td><td>83.8</td><td>84.4</td><td>85.6</td><td>85.2</td><td>86.0</td><td>87.3</td><td>89.6</td><td>92.4</td></tr><tr><td>QNLI</td><td>84.8</td><td>84.4</td><td>86.4</td><td>84.1</td><td>86.8</td><td>87.8</td><td>87.8</td><td>90.9</td></tr><tr><td>COLA</td><td>49.7</td><td>49.7</td><td>49.5</td><td>3.0</td><td>51.1</td><td>51.7</td><td>52.8</td><td>53.3</td></tr><tr><td>RTE</td><td>63.5</td><td>63.5</td><td>62.1</td><td>59.2</td><td>63.4</td><td>63.7</td><td>63.7</td><td>65.8</td></tr><tr><td>MNLI_M</td><td>77.8</td><td>76.7</td><td>81.4</td><td>75.4</td><td>82.5</td><td>82.4</td><td>82.5</td><td>84.0</td></tr><tr><td>MNLI_MM</td><td>75.9</td><td>75.6</td><td>78.7</td><td>76.7</td><td>82.7</td><td>82.6</td><td>82.7</td><td>84.6</td></tr><tr><td>QQP</td><td>80.8</td><td>80.4</td><td>87.0</td><td>79.4</td><td>87.3</td><td>87.3</td><td>87.3</td><td>87.5</td></tr><tr><td>Mean</td><td>76.0</td><td>76.1</td><td>77.9</td><td>69.6</td><td>79.0</td><td>79.6</td><td>80.0</td><td>81.5</td></tr></table></body></html>  \n\nTable 1: GLUE dev performance at $3X$ speedup. Here and everywhere else, F 1 scores are reported for QQP and MRPC, Spearman correlations are reported for STS-B, Matthew\u2019s correlations are reported for COLA, and accuracy scores are reported for the other tasks. Each value is averaged over 20 trials. Larger values indicates better performance.   \nTable 2: GLUE dev performance at $1.5X$ speedup.   \n\n\n<html><body><table><tr><td>Dataset</td><td>1st-I</td><td>1st</td><td>Rand</td><td>Pool</td><td>Att</td><td>CS-k-1</td><td>CS-opt</td><td>BERTBase</td></tr><tr><td>STS-B</td><td>87.9</td><td>87.9</td><td>87.8</td><td>87.8</td><td>87.9</td><td>87.7</td><td>87.9</td><td>87.9</td></tr><tr><td>MRPC</td><td>86.8</td><td>86.4</td><td>87.2</td><td>87.0</td><td>87.1</td><td>86.9</td><td>87.3</td><td>87.3</td></tr><tr><td>SST-2</td><td>92.1</td><td>91.5</td><td>91.9</td><td>90.3</td><td>92.3</td><td>92.4</td><td>92.4</td><td>92.4</td></tr><tr><td>QNLI</td><td>90.8</td><td>90.8</td><td>90.8</td><td>90.2</td><td>90.7</td><td>90.9</td><td>90.9</td><td>90.9</td></tr><tr><td>COLA</td><td>53.0</td><td>52.7</td><td>53.1</td><td>25.6</td><td>53.2</td><td>53.3</td><td>53.3</td><td>53.3</td></tr><tr><td>RTE</td><td>65.6</td><td>65.2</td><td>65.7</td><td>61.5</td><td>65.7</td><td>65.4</td><td>65.6</td><td>65.8</td></tr><tr><td>MNLI_M</td><td>84.0</td><td>83.8</td><td>83.9</td><td>80.9</td><td>84.0</td><td>84.0</td><td>84.0</td><td>84.0</td></tr><tr><td>MNLI_MM</td><td>84.1</td><td>84.0</td><td>83.9</td><td>84.0</td><td>84.5</td><td>84.6</td><td>84.6</td><td>84.6</td></tr><tr><td>QQP</td><td>87.1</td><td>86.9</td><td>87.4</td><td>85.7</td><td>87.4</td><td>87.5</td><td>87.5</td><td>87.5</td></tr><tr><td>Mean</td><td>81.3</td><td>81.0</td><td>81.3</td><td>76.8</td><td>81.4</td><td>81.4</td><td>81.5</td><td>81.5</td></tr></table></body></html>  \n\nFor baselines, we include First$.k$ -select and Random-select methods, but fail to include Attention-select .Attention-select requires a full attention matrix for selecting tokens which is not available in Big Bird (Zaheer et al. ,2020 ) and Performers (Choromanski et al. ,2020 ). In addition, the Transformers including Big Bird and Performers in LRA have shallow architectures because of no pre-training: the default number of encoders for text classification, path finder, and image classifi- cation datasets are four, four, and one, respectively. Thus, for both baselines and our method, we only reduce sequence length in the input layer , which is before the first encoder. For the sequence-length configurations, see Appendix C.2 . For Averagepool , due to its worst performance on the GLUE benchmarks and the shallow architectures of the models in LRA, we exclude it from the baselines.  \n\nTable 3: GLUE dev performance at $70\\\\%$ space complexity reduction.   \n\n\n<html><body><table><tr><td>Dataset</td><td>1st-I</td><td>1st</td><td>Rand</td><td>Pool</td><td>Att</td><td>CS-k-1</td><td>CS-opt</td><td>BERTBase</td></tr><tr><td>STS-B</td><td>85.3</td><td>85.1</td><td>85.6</td><td>78.7</td><td>85.4</td><td>86.5</td><td>86.7</td><td>87.9</td></tr><tr><td>MRPC</td><td>81.3</td><td>81.5</td><td>83.3</td><td>83.1</td><td>84.3</td><td>86.0</td><td>86.6</td><td>87.3</td></tr><tr><td>SST-2</td><td>83.3</td><td>84.6</td><td>84.9</td><td>85.1</td><td>87.2</td><td>87.6</td><td>87.7</td><td>92.4</td></tr><tr><td>QNLI</td><td>84.6</td><td>84.3</td><td>85.1</td><td>84.0</td><td>86.4</td><td>86.6</td><td>86.5</td><td>90.9</td></tr><tr><td>COLA</td><td>49.0</td><td>49.0</td><td>48.4</td><td>0.0</td><td>50.9</td><td>51.0</td><td>52.3</td><td>53.3</td></tr><tr><td>RTE</td><td>62.1</td><td>62.0</td><td>61.8</td><td>59.8</td><td>62.7</td><td>63.6</td><td>63.6</td><td>65.8</td></tr><tr><td>MNLI_M</td><td>76.9</td><td>76.3</td><td>79.0</td><td>75.2</td><td>80.5</td><td>80.9</td><td>81.0</td><td>84.0</td></tr><tr><td>MNLI_MM</td><td>74.9</td><td>74.5</td><td>79.3</td><td>76.3</td><td>80.7</td><td>81.6</td><td>81.8</td><td>84.6</td></tr><tr><td>QQP</td><td>80.6</td><td>80.0</td><td>86.6</td><td>82.9</td><td>87.0</td><td>87.2</td><td>87.3</td><td>87.5</td></tr><tr><td>Mean</td><td>75.3</td><td>75.3</td><td>77.1</td><td>69.5</td><td>78.3</td><td>79.0</td><td>79.3</td><td>81.5</td></tr></table></body></html>  \n\nTable 4: LRA test set performances at $70\\\\%$ space complexity reduction for Big Bird (top) and Performers (bottom) as the backbone Transformer. Here and everywhere else, accuracy scores are reported for all three tasks. Each value is averaged over 20 trials. Larger values indicates better performance.   \n\n\n<html><body><table><tr><td colspan=\"6\">BigBird</td></tr><tr><td>Dataset</td><td>1st</td><td>Rand</td><td>CS-k-1</td><td>CS-opt</td><td>Trans.-no-prune</td></tr><tr><td>CIFAR-10</td><td>26.9</td><td>39.4</td><td>38.6</td><td>43.3</td><td>40.9</td></tr><tr><td>PATHFINDER-32</td><td>55.6</td><td>69.9</td><td>69.3</td><td>71.7</td><td>73.5</td></tr><tr><td>IMDB (BYTE-LEVEL)</td><td>57.9</td><td>59.6</td><td>59.1</td><td>61.4</td><td>63.8</td></tr><tr><td>Mean</td><td>46.8</td><td>56.3</td><td>55.7</td><td>58.8</td><td>59.4</td></tr><tr><td colspan=\"6\">Performers</td></tr><tr><td>CIFAR-10</td><td>26.9</td><td>41.5</td><td>39.8</td><td>45.5</td><td>42.9</td></tr><tr><td>PATHFINDER-32</td><td>52.4</td><td>58.2</td><td>61.5</td><td>67.7</td><td>66.2</td></tr><tr><td>IMDB (BYTE-LEVEL)</td><td>59.9</td><td>59.9</td><td>59.7</td><td>62.8</td><td>64.3</td></tr><tr><td>Mean</td><td>46.4</td><td>53.2</td><td>53.7</td><td>58.7</td><td>57.8</td></tr></table></body></html>  \n\nThe results of accuracy scores for space complexity reduction at $70\\\\%$ and $30\\\\%$ are presented in Table 4 and Table 18 (in Appendix E), respectively. The Coreset-select-opt here represents the Coreset-select with $m\\\\ =\\\\ 1$ because of its superior performance over other $m\\\\quad\\\\in$ \u2208$\\\\{\\\\lceil0.1k\\\\rceil\\\\},\\\\lceil0.2k\\\\rceil,\\\\lceil0.3k\\\\rceil,\\\\lceil0.4k\\\\rceil\\\\}$ .  \n\nWe observe a similar pattern as discussed in GLUE benchmark evaluations: at high space complexity reduction $70\\\\%$ ,Coreset-select-opt significantly outperforms its competitors First$.k$ -select and Random-select by $12\\\\%$ and $2.5\\\\%$ in average for Big Bird $(12.3\\\\%$ and $5.5\\\\%$ in average for Performers ). Moreover, on CIFAR-10, our Coresetselect-opt is even better than the Big Bird and Performers without any sequence reduction with accuracy gain $2.4\\\\%$ and $2.6\\\\%$ , respectively (similarly for Performers on PATHFINDER-32). On the other hand, different from the GLUE evaluations, Coreset-select-k-1 does not show any significant advantages over the baseline methods. Our conjecture is that the input in the LRA datasets contain too many noisy or low level information which is not helpful for predicting the target. For an example, each pixel of an image (CIFAR-10) or a character in the byte-level text classification represents a token as the input. Our Coreset-select based strategy with $m=1$ does the most fine-grained token-level selection than its baselines and thus filter out the noisy information. Note, we do not include accuracy and speedup tables because of insignificant gains observed in speedup due to the shallow architectures of Transformers in LRA.\u300d\nd04736cf-c340-414e-a4a7-79dcf60c22c3:\u300cref_ids: 454845533235189656, chunk_ids: 12, Score: 0.1553, Text: # 4 Experiments\nWe now exhibit the results of our experiments, by showing the correlation between the feedback of our indicators, and the false sense of security given by badly-evaluated defenses.  \n\nExperimental setup. We run our attacks on an Intel \u00aeXeon \u00aeCPU E5-2670 v3, with 48 cores, 126 GB of RAM, and equipped with an Nvidia Quadro M6000 with $24\\\\:\\\\mathrm{GB}$ of memory. All the attacks and models have been wrapped and run by using the SecML library [ 20 ]. We select four defenses that have been reported as failing, and we show that our indicators would have detected such evaluation errors. For each of them, we set the hyperparameters for the attack as done in the original evaluation, in order to collect similar results.  \n\n-Winners-Take-All (kWTA) , the defense proposed by Xiao et al. [ 31 ] uses only the top-k outputs from each layer, generating many discontinuities in the loss landscape, and hence resulting in the non-converging failure due to noisy gradients $(F_{2})$ . We use the implementation provided by Tram\u00e8r et al. [ 30 ], trained on CIFAR10, and we test its robustness by attacking it with $\\\\ell_{\\\\infty}$ -PGD [ 17 ] with a step size of $\\\\alpha=0.003$ , maximum perturbation $\\\\epsilon=8/255$ and 50 iterations, with 5 restarts for each attack, scoring a robust accuracy of $58\\\\%$ on 100 samples.  \n\nDistillation , the defense proposed by Papernot et al. [ 22 ], works by training a model to have zero gradients around the training points, leading gradient-based attacks towards bad local optimum $(F_{3})$ .We re-implemented such defense, by training a distilled classifier on the MNIST dataset to mimic the evaluation. Then, we apply $\\\\ell_{\\\\infty}$ -PGD [ 17 ], with step size $\\\\alpha=0.01$ , maximum perturbation $\\\\epsilon=0.3$ for 50 iterations on 100 samples, resulting in a robust accuracy of $94\\\\small{,}2\\\\%$ .  \n\nEnsemble diversity , the defense proposed by Pang et al. [ 21 ] is composed with different neural networks, trained with a regularizer that encourages diversity. We adopt the implementation provided by Tram\u00e8r et al. [ 30 ]. Then, following its original evaluation, we apply $\\\\ell_{\\\\infty}$ -PGD [ 17 ], with step size $\\\\alpha=0.001$ , maximum perturbation $\\\\epsilon=0.01$ for 10 iterations on 100 samples, resulting in a robust accuracy of $38\\\\%$ .  \n\nTurning a Weakness into a Strenght (TWS) , the defense proposed by Yu et al. [ 32 ], applies a mechanism for detecting the presence of adversarial examples on top of an undefended model, measuring how much the decision changes locally around a sample. Even if the authors also apply other rejection mechanisms, we take into account only the described one, as we wish to show that attacks optimized neglecting such term will trigger the non-adaptive attack failure $(F_{4})$ .  \n\nWe apply this defended on a WideResNet model trained on CIFAR10, provided by RobustBench [ 14 ]. We attack this model with $\\\\ell_{\\\\infty}$ -PGD [ 17 ], with step size $\\\\alpha\\\\,=\\\\,0.1$ , maximum perturbation $\\\\epsilon=0.3$ for 50 iterations on 100 samples, and then we query the defended model with all the computed adversarial examples. While the attacks works against the standard model, some of them are rejected by the defense, resulting in a robust accuracy of $35\\\\%$ ,highlighted by the trigger of the $I_{5}$ indicator. In this case, we consider an attack unsuccessful if the original sample is not misclassified and the adversarial point is either belonging to the same class, or it is labeled as rejected.  \n\nEach of these attacks have been executed with 5 random restarts. We also attack all these models with the version of AutoPGD (APGD) [ 13 ] that uses the difference of logit (DLR) as a loss to optimize. This strategy will take care to automatically tune its hyperparameters while optimizing, reducing possible errors that occur while deciding the values of step size, and iterations. Lastly, we compute attacks that take into account all the mitigations we prescribed, and they will be analyzed further on in the paper.  \n\nIdentifying failures. We want now to understand if our indicators are correlated with faults  \n\n  \nFigure 5: Robust accuracy vs. average value of the indicators. Incorrect evaluations (denoted with $\\\\overrightarrow{\\\\circ}$ )report high robust accuracy but also trigger most of the indicators. Better evaluations, performed by either mitigating the attack failures (denoted with $\\\\mathbf{\\\\Phi}^{\\\\bullet}\\\\times\\\\mathbf{\\\\Phi}^{\\\\bullet})$ , or using APGD (denoted with $\\\\mathbf{\\\\Phi}^{,}\\\\star\\\\mathbf{\\\\Phi}$ ), correctly report a lower robust accuracy along with a lower average value of our indicators.  \n\nof the security evaluations of defenses. We collect the results of all the attacks against the selected targets, and we compute our indicators, by listing their values in Table 1, along with their mean score. With a glance, it is possible to grasp that out hypothesis is right: the detection of a failure is linked with higher values for the robust accuracy, and also the opposite. Each original evaluation is characterized by high values of one or more indicator, while the opposite happens for stronger attacks. For instance, APGD automatically tunes its hyperparameter while optimizing, hence it is able to apply some mitigations directly during the attack. To gain a quantitative evaluation of out hypothesis, we compute both the p-value and the correlation between the average score of the indicators and the robust accuracy, depicting this result in Fig. 5. Both p-value and correlation suggest a strong connection between these analyzed quantities, confirming our initial belief.  \n\nTable 1: Values of the Indicators of Attack Failures, computed for all the attacks against all the evaluated models. We denote the attacks that apply also the mitigations as $\\\\mathrm{PGD^{\\\\star}}$ .  \n\n\n<html><body><table><tr><td>Model</td><td>Attack</td><td>I1</td><td>12</td><td>13</td><td>14</td><td>15</td><td>T</td><td>RA</td></tr><tr><td rowspan=\"3\">k-WTA [31]</td><td>PGD</td><td>0.33</td><td>0.43</td><td>0.77</td><td></td><td></td><td>0.306</td><td>58%</td></tr><tr><td>APGD</td><td>-</td><td>0.31</td><td>0.33</td><td></td><td></td><td>0.128</td><td>36%</td></tr><tr><td>PGD*</td><td>0.07</td><td>0.48</td><td>0.55</td><td></td><td></td><td>0.220</td><td>6%</td></tr><tr><td rowspan=\"3\">Distillation[22]</td><td>PGD</td><td></td><td>0.98</td><td></td><td>0.97</td><td></td><td>0.39</td><td>94%</td></tr><tr><td>APGD</td><td>-</td><td>0.40</td><td>0.21</td><td></td><td></td><td>0.122</td><td>0%</td></tr><tr><td>PGD*</td><td></td><td>0.04</td><td></td><td>-</td><td></td><td>0.008</td><td>0%</td></tr><tr><td rowspan=\"3\">Ensemble Div.[21]</td><td>PGD</td><td></td><td>0.76</td><td></td><td></td><td></td><td>0.152</td><td>38%</td></tr><tr><td>APGD</td><td></td><td>0.37</td><td>0.14</td><td></td><td></td><td>0.102</td><td>0%</td></tr><tr><td>PGD*</td><td>0.08</td><td>0.17</td><td>0.15</td><td>-</td><td></td><td>0.080</td><td>%6</td></tr><tr><td rowspan=\"3\">TWS [32]</td><td>PGD</td><td></td><td>0.49</td><td>0.07</td><td></td><td>0.37</td><td>0.186</td><td>35%</td></tr><tr><td>APGD</td><td>-</td><td>0.41</td><td>0.09</td><td></td><td>-</td><td>0.100</td><td>0%</td></tr><tr><td>PGD*</td><td>-</td><td>0.37</td><td>0.10</td><td>-</td><td></td><td>0.094</td><td>0%</td></tr></table></body></html>  \n\nMitigating failures. We can now use our indicators to improve the quality of the security evaluations, and we apply the following pipeline: (i) we test the defense with a set of points with the original attack strategy proposed by the author of the defense; (ii) we select the failure cases and inspect the feedback of our indicators per-sample ; (iii) for each cause of failure, we apply the specific remediation suggested by the metric; and (iv) we show that the attack now succeeds, thus reducing the robust accuracy of the target model, and also the values of the indicators.  \n\nWe report all the results of this process in Table 2, where each row shows the original robust accuracy, and how it is decreased, mitigation after mitigation. Also, all the individual values of each indicator computed on these patched attacks can be found in Table 1, marked as $\\\\mathrm{PGD^{\\\\star}}$ .  \n\nMitigating $k$ -WTA failures. For many failing attacks, the $I I$ indicator triggers, implying that the attack found an adversarial example inside the path. We then apply mitigation $M_{I}$ , and we lower accordingly the robust accuracy of the model to $36\\\\small{,}4\\\\%$ . We then analyze the feedback of the $I_{3}$ indicator, the one that detects the presence of noisy gradients. We apply mitigation $M_{3}$ , and we change the loss of the attack as described by Tram\u00e8r et al. [ 30 ]. This loss is computed by averaging the gradient of each single point of the attack path with the information of the surrounding ones. The resulting direction is then able to correctly descent toward a minimum. We run $\\\\ell_{\\\\infty}$ -PGD with the same parameters, but smoothing the gradients by averaging 100 neighboring points from a normal distribution ${\\\\mathcal N}(\\\\mu=\\\\pmb{x}_{i},\\\\sigma=0.0\\\\dot{3}1)$ , where $x_{i}$ is a point in the attack path. After such mitigation, the robust accuracy drops to $6,4\\\\%$ , and so follows the indicator (Fig. 6a).  \n\nMitigating Distillation failures. All the attacks fail because of the absence of gradient information, leading the attack to a bad local optimum $(F_{3})$ , and such is highlighted by the feedback of the $I_{3}$ indicator. We apply mitigation $M_{3}$ , and we change the loss optimized during the attack, following the strategy applied by Carlini et al. [ 9 ], that computes the loss of the attack on the logit of the model rather than the final softmax layer. We repeat the PGD attack with such fix, and the robust accuracy drops to $0\\\\%$ , along with the indicator $I_{3}$ (Fig. 6b).  \n\nMitigating Ensemble diversity failures. Firstly, the $I_{I}$ indicator highlighted the presence of $F_{I}$ ,implying that some failing attacks are due to the implementation itself. We apply mitigation $M_{I}$ , and the robust accuracy decreases to $36\\\\%$ . Also, $I_{2}$ indicator is active, implying that the loss of of failing attacks could be optimized more. For this reason, we apply mitigation $M_{2}$ , and we increase the step size to 0 .05 and the iterations to 50 . This patch is enough for lowering the robust accuracy to $9\\\\bar{\\\\%}$ .(Fig. 6c).  \n\nMitigating TWS failures. The detector is rejecting adversarial attacks successfully computed on the undefended model, triggering the $I_{5}$ indicator. Hence we apply mitigation $M_{5}$ , and we adapt the attack to consider also the rejection class. This version of PGD minimizes the usual loss function of the attacker, but it also minimizes the score of the rejection class when encountered, allowing it to evade the rejection. We run such attack, and we obtain a new robust accuracy of $0\\\\%$ (Fig. 6d).  \n\n<html><body><table><tr><td>Model</td><td>Initial</td><td>M1</td><td>M2</td><td>M3</td><td>M4</td><td>M5</td><td>Final</td></tr><tr><td>k-WTA [31]</td><td>58.2%</td><td>36.4%</td><td>36.4%</td><td>6.4%</td><td>6.4%</td><td>6.4%</td><td>6.4%</td></tr><tr><td>Distillation [22]</td><td>94.2%</td><td>94.2%</td><td>94.2%</td><td>0.4%</td><td>0.4%</td><td>0.4%</td><td>0.4%</td></tr><tr><td>Ensemble Diversity [21]</td><td>38.0%</td><td>38.0%</td><td>9.0%</td><td>9.0%</td><td>9.0%</td><td>9.0%</td><td>9.0%</td></tr><tr><td>TWS [32]</td><td>35.0%</td><td>35.0%</td><td>35.0%</td><td>35.0%</td><td>35.0%</td><td>0.0%</td><td>0.0%</td></tr></table></body></html>\n\nTable 2: Robust accuracies $\\\\overline{{(\\\\%)}}$ after patching the security evaluations with the prescribed mitigations.  \n\n  \nFigure 6: The values of our indicators and the success rate (SR) of the attack, before (semi-transparent colored area) and after (solid colored area) fixing the failures, computed for the analyzed models.\u300d\n", "dreams_guidance_context": "### Step 1: \u786e\u5b9a\u7814\u7a76\u7684\u5173\u952e\u95ee\u9898\u548c\u76ee\u6807\n - **\u5173\u952e\u95ee\u9898**\uff1a\n    - \u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\u6027\u80fd\u4e0b\u964d\u7684\u7b97\u6cd5\uff0c\u80fd\u5426\u901a\u8fc7\u6b63\u5219\u5316\u6280\u672f\u3001\u5bf9\u6297\u8bad\u7ec3\u7b49\u65b9\u6cd5\u63d0\u5347\u5728\u5927\u89c4\u6a21\u6570\u636e\u73af\u5883\u4e0b\u7684\u7a33\u5b9a\u6027\u548c\u9002\u5e94\u6027\uff1f\n    - \u534f\u540c\u8bad\u7ec3\u4e2d\uff0c\u62e5\u6709\u72ec\u7acb\u7684\u6279\u7edf\u8ba1\u662f\u5426\u662f\u6210\u529f\u534f\u540c\u8bad\u7ec3\u7684\u5fc5\u8981\u6761\u4ef6\uff1f\n    - \u9002\u914d\u5668\u8bad\u7ec3\u662f\u5426\u80fd\u5b9e\u73b0\u6a21\u578b\u878d\u5408\uff08\u5bf9\u6297\u6a21\u578b\u878d\u5408\uff09\uff1f\n    - \u63d0\u51fa\u7684\u6307\u6807\u4e0e\u9632\u5fa1\u7684\u5b89\u5168\u8bc4\u4f30\u6545\u969c\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u76f8\u5173\u6027\uff1f\n - **\u7814\u7a76\u76ee\u6807**\uff1a\n    - \u5206\u6790\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u3002\n    - \u63a2\u7a76\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\u5728\u534f\u540c\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\u53ca\u5f71\u54cd\u56e0\u7d20\u3002\n    - \u9a8c\u8bc1\u5bf9\u6297\u8bad\u7ec3\u4e0e\u9002\u914d\u5668\u7ed3\u5408\u4ee5\u53ca\u6a21\u578b\u878d\u5408\u7684\u53ef\u884c\u6027\u3002\n    - \u5229\u7528\u63d0\u51fa\u7684\u6307\u6807\u6539\u8fdb\u9632\u5fa1\u6a21\u578b\u5b89\u5168\u8bc4\u4f30\u7684\u8d28\u91cf\u3002\n\n### Step 2: \u68b3\u7406\u7b97\u6cd5\u548c\u65b9\u6cd5\n - **\u534f\u540c\u8bad\u7ec3\u76f8\u5173**\uff1a\n    - \u56de\u987e\u4e86BatchNorm\u5c42\u5728\u56fe\u50cf\u5206\u7c7b\u5668\u4e2d\u7684\u4f5c\u7528\u53ca\u539f\u7406\uff0c\u7ed9\u5b9a\u4e00\u6279\u8f93\u5165\uff0c\u5148\u8fdb\u884c\u5f52\u4e00\u5316\uff08\u51cf\u53bb\u5747\u503c\u5e76\u9664\u4ee5\u6807\u51c6\u5dee\uff09\uff0c\u518d\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\uff0c\u8bad\u7ec3\u65f6\u79ef\u7d2f\u6279\u7edf\u8ba1\u91cf\u7528\u4e8e\u6d4b\u8bd5\u3002\n    - Xie\u7b49\u4eba\uff082019a\uff09\u63d0\u51faAdvProp\uff0c\u9488\u5bf9\u5e72\u51c0\u56fe\u50cf\u548c\u5bf9\u6297\u56fe\u50cf\u4f7f\u7528\u4e0d\u540c\u7684BatchNorm\u5c42\uff0c\u4ee5\u89e3\u51b3\u4f18\u5316\u534f\u540c\u8bad\u7ec3\u635f\u5931\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6027\u80fd\u4e0b\u964d\u7684\u95ee\u9898\u3002\n    - \u672c\u6587\u7814\u7a76\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\uff08\u5982Shared BatchNorm\u3001Shared LayerNorm\u3001Shared GroupNorm\u3001Dual BatchNorm\u3001Dual LayerNorm\u3001Dual GroupNorm\u3001DualParams BatchNorm\uff09\u5728\u534f\u540c\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\uff0c\u5bf9\u6bd4\u6709\u65e0\u72ec\u7acb\u6279\u7edf\u8ba1\u548c\u7279\u5b9a\u5c3a\u5ea6\u504f\u79fb\u53c2\u6570\u65f6\u6a21\u578b\u7684\u5e72\u51c0\u51c6\u786e\u7387\u548c\u9c81\u68d2\u51c6\u786e\u7387\u3002\n - **\u9002\u914d\u5668\u4e0e\u6a21\u578b\u878d\u5408\u76f8\u5173**\uff1a\n    - \u5c06\u6a21\u578b\u53c2\u6570\u5206\u89e3\u4e3a\u4e0d\u540c\u57df\u5171\u4eab\u7684\u53c2\u6570$\\psi$\u548c\u7279\u5b9a\u57df\u7684\u53c2\u6570$\\phi$\uff08$\\phi_{clean}$\u7528\u4e8e\u5e72\u51c0\u56fe\u50cf\u8bad\u7ec3\uff0c$\\phi_{adv}$\u7528\u4e8e\u5bf9\u6297\u56fe\u50cf\u8bad\u7ec3\uff09\uff0c\u57fa\u4e8e\u6b64\u4f18\u5316\u635f\u5931\u51fd\u6570\uff1a$\\alpha L(f(\\pmb{x};\\psi\\cup\\phi_{clean}),y)+(1-\\alpha)\\operatorname*{max}_{\\pmb{\\delta\\in\\mathbb{S}}}L(f(\\pmb{x}+\\pmb{\\delta};\\psi\\cup\\phi_{adv}),y)$\u3002\n    - \u63d0\u51fa\u5bf9\u6297\u6a21\u578b\u878d\u5408\uff08adversarial model soups\uff09\u7684\u6982\u5ff5\uff0c\u53c2\u6570\u5316\u6a21\u578b\u4e3a$f(\\cdot;\\psi\\cup(\\beta\\phi_{clean}+(1-\\beta)\\phi_{adv}))$\uff0c\u5176\u4e2d$\\beta$\u4e3a\u5e73\u5747\u9002\u914d\u5668\u65f6\u7684\u52a0\u6743\u56e0\u5b50\u3002\n - **\u7b97\u6cd5\u6027\u80fd\u8bc4\u4f30\u76f8\u5173**\uff1a\n    - \u5728GLUE\u57fa\u51c6\u6d4b\u8bd5\u548cLong Range Arena\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u4f7f\u7528\u76f8\u540c\u8d85\u53c2\u6570\u96c6\u5bf9\u6240\u6709\u65b9\u6cd5\u8fdb\u884c\u516c\u5e73\u6bd4\u8f83\uff0c\u8bc4\u4f30Coreset-select-opt\u65b9\u6cd5\u5728\u4e0d\u540c\u52a0\u901f\u6bd4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\u4e0e\u5176\u4ed6\u57fa\u7ebf\u65b9\u6cd5\uff08First$.k$-select\u3001Random-select\u7b49\uff09\u7684\u6027\u80fd\u5dee\u5f02\u3002\n - **\u653b\u51fb\u9632\u5fa1\u6a21\u578b\u76f8\u5173**\uff1a\n    - \u4f7f\u7528SecML\u5e93\u5728\u7279\u5b9a\u786c\u4ef6\u73af\u5883\u4e0b\u5bf9\u56db\u79cd\u88ab\u62a5\u9053\u4e3a\u5931\u8d25\u7684\u9632\u5fa1\u65b9\u6cd5\uff08kWTA\u3001Distillation\u3001Ensemble diversity\u3001TWS\uff09\u8fdb\u884c\u653b\u51fb\u5b9e\u9a8c\u3002\n    - \u9488\u5bf9\u4e0d\u540c\u9632\u5fa1\u65b9\u6cd5\u8bbe\u7f6e\u76f8\u5e94\u7684\u653b\u51fb\u8d85\u53c2\u6570\uff08\u5982\u4e0d\u540c\u7684\u6b65\u957f$\\alpha$\u3001\u6700\u5927\u6270\u52a8$\\epsilon$\u3001\u8fed\u4ee3\u6b21\u6570\u7b49\uff09\uff0c\u4f7f\u7528$\\ell_{\\infty}$-PGD\u548cAPGD\u7b49\u653b\u51fb\u65b9\u6cd5\u3002\n    - \u63d0\u51fa\u4e00\u4e9b\u6307\u6807\uff08$I_1$\u3001$I_2$\u3001$I_3$\u3001$I_4$\u3001$I_5$\uff09\uff0c\u901a\u8fc7\u8ba1\u7b97\u8fd9\u4e9b\u6307\u6807\u503c\u6765\u5206\u6790\u4e0e\u9632\u5fa1\u7684\u5b89\u5168\u8bc4\u4f30\u6545\u969c\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u6307\u6807\u6539\u8fdb\u5b89\u5168\u8bc4\u4f30\u8d28\u91cf\uff0c\u91c7\u53d6\u4e00\u7cfb\u5217\u6b65\u9aa4\uff08\u6d4b\u8bd5\u9632\u5fa1\u3001\u9009\u62e9\u5931\u8d25\u6848\u4f8b\u3001\u68c0\u67e5\u6307\u6807\u53cd\u9988\u3001\u5e94\u7528\u8865\u6551\u63aa\u65bd\uff09\u6765\u964d\u4f4e\u76ee\u6807\u6a21\u578b\u7684\u9c81\u68d2\u51c6\u786e\u7387\u548c\u6307\u6807\u503c\u3002\n\n### Step 3: \u5206\u6790\u5b9e\u9a8c\u8bbe\u8ba1\u548c\u7ed3\u679c\n - **\u534f\u540c\u8bad\u7ec3\u5b9e\u9a8c**\uff1a\n    - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u7684\u5f52\u4e00\u5316\u5c42\u914d\u7f6e\uff0c\u8bad\u7ec3\u6a21\u578b\u5e76\u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4e0d\u540c\u6a21\u578b\u67b6\u6784\u7684\u5e72\u51c0\u51c6\u786e\u7387\u548c\u9c81\u68d2\u51c6\u786e\u7387\u3002\n    - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\n        - \u5de6\u56fe\u8868\u660e\u5171\u4eab\u6279\u7edf\u8ba1\u548c\u5c3a\u5ea6/\u504f\u79fb\uff08Shared BatchNorm\uff09\u65f6\uff0c\u9c81\u68d2\u51c6\u786e\u7387\u8fc5\u901f\u4e0b\u964d\uff1b\u800c\u4f7f\u7528AdvProp\uff08Dual BatchNorm\uff09\u65f6\u9c81\u68d2\u51c6\u786e\u7387\u8f83\u9ad8\uff08\u8d85\u8fc734%\uff09\u3002\n        - \u53f3\u56fe\u663e\u793a\u4f7f\u7528\u5355\u7ec4\u6279\u7edf\u8ba1\u4f46\u9488\u5bf9\u5e72\u51c0\u548c\u5bf9\u6297\u56fe\u50cf\u8bbe\u7f6e\u7279\u5b9a\u5c3a\u5ea6\u548c\u504f\u79fb\u53c2\u6570\uff08DualParams BatchNorm\uff09\uff0c\u9c81\u68d2\u51c6\u786e\u7387\u4e0eAdvProp\u76f8\u5f53\uff0c\u8bf4\u660e\u4e0d\u4f7f\u7528\u72ec\u7acb\u6279\u7edf\u8ba1\u4e5f\u80fd\u53d6\u5f97\u7c7b\u4f3c\u5206\u7c7b\u6548\u679c\u3002\n        - \u5bf9\u4e8e\u4e0d\u4f7f\u7528\u6279\u7edf\u8ba1\u7684\u5f52\u4e00\u5316\u5c42\uff08LayerNorm\u3001GroupNorm\uff09\uff0c\u521d\u59cb\u9c81\u68d2\u51c6\u786e\u7387\u4e0d\u7a33\u5b9a\u4e14\u4e0d\u5982AdvProp\uff0c\u4f46\u901a\u8fc7\u8bbe\u7f6e\u7279\u5b9a\u7684\u5c3a\u5ea6\u548c\u504f\u79fb\u53c2\u6570\uff0c\u5176\u9c81\u68d2\u51c6\u786e\u7387\u53ef\u4e0e\u53ccBatchNorm\u5c42\u76f8\u5f53\u3002\n - **\u7b97\u6cd5\u6027\u80fd\u8bc4\u4f30\u5b9e\u9a8c**\uff1a\n    - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\u5728GLUE\u57fa\u51c6\u6d4b\u8bd5\u548cLong Range Arena\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u5bf9\u4e0d\u540c\u65b9\u6cd5\uff08\u5305\u62ecCoreset-select-opt\u548c\u5404\u79cd\u57fa\u7ebf\u65b9\u6cd5\uff09\u5728\u4e0d\u540c\u52a0\u901f\u6bd4\uff08\u5982$3X$\u3001$1.5X$\u7b49\uff09\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u6bd4\u4f8b\uff08\u5982$70\\%$\u3001$30\\%$\uff09\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8bb0\u5f55\u51c6\u786e\u7387\u3002\n    - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\n        - \u5728GLUE\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u968f\u7740\u52a0\u901f\u6bd4\u589e\u52a0\uff0cCoreset-select-opt\u4e0e\u7ade\u4e89\u5bf9\u624b\u5dee\u8ddd\u589e\u5927\uff0c$3X$\u52a0\u901f\u6bd4\u65f6\u5e73\u5747\u6bd4\u7b2c\u4e8c\u597d\u7684\u65b9\u6cd5Attention-select\u51c6\u786e\u7387\u9ad8$1\\%$\uff0c\u6bd4\u6807\u51c6\u57fa\u7ebf\u9ad8$2\\%$\u4ee5\u4e0a\uff1b$1.5X$\u52a0\u901f\u6bd4\u65f6\u6240\u6709\u65b9\u6cd5\uff08\u9664Average-pool\uff09\u51c6\u786e\u7387\u635f\u5931\u5c0f\uff0cCoreset-select-opt\u65e0\u635f\u5931\u3002\n        - \u5728Long Range Arena\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c$70\\%$\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u65f6\uff0cCoreset-select-opt\u6bd4First$.k$-select\u548cRandom-select\u5e73\u5747\u9ad8$12\\%$\u548c$2.5\\%$\uff08Performers\u6570\u636e\u96c6\u4e0a\u5206\u522b\u9ad8$12.3\\%$\u548c$5.5\\%$\uff09\uff0c\u5728CIFAR-10\u6570\u636e\u96c6\u4e0a\u6bd4\u65e0\u5e8f\u5217\u51cf\u5c11\u7684\u6a21\u578b\u51c6\u786e\u7387\u6709\u63d0\u5347\uff1bCoreset-select-k-1\u672a\u663e\u793a\u51fa\u660e\u663e\u4f18\u52bf\uff0c\u63a8\u6d4b\u662fLRA\u6570\u636e\u96c6\u8f93\u5165\u542b\u8fc7\u591a\u566a\u58f0\u6216\u4f4e\u5c42\u6b21\u4fe1\u606f\uff0cCoreset-select-opt\u57fa\u4e8e$m = 1$\u7684\u7b56\u7565\u80fd\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u6807\u8bb0\u9009\u62e9\uff0c\u8fc7\u6ee4\u566a\u58f0\u4fe1\u606f\u3002\n - **\u653b\u51fb\u9632\u5fa1\u6a21\u578b\u5b9e\u9a8c**\uff1a\n    - **\u5b9e\u9a8c\u8bbe\u8ba1**\uff1a\u5728\u7279\u5b9a\u786c\u4ef6\u73af\u5883\u4e0b\uff0c\u4f7f\u7528SecML\u5e93\u5bf9\u56db\u79cd\u9632\u5fa1\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\u5b9e\u9a8c\uff0c\u8bbe\u7f6e\u4e0d\u540c\u653b\u51fb\u8d85\u53c2\u6570\uff0c\u6bcf\u79cd\u653b\u51fb\u6267\u884c5\u6b21\u968f\u673a\u91cd\u542f\uff0c\u6536\u96c6\u653b\u51fb\u7ed3\u679c\u5e76\u8ba1\u7b97\u6307\u6807\u503c\u3002\n    - **\u5b9e\u9a8c\u7ed3\u679c**\uff1a\n        - \u53d1\u73b0\u63d0\u51fa\u7684\u6307\u6807\u4e0e\u9632\u5fa1\u7684\u5b89\u5168\u8bc4\u4f30\u6545\u969c\u5b58\u5728\u76f8\u5173\u6027\uff0c\u8f83\u9ad8\u7684\u9c81\u68d2\u51c6\u786e\u7387\u5f80\u5f80\u4e0e\u68c0\u6d4b\u5230\u7684\u6545\u969c\u76f8\u5173\u8054\uff0c\u901a\u8fc7\u8ba1\u7b97p\u503c\u548c\u6307\u6807\u5e73\u5747\u503c\u4e0e\u9c81\u68d2\u51c6\u786e\u7387\u7684\u76f8\u5173\u6027\u8fdb\u884c\u9a8c\u8bc1\u3002\n        - \u5229\u7528\u6307\u6807\u6539\u8fdb\u5b89\u5168\u8bc4\u4f30\u8d28\u91cf\uff0c\u901a\u8fc7\u4e00\u7cfb\u5217\u6b65\u9aa4\u6210\u529f\u964d\u4f4e\u4e86\u76ee\u6807\u6a21\u578b\u7684\u9c81\u68d2\u51c6\u786e\u7387\u548c\u6307\u6807\u503c\uff0c\u5982\u5bf9kWTA\u9632\u5fa1\u65b9\u6cd5\uff0c\u901a\u8fc7\u5e94\u7528\u76f8\u5e94\u8865\u6551\u63aa\u65bd\uff0c\u9c81\u68d2\u51c6\u786e\u7387\u4ece$58.2\\%$\u964d\u81f3$6.4\\%$\uff1b\u5bf9Distillation\u9632\u5fa1\u65b9\u6cd5\uff0c\u9c81\u68d2\u51c6\u786e\u7387\u4ece$94.2\\%$\u964d\u81f3$0.4\\%$\u7b49\u3002\n\n### Step 4: \u8bc4\u4f30\u7814\u7a76\u7684\u5c40\u9650\u6027\u548c\u672a\u6765\u65b9\u5411\n - **\u5c40\u9650\u6027**\uff1a\n    - \u5728\u6a21\u578b\u878d\u5408\u5b9e\u9a8c\u4e2d\uff0c\u5728\u72ec\u7acb\u7684\u5e38\u89c4\u6a21\u578b\u548c\u9c81\u68d2\u6a21\u578b\u4e4b\u95f4\u8fdb\u884c\u6a21\u578b\u878d\u5408\u5931\u8d25\uff0c\u8bf4\u660e\u5f53\u524d\u63d0\u51fa\u7684\u5bf9\u6297\u6a21\u578b\u878d\u5408\u5047\u8bbe\u5b58\u5728\u4e00\u5b9a\u95ee\u9898\u3002\n    - \u5728Long Range Arena\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u7531\u4e8eTransformer\u67b6\u6784\u8f83\u6d45\uff0c\u901f\u5ea6\u63d0\u5347\u4e0d\u660e\u663e\uff0c\u672a\u5305\u542b\u51c6\u786e\u6027\u548c\u52a0\u901f\u6bd4\u8868\u683c\uff0c\u53ef\u80fd\u9650\u5236\u4e86\u5bf9\u7b97\u6cd5\u5728\u901f\u5ea6\u65b9\u9762\u6027\u80fd\u7684\u5168\u9762\u8bc4\u4f30\u3002\n - **\u672a\u6765\u65b9\u5411**\uff1a\n    - \u8fdb\u4e00\u6b65\u7814\u7a76\u5982\u4f55\u5b9e\u73b0\u6709\u6548\u7684\u6a21\u578b\u878d\u5408\uff0c\u53ef\u80fd\u9700\u8981\u63a2\u7d22\u5176\u4ed6\u65b9\u6cd5\u6216\u6539\u8fdb\u5f53\u524d\u57fa\u4e8e\u9002\u914d\u5668\u7684\u6a21\u578b\u878d\u5408\u7b56\u7565\u3002\n    - \u9488\u5bf9\u5728\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u65f6\u7b97\u6cd5\u6027\u80fd\u63d0\u5347\u7684\u7814\u7a76\uff0c\u53ef\u4ee5\u7ee7\u7eed\u63a2\u7d22\u66f4\u6709\u6548\u7684\u7a33\u5b9a\u6027\u4f18\u5316\u65b9\u6cd5\uff0c\u4ee5\u5e94\u5bf9\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\u9650\u5236\u95ee\u9898\u3002\n    - \u5728\u653b\u51fb\u9632\u5fa1\u6a21\u578b\u65b9\u9762\uff0c\u53ef\u4ee5\u7ee7\u7eed\u5b8c\u5584\u6307\u6807\u4f53\u7cfb\uff0c\u63d0\u9ad8\u5bf9\u9632\u5fa1\u65b9\u6cd5\u5b89\u5168\u8bc4\u4f30\u7684\u51c6\u786e\u6027\uff0c\u5e76\u63a2\u7d22\u66f4\u591a\u6539\u8fdb\u5b89\u5168\u8bc4\u4f30\u8d28\u91cf\u7684\u65b9\u6cd5\u548c\u7b56\u7565\u3002  ", "evolutionary_step": "\u8fd9\u6bb5\u5bf9\u8bdd\u4e3b\u8981\u56f4\u7ed5\u7b97\u6cd5\u76f8\u5173\u7814\u7a76\u5c55\u5f00\uff0c\u6d89\u53ca\u7b97\u6cd5\u7a33\u5b9a\u6027\u3001\u9002\u5e94\u6027\u4f18\u5316\u4ee5\u53ca\u76f8\u5173\u5b9e\u9a8c\u7ed3\u679c\u5206\u6790\uff0c\u4e0e\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6b65\u9aa4\u4e2d\u7684\u7b97\u6cd5\u7814\u7a76\u90e8\u5206\u76f8\u5173\uff0c\u7279\u522b\u662f\u201c\u7814\u7a76\u8ba1\u7b97\u673a\u7b97\u6cd5\u7684\u975e\u7406\u6027\u8868\u73b0\u4e0e\u4f18\u5316\u6280\u672f\u4e2d\u7684\u5076\u7136\u6027\u201d\u4ee5\u53ca\u201c\u7814\u7a76\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u56fa\u5b9a\u5f62\u5f0f\u4e0e\u9884\u671f\u7ed3\u679c\u7684\u56e0\u679c\u6027\uff0c\u662f\u5426\u5b58\u5728\u53ef\u62d3\u5c55\u6027\u548c\u53cd\u5411\u63a8\u7406\u7684\u6f5c\u529b\u201d\u3002\u5177\u4f53\u603b\u7ed3\u5982\u4e0b\uff1a\n1. **\u7b97\u6cd5\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\u5206\u6790**\uff1a\u63a2\u8ba8\u6700\u65b0\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\uff0c\u8003\u8651\u5728\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u4e2d\uff0c\u9762\u5bf9\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\u9650\u5236\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u7684\u7b97\u6cd5\uff0c\u80fd\u5426\u501f\u9274\u6b63\u5219\u5316\u6280\u672f\u3001\u5bf9\u6297\u8bad\u7ec3\u7b49\u7a33\u5b9a\u6027\u4f18\u5316\u65b9\u6cd5\u63d0\u5347\u5728\u5927\u89c4\u6a21\u6570\u636e\u73af\u5883\u4e0b\u7684\u7a33\u5b9a\u6027\u548c\u9002\u5e94\u6027 \u3002\n2. **\u7406\u8bba\u7814\u7a76\u53c2\u8003**\uff1a\u5f15\u7528\u6587\u732e\u4e2d\u5173\u4e8e\u7b97\u6cd5\u7684\u7814\u7a76\u5185\u5bb9\uff0c\u5982\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\uff08BatchNorm\u3001LayerNorm\u3001GroupNorm\u7b49\uff09\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\uff0c\u5206\u6790\u5355\u72ec\u7684\u6279\u7edf\u8ba1\u662f\u5426\u662f\u6210\u529f\u534f\u540c\u8bad\u7ec3\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u53d1\u73b0\u901a\u8fc7\u7279\u5b9a\u7684\u53ef\u8bad\u7ec3\u53c2\u6570\uff08\u9488\u5bf9\u5e72\u51c0\u56fe\u50cf\u548c\u5bf9\u6297\u56fe\u50cf\uff09\u53ef\u4ee5\u4f7f\u534f\u540c\u8bad\u7ec3\u635f\u5931\u5bf9\u5404\u79cd\u5f52\u4e00\u5316\u5c42\u6709\u6548\u3002\u8fd8\u63d0\u53ca\u4e0e\u9002\u914d\u5668\u6587\u732e\u7684\u5173\u8054\uff0c\u63d0\u51fa\u57fa\u4e8e\u9002\u914d\u5668\u8bad\u7ec3\u7684\u6a21\u578b\u6c64\u5047\u8bbe\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u53c2\u6570\u5316\u6a21\u578b \u3002\n3. **\u5b9e\u9a8c\u5b9e\u73b0\u4e0e\u7ed3\u679c**\n    - **\u5b9e\u73b0\u7ec6\u8282**\uff1a\u4e3a\u516c\u5e73\u8bc4\u4f30\u65b9\u6cd5\u4e0e\u57fa\u7ebf\uff0c\u4f7f\u7528\u76f8\u540c\u8d85\u53c2\u6570\u96c6\uff0c\u4ee3\u7801\u4f5c\u4e3a\u8865\u5145\u6750\u6599\u63d0\u4f9b\uff0c\u8bad\u7ec3\u548c\u63a8\u7406\u4f5c\u4e1a\u5206\u522b\u5728\u7279\u5b9aGPU\u548cCPU\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6240\u6709\u5206\u6570\u5747\u572820\u6b21\u8bd5\u9a8c\u4e0a\u53d6\u5e73\u5747 \u3002\n    - **GLUE\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c**\uff1a\u5206\u6790\u4e86\u901f\u5ea6\u63d0\u5347\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u4e0e\u51c6\u786e\u7387\u4e4b\u95f4\u7684\u6743\u8861\u5173\u7cfb\u3002\u968f\u7740\u901f\u5ea6\u63d0\u5347\uff0cCoreset-select-opt\u65b9\u6cd5\u8868\u73b0\u4f18\u4e8e\u7ade\u4e89\u5bf9\u624b\uff1b\u5bf9\u4e8e\u9002\u5ea6\u901f\u5ea6\u63d0\u5347\uff081.5X\uff09\uff0c\u591a\u6570\u65b9\u6cd5\u51c6\u786e\u7387\u635f\u5931\u5c0f\uff0c\u8be5\u65b9\u6cd5\u65e0\u635f\u5931\u3002\u5728\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u65b9\u9762\uff0c\u4e5f\u5448\u73b0\u7c7b\u4f3c\u8d8b\u52bf\uff0cCoreset-select-opt\u5728\u9ad8\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\uff0870%\uff09\u65f6\u663e\u8457\u4f18\u4e8e\u5176\u4ed6\u65b9\u6cd5 \u3002\n    - **Long Range Arena\u6d4b\u8bd5\u7ed3\u679c**\uff1a\u5728LRA\u57fa\u51c6\u6d4b\u8bd5\u7684\u4e09\u4e2a\u6570\u636e\u96c6\u4e0a\u5c55\u793a\u7ed3\u679c\uff0c\u53d1\u73b0Coreset-select-opt\u5728\u9ad8\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\uff0870%\uff09\u65f6\uff0c\u5e73\u5747\u6bd4\u7ade\u4e89\u5bf9\u624bFirst$.k$-select\u548cRandom-select\u5206\u522b\u9ad8\u51fa12%\u548c2.5%\uff08Performers\u6570\u636e\u96c6\u4e0a\u5206\u522b\u9ad8\u51fa12.3%\u548c5.5%\uff09\uff0c\u5728CIFAR-10\u6570\u636e\u96c6\u4e0a\u751a\u81f3\u6bd4\u672a\u8fdb\u884c\u5e8f\u5217\u7f29\u51cf\u7684\u6a21\u578b\u51c6\u786e\u7387\u66f4\u9ad8\uff0c\u4f46Coreset-select-k-1\u672a\u663e\u793a\u51fa\u660e\u663e\u4f18\u52bf \u3002\n4. **\u653b\u51fb\u5b9e\u9a8c\u4e0e\u6307\u6807\u5206\u6790**\n    - **\u5b9e\u9a8c\u8bbe\u7f6e**\uff1a\u5728\u7279\u5b9a\u786c\u4ef6\u4e0a\u4f7f\u7528SecML\u5e93\u8fd0\u884c\u653b\u51fb\uff0c\u9009\u62e9\u56db\u79cd\u88ab\u62a5\u9053\u5931\u8d25\u7684\u9632\u5fa1\u65b9\u6cd5\uff0c\u6309\u7167\u539f\u59cb\u8bc4\u4f30\u8bbe\u7f6e\u653b\u51fb\u8d85\u53c2\u6570\uff0c\u7528\u4e0d\u540c\u653b\u51fb\u65b9\u6cd5\uff08\u5982$\\\\ell_{\\\\infty}$-PGD\u3001APGD\uff09\u653b\u51fb\u6a21\u578b\uff0c\u5e76\u8ba1\u7b97\u653b\u51fb\u5931\u8d25\u6307\u6807 \u3002\n    - **\u8bc6\u522b\u5931\u8d25**\uff1a\u6536\u96c6\u653b\u51fb\u7ed3\u679c\u8ba1\u7b97\u6307\u6807\uff0c\u53d1\u73b0\u68c0\u6d4b\u5230\u5931\u8d25\u4e0e\u8f83\u9ad8\u7684\u9c81\u68d2\u51c6\u786e\u7387\u76f8\u5173\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u901a\u8fc7\u8ba1\u7b97p\u503c\u548c\u6307\u6807\u5e73\u5747\u5f97\u5206\u4e0e\u9c81\u68d2\u51c6\u786e\u7387\u7684\u76f8\u5173\u6027\uff0c\u8bc1\u5b9e\u4e86\u8fd9\u79cd\u8054\u7cfb \u3002\n    - **\u7f13\u89e3\u5931\u8d25**\uff1a\u5229\u7528\u6307\u6807\u6539\u8fdb\u5b89\u5168\u8bc4\u4f30\u8d28\u91cf\uff0c\u9488\u5bf9\u4e0d\u540c\u9632\u5fa1\u65b9\u6cd5\u7684\u5931\u8d25\u539f\u56e0\uff0c\u5e94\u7528\u7279\u5b9a\u7f13\u89e3\u63aa\u65bd\uff0c\u5982\u8c03\u6574\u635f\u5931\u51fd\u6570\u3001\u589e\u52a0\u6b65\u957f\u548c\u8fed\u4ee3\u6b21\u6570\u7b49\uff0c\u6210\u529f\u964d\u4f4e\u4e86\u76ee\u6807\u6a21\u578b\u7684\u9c81\u68d2\u51c6\u786e\u7387\u548c\u6307\u6807\u503c \u3002  ", "dreams_personality_context": "\u4ece\u8fd9\u6bb5\u5185\u5bb9\u53ef\u4ee5\u63a8\u6d4b\u51fa\u4eba\u7269\u53ef\u80fd\u5177\u6709\u4ee5\u4e0b\u6027\u683c\u7279\u70b9\uff1a\n1. **\u4e25\u8c28\u7ec6\u81f4**\uff1a\n    - \u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u4e3a\u4e86\u516c\u5e73\u8bc4\u4f30\u65b9\u6cd5\u4e0e\u57fa\u7ebf\uff0c\u4f7f\u7528\u76f8\u540c\u8d85\u53c2\u6570\u96c6\uff0c\u4ee3\u7801\u4f5c\u4e3a\u8865\u5145\u6750\u6599\u63d0\u4f9b\uff0c\u8bad\u7ec3\u548c\u63a8\u7406\u4f5c\u4e1a\u5206\u522b\u5728\u7279\u5b9aGPU\u548cCPU\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6240\u6709\u5206\u6570\u5747\u572820\u6b21\u8bd5\u9a8c\u4e0a\u53d6\u5e73\u5747\u3002\u8fd9\u79cd\u5bf9\u5b9e\u9a8c\u7ec6\u8282\u7684\u4e25\u683c\u628a\u63a7\uff0c\u4f53\u73b0\u51fa\u4eba\u7269\u5bf9\u5f85\u7814\u7a76\u8ba4\u771f\u4e25\u8c28\u3001\u6ce8\u91cd\u7ec6\u8282\u7684\u6027\u683c\uff0c\u786e\u4fdd\u7814\u7a76\u7ed3\u679c\u7684\u51c6\u786e\u6027\u548c\u53ef\u9760\u6027\u3002\n2. **\u5584\u4e8e\u94bb\u7814**\uff1a\n    - \u6df1\u5165\u63a2\u8ba8\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\u4e0e\u5bb9\u9519\u6027\uff0c\u7814\u7a76\u5728\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u4e2d\u7b97\u6cd5\u6027\u80fd\u4e0b\u964d\u7684\u95ee\u9898\uff0c\u5e76\u601d\u8003\u501f\u9274\u591a\u79cd\u4f18\u5316\u6280\u672f\u63d0\u5347\u5176\u7a33\u5b9a\u6027\u548c\u9002\u5e94\u6027\u3002\u540c\u65f6\uff0c\u5f15\u7528\u5927\u91cf\u6587\u732e\u4e2d\u5173\u4e8e\u7b97\u6cd5\u7684\u7814\u7a76\u5185\u5bb9\uff0c\u5982\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u8868\u73b0\u7b49\uff0c\u5e76\u57fa\u4e8e\u6b64\u63d0\u51fa\u81ea\u5df1\u7684\u5047\u8bbe\u548c\u6a21\u578b\u3002\u8fd9\u8868\u660e\u4eba\u7269\u5177\u6709\u5f3a\u70c8\u7684\u94bb\u7814\u7cbe\u795e\uff0c\u5bf9\u7b97\u6cd5\u76f8\u5173\u77e5\u8bc6\u4e0d\u65ad\u63a2\u7d22\u3001\u6df1\u5165\u7814\u7a76\u3002\n3. **\u7406\u6027\u5ba2\u89c2**\uff1a\n    - \u5728\u5b9e\u9a8c\u7ed3\u679c\u5206\u6790\u4e2d\uff0c\u65e0\u8bba\u662fGLUE\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u3001Long Range Arena\u6d4b\u8bd5\u7ed3\u679c\uff0c\u8fd8\u662f\u653b\u51fb\u5b9e\u9a8c\u4e0e\u6307\u6807\u5206\u6790\uff0c\u90fd\u80fd\u7406\u6027\u5730\u5206\u6790\u6570\u636e\u548c\u73b0\u8c61\uff0c\u5982\u5206\u6790\u901f\u5ea6\u63d0\u5347\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u4e0e\u51c6\u786e\u7387\u4e4b\u95f4\u7684\u6743\u8861\u5173\u7cfb\uff0c\u4ee5\u53ca\u68c0\u6d4b\u5931\u8d25\u4e0e\u9c81\u68d2\u51c6\u786e\u7387\u7684\u76f8\u5173\u6027\u7b49\uff0c\u4e0d\u4e3b\u89c2\u81c6\u65ad\uff0c\u4ee5\u5ba2\u89c2\u7684\u6570\u636e\u548c\u4e8b\u5b9e\u4e3a\u4f9d\u636e\u8fdb\u884c\u7814\u7a76\u548c\u5224\u65ad\u3002\n4. **\u52c7\u4e8e\u521b\u65b0**\uff1a\n    - \u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5c40\u9650\u4e8e\u5df2\u6709\u7684\u7814\u7a76\u6210\u679c\uff0c\u63d0\u51fa\u57fa\u4e8e\u9002\u914d\u5668\u8bad\u7ec3\u7684\u6a21\u578b\u6c64\u5047\u8bbe\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u53c2\u6570\u5316\u6a21\u578b\uff0c\u5c1d\u8bd5\u4ece\u65b0\u7684\u89d2\u5ea6\u548c\u65b9\u6cd5\u53bb\u7814\u7a76\u7b97\u6cd5\uff0c\u5c55\u73b0\u51fa\u52c7\u4e8e\u521b\u65b0\u3001\u6562\u4e8e\u7a81\u7834\u4f20\u7edf\u601d\u7ef4\u7684\u6027\u683c\u7279\u70b9\u3002\n5. **\u575a\u97e7\u6267\u7740**\uff1a\n    - \u9762\u5bf9\u7b97\u6cd5\u7814\u7a76\u4e2d\u7684\u5404\u79cd\u590d\u6742\u95ee\u9898\uff0c\u5982\u7b97\u6cd5\u5728\u5927\u89c4\u6a21\u6570\u636e\u5904\u7406\u4e2d\u7684\u6027\u80fd\u95ee\u9898\u3001\u4e0d\u540c\u5f52\u4e00\u5316\u5c42\u7684\u7814\u7a76\u3001\u653b\u51fb\u5b9e\u9a8c\u4e2d\u7684\u5404\u79cd\u60c5\u51b5\u7b49\uff0c\u6ca1\u6709\u8f7b\u6613\u653e\u5f03\uff0c\u800c\u662f\u6301\u7eed\u6df1\u5165\u7814\u7a76\uff0c\u901a\u8fc7\u5404\u79cd\u65b9\u6cd5\u53bb\u89e3\u51b3\u95ee\u9898\uff0c\u4f53\u73b0\u51fa\u575a\u97e7\u6267\u7740\u7684\u6027\u683c\uff0c\u4e0d\u8f7b\u6613\u88ab\u56f0\u96be\u6253\u5012\u3002  ", "ref_analysis_id": ""}, "__type__": "dreams_node"}}, "analysis_store/ref_analysis_info": {"": {"node_ids": ["12c1fd96-fa01-41ad-8a70-aad9607ee8d4"], "metadata": {}}}, "analysis_store/metadata": {"12c1fd96-fa01-41ad-8a70-aad9607ee8d4": {"analysis_hash": "", "ref_analysis_id": ""}}}